syntax = "proto3";
package ollo.reserve.v1;


import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "ollo/reserve/v1/reserve.proto"; 
import "ollo/reserve/v1/params.proto";

option go_package = "ollo/x/reserve/types";

// Query defines the gRPC querier service.
service Query {
  // Params defines a gRPC query method that returns the tokenfactory module's
  // parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ollo/reserve/v1/params";
  }
  // GetDenoms returns all denoms under reserve
  rpc GetDenoms(QueryGetDenomsRequest) returns (QueryGetDenomsResponse) {
    option (google.api.http).get = "/ollo/reserve/v1/denoms";
  }
  // GetDenom returns info and metadata about a specific reserve denom
  rpc GetDenom(QueryGetDenomRequest) returns (QueryGetDenomResponse) {
    option (google.api.http).get = "/ollo/reserve/v1/denoms/{denom}";
  }

  // DenomWhitelist.g defines a gRPC query method for fetching
  // DenomWhitelist.g for a particular denom.
  rpc GetDenomWhitelist(QueryGetDenomWhitelistRequest) 
  returns (QueryGetDenomWhitelistResponse) { 
    option (google.api.http).get = 
        "/ollo/reserve/v1/denoms/{denom}/whitelist"; 
  } 

  // DenomsFromCreator defines a gRPC query method for fetching all
  // denominations created by a specific admin/creator.
  rpc DenomsFromCreator(QueryDenomsFromCreatorRequest)
      returns (QueryDenomsFromCreatorResponse) {
    option (google.api.http).get =
        "/ollo/reserve/v1/creator/{creator}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryDenomWhitelist.gRequest defines the request structure for the
// DenomWhitelist.g gRPC query.
message QueryGetDenomWhitelistRequest { 
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ]; 
} 

// QueryDenomWhitelist.gResponse defines the response structure for the
// DenomWhitelist.g gRPC query.
message QueryGetDenomWhitelistResponse { 
  DenomWhitelist whitelist = 1 [ 
    (gogoproto.moretags) = "yaml:\"whitelist\"", 
    (gogoproto.nullable) = false 
  ]; 
} 

// QueryDenomsFromCreatorRequest defines the request structure for the
// DenomsFromCreator gRPC query.
message QueryDenomsFromCreatorRequest {
  string creator = 1 [ 
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (gogoproto.moretags) = "yaml:\"creator\"" ];
}

// QueryDenomsFromCreatorRequest defines the response structure for the
// DenomsFromCreator gRPC query.
message QueryDenomsFromCreatorResponse {
  repeated string denoms = 1 [ (gogoproto.moretags) = "yaml:\"denoms\"" ];
}


// QueryDenomsRequest is the request type for the Query/Denoms RPC method.
message QueryGetDenomsRequest {}

// QueryDenomsResponse is the response type for the Query/Denoms RPC method.
message QueryGetDenomsResponse {
  // params defines the parameters of the module.
  repeated string denoms = 1 [ (gogoproto.moretags) = "yaml:\"denoms\"" ];
}

// QueryDenomsRequest is the request type for the Query/Denoms RPC method.
message QueryGetDenomRequest {
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
}

// QueryDenomsResponse is the response type for the Query/Denoms RPC method.
message QueryGetDenomResponse {
  // params defines the parameters of the module.
}