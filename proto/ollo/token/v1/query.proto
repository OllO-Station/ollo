syntax = "proto3";
package ollo.token.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "ollo/token/v1/params.proto";
import "ollo/token/v1/token.proto";

option go_package = "ollo/x/token/types";

// Query service defines a service with token info as endpoints
service Query {

  // Query token returns token info given denom
  rpc Token(QueryTokenRequest) returns (QueryTokenResponse) {
    option (google.api.http).get = "/ollo/token/v1/tokens/{denom}";
  }

  // Tokens endpoint returns the list of all defined tokens
  rpc Tokens(QueryTokensRequest) returns (QueryTokensResponse) {
    option (google.api.http).get = "/ollo/token/v1/tokens";
  }

  // Fee returns the fees to issue or mint a token
  rpc Fees(QueryFeesRequest) returns (QueryFeesResponse) {
    option (google.api.http).get = "/ollo/token/v1/tokens/{denom}/fees";
  }

  // Params returns the token module parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ollo/token/v1/params";
  }

  // Burn endpoint returns all coins that have been burned
  rpc Burn(QueryBurnRequest) returns (QueryBurnResponse) {
    option (google.api.http).get = "/ollo/token/v1/burn";

  }
}

// QueryTokenRequest is request type for the Query/Token RPC method
message QueryTokenRequest { string denom = 1; }

// QueryTokenResponse is response type for the Query/Token RPC method
message QueryTokenResponse {
  google.protobuf.Any Token = 1
      [ (cosmos_proto.accepts_interface) = "ContentI" ];
}

// QueryTokensRequest is request type for the Query/Tokens RPC method
message QueryTokensRequest {
  string owner = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryTokensResponse is response type for the Query/Tokens RPC method
message QueryTokensResponse {
  repeated google.protobuf.Any Tokens = 1
      [ (cosmos_proto.accepts_interface) = "ContentI" ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFeesRequest is request type for the Query/Fees RPC method
message QueryFeesRequest { string denom = 1; }

// QueryFeesResponse is response type for the Query/Fees RPC method
message QueryFeesResponse {
  bool exist = 1;
  cosmos.base.v1beta1.Coin issue_fee = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"issue_fee\"",
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
  cosmos.base.v1beta1.Coin mint_fee = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"mint_fee\"",
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];
}

// QueryParametersRequest is request type for the Query/Parameters RPC method
message QueryParamsRequest {}

// QueryParametersResponse is response type for the Query/Parameters RPC method
message QueryParamsResponse {
  ollo.token.v1.Params params = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse res = 2;
}

// QueryTokenRequest is request type for the Query/TotalBurn RPC method
message QueryBurnRequest {}

// QueryTotalBurnResponse is response type for the Query/TotalBurn RPC method
message QueryBurnResponse {
  repeated cosmos.base.v1beta1.Coin burned_coins = 1
      [ (gogoproto.nullable) = false ];
}
