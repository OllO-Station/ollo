syntax = "proto3";
package ollo.ons.v1beta1;

import "ollo/ons/v1beta1/name.proto";
import "gogoproto/gogo.proto";
option go_package = "ollo/x/ons/types";


enum GroupNamePolicy {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;

  GROUP_NAME_USER_KEEPS_UPON_LEAVING = 0;
  GROUP_NAME_DELETE_UPON_LEAVING = 1;
  GROUP_NAME_GROUP_CLAIMS_UPON_LEAVING = 2;
}

enum GroupNameType {
  option (gogoproto.goproto_enum_stringer) = true;
  option (gogoproto.goproto_enum_prefix) = false;

  GROUP_NAME_UNSPECIFIED = 0;
  GROUP_NAME_INDIVIDUAL = 1;
  GROUP_NAME_ROLE = 2;
  GROUP_NAME_GROUP = 3;
  GROUP_NAME_OTHER = 4;
}
// Names specific to a certain group or role
message GroupName {
  option (gogoproto.goproto_stringer) = true;
  option (gogoproto.equal) = true;

  uint64 group_id = 1;

  GroupNameType group_name_type = 2;

  // if empty, assumed to be role, group, or other. if not group
  // role specified, defaults to whole group name

  // if a role-based or group-based name, specify the group policy address to send name to
  string group_policy_role=3;// [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // If specified as group name but left empty, name is technically "owned" by the admin
  string owner_addr = 4;//[(cosmos_proto.scalar) = "cosmos.AddressString"];

  // if empty, any member of group can use name
  repeated string group_roles = 5;

  // only applies for multi-user group roles
  string automatic_set = 6;

  NameStatus status = 7;

  string price_paid = 8;

  string color_hint = 9;
  // Optional
  NameEnd prefix = 10;
  //Optional
  NameEnd suffix = 11;

  repeated NameTag tag = 12;

}

// Names specific to a certain group
