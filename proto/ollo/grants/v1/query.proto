syntax = "proto3";
package ollo.grants.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "ollo/grants/v1/grants.proto";
import "ollo/grants/v1/params.proto";

option go_package = "ollo/x/grants/types";

// Query defines the gRPC querier service.
service Query {
  // Params returns parameters of the grants module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ollo/grants/v1/params";
  }

  // Auctions returns all auctions.
  rpc Auctions(QueryAuctionsRequest) returns (QueryAuctionsResponse) {
    option (google.api.http).get = "/ollo/grants/v1/auctions";
  }

  // Auction returns the specific auction.
  rpc Auction(QueryAuctionRequest) returns (QueryAuctionResponse) {
    option (google.api.http).get = "/ollo/grants/v1/auctions/{auction_id}";
  }

  // AllowedBidder returns the specific allowed bidder information.
  rpc AllowedBidder(QueryAllowedBidderRequest) returns (QueryAllowedBidderResponse) {
    option (google.api.http).get = "/ollo/grants/v1/auctions/"
                                   "{auction_id}/allowed_bidders/{bidder}";
  }

  // AllowedBidders returns all allowed bidders for the auction.
  rpc AllowedBidders(QueryAllowedBiddersRequest) returns (QueryAllowedBiddersResponse) {
    option (google.api.http).get = "/ollo/grants/v1/auctions/{auction_id}/allowed_bidders";
  }

  // Bids returns all bids.
  rpc Bids(QueryBidsRequest) returns (QueryBidsResponse) {
    option (google.api.http).get = "/ollo/grants/v1/auctions/{auction_id}/bids";
  }

  // Bid returns the specific bid from the auction id and bid id.
  rpc Bid(QueryBidRequest) returns (QueryBidResponse) {
    option (google.api.http).get = "/ollo/grants/v1/auctions/{auction_id}/bids/{bid_id}";
  }

  // Vestings returns all vestings for the auction.
  rpc Vestings(QueryVestingsRequest) returns (QueryVestingsResponse) {
    option (google.api.http).get = "/ollo/grants/v1/auctions/{auction_id}/vestings";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// QueryAuctionsRequest is request type for the Query/Auctions RPC method.
message QueryAuctionsRequest {
  string                                status     = 1;
  string                                type       = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryAuctionsResponse is response type for the Query/Auctions RPC method.
message QueryAuctionsResponse {
  // auctions specifies the existing auctions
  repeated google.protobuf.Any auctions = 1 [(cosmos_proto.accepts_interface) = "AuctionI"];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryAuctionRequest is the request type for the Query/Auction RPC method.
message QueryAuctionRequest {
  uint64 auction_id = 1;
}

// QueryAuctionResponse is the response type for the Query/Auction RPC method.
message QueryAuctionResponse {
  google.protobuf.Any auction = 1 [(cosmos_proto.accepts_interface) = "AuctionI"];
}

// QueryAllowedBidderRequest is the request type for the Query/AllowedBidder RPC
// method.
message QueryAllowedBidderRequest {
  uint64 auction_id = 1;
  string bidder     = 2;
}

// QueryAllowedBidderResponse is the response type for the Query/AllowedBidder
// RPC method.
message QueryAllowedBidderResponse {
  AllowedBidder allowed_bidder = 1 [(gogoproto.nullable) = false];
}

// QueryAllowedBiddersRequest is the request type for the Query/AllowedBidders
// RPC method.
message QueryAllowedBiddersRequest {
  uint64 auction_id = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllowedBiddersResponse is the response type for the Query/AllowedBidders
// RPC method.
message QueryAllowedBiddersResponse {
  repeated AllowedBidder allowed_bidders = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBidsRequest is request type for the Query/Bids RPC method.
message QueryBidsRequest {
  uint64                                auction_id = 1;
  string                                bidder     = 2;
  string                                is_matched = 3;
  cosmos.base.query.v1beta1.PageRequest pagination = 4;
}

// QueryBidsResponse is response type for the Query/Bids RPC method.
message QueryBidsResponse {
  // bids specifies the existing bids
  repeated Bid bids = 1 [(gogoproto.nullable) = false];

  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryBidRequest is the request type for the Query/Sequence RPC method.
message QueryBidRequest {
  uint64 auction_id = 1;
  uint64 bid_id     = 2;
}

// QueryBidResponse is response type for the Query/Sequence RPC method.
message QueryBidResponse {
  // bid specifies specific bid
  Bid bid = 1 [(gogoproto.nullable) = false];
}

// QueryVestingsRequest is request type for the Query/Vestings RPC method.
message QueryVestingsRequest {
  uint64 auction_id = 1;
}

// QueryVestingsResponse is response type for the Query/Vestings RPC method.
message QueryVestingsResponse {
  // vestings specifies the existing vestings
  repeated VestingQueue vestings = 1 [(gogoproto.nullable) = false];
}
