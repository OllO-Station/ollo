syntax = "proto3";
package ollo.liquidity.v1beta1;

import "cosmos_proto/coin.proto";
import "gogoproto/gogo.proto";
import "ollo/liquidity/v1beta1/liquidity.proto";
import "ollo/liquidity/v1beta1/params.proto";
import "google/api/annotations.proto";
import "cosmos_proto/pagination.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "ollo/x/liquidity/types";

// Query defines the gRPC query service for the liquidity module.
service Query {
  // Get existing liquidity pools.
  rpc LiquidityPools(QueryLiquidityPoolsRequest)
      returns (QueryLiquidityPoolsResponse) {
    option (google.api.http).get = "/ollo/liquidity/v1beta1/pools";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Returns a list of all liquidity pools with pagination "
                    "result.";
  external_docs : {
  url:
    "https://ollo/blob/develop/doc/client.md";
  description:
    "Find out more about the query and error codes";
  }
  responses : {
  key:
    "500" value : {
    description:
      "Internal Server Error" examples : {
      key:
        "application/json"
        value : '{"code":2,"message":"rpc error: code = NotFound desc = There are no pools present.: key not found","details":[]}'
      }
    }
  }
  };
}

// Get specific liquidity pool.
rpc LiquidityPool(QueryLiquidityPoolRequest)
    returns (QueryLiquidityPoolResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/pools/{pool_id}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description : "Returns the liquidity pool that corresponds to the pool_id.";
external_docs : {
url:
  "https://ollo/blob/develop/doc/client.md";
description:
  "Find out more about the query and error codes";
}
responses : {
key:
  "500" value : {
  description:
    "Internal Server Error" examples : {
    key:
      "application/json"
      value : '{"code":2,"message":"rpc error: code = NotFound desc = liquidity pool 3 doesn\'t exist: key not found","details":[]}'
    }
  }
}
responses : {
key:
  "400" value : {
  description:
    "Bad Request" examples : {
    key:
      "application/json"
      value : '{"code":3,"message":"type mismatch, parameter: pool_id, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
    }
  }
}
};
}

// Get specific liquidity pool corresponding to the pool_coin_denom.
rpc LiquidityPoolByPoolCoinDenom(QueryLiquidityPoolByPoolCoinDenomRequest)
    returns (QueryLiquidityPoolResponse) {
  option (google.api.http).get =
      "/ollo/liquidity/v1beta1/pools/pool_coin_denom/{pool_coin_denom}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description : "It returns the liquidity pool corresponding to the "
                  "pool_coin_denom.";
external_docs : {
url:
  "https://ollo/blob/develop/doc/client.md";
description:
  "Find out more about the query and error codes";
}
responses : {
key:
  "500" value : {
  description:
    "Internal Server Error" examples : {
    key:
      "application/json"
      value : '{"code":2,"message":"rpc error: code = NotFound desc = the liquidity pool corresponding to the pool_coin_denom doesn\'t exist: key not found","details":[]}'
    }
  }
}
responses : {
key:
  "404" value : {
  description:
    "Not Found" examples : {
    key:
      "application/json"
      value : '{"code":5,"message":"rpc error: code = NotFound desc = liquidity pool with pool coin denom xx doesn\'t exist: key not found","details":[]}'
    }
  }
}
};
}

// Get specific liquidity pool corresponding to the reserve account.
rpc LiquidityPoolByReserveAcc(QueryLiquidityPoolByReserveAccRequest)
    returns (QueryLiquidityPoolResponse) {
  option (google.api.http).get =
      "/ollo/liquidity/v1beta1/pools/reserve_acc/{reserve_acc}";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description : "It returns the liquidity pool corresponding to the reserve "
                  "account.";
external_docs : {
url:
  "https://ollo/blob/develop/doc/client.md";
description:
  "Find out more about the query and error codes";
}
responses : {
key:
  "500" value : {
  description:
    "Internal Server Error" examples : {
    key:
      "application/json"
      value : '{"code":2,"message":"rpc error: code = NotFound desc = the liquidity pool corresponding to the reserve account doesn\'t exist: key not found","details":[]}'
    }
  }
}
responses : {
key:
  "404" value : {
  description:
    "Not Found" examples : {
    key:
      "application/json"
      value : '{"code":5,"message":"rpc error: code = NotFound desc = the reserve account address xx is not valid: key not found","details":[]}'
    }
  }
}
};
}
// Pairs returns all liquidity pairs.
rpc Pairs(QueryPairsRequest) returns (QueryPairsResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/pairs";
}

// Pair returns the specific pair.
rpc Pair(QueryPairRequest) returns (QueryPairResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/pairs/{pair_id}";
}

// DepositRequests returns all deposit requests.
rpc DepositRequests(QueryDepositRequestsRequest)
    returns (QueryDepositRequestsResponse) {
  option (google.api.http).get =
      "/ollo/liquidity/v1beta1/pools/{pool_id}/deposits";
}

// DepositRequest returns the specific deposit request.
rpc DepositRequest(QueryDepositRequestRequest)
    returns (QueryDepositRequestResponse) {
  option (google.api.http).get =
      "/ollo/liquidity/v1beta1/pools/{pool_id}/deposits/{id}";
}

// WithdrawRequests returns all withdraw requests.
rpc WithdrawRequests(QueryWithdrawRequestsRequest)
    returns (QueryWithdrawRequestsResponse) {
  option (google.api.http).get =
      "/ollo/liquidity/v1beta1/pools/{pool_id}/withdraws";
}

// WithdrawRequest returns the specific withdraw request.
rpc WithdrawRequest(QueryWithdrawRequestRequest)
    returns (QueryWithdrawRequestResponse) {
  option (google.api.http).get =
      "/ollo/liquidity/v1beta1/pools/{pool_id}/withdraws/{id}";
}

// Orders returns all orders within the pair.
rpc Orders(QueryOrdersRequest) returns (QueryOrdersResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/pairs/{pair_id}/orders";
}

// Order returns the specific order.
rpc Order(QueryOrderRequest) returns (QueryOrderResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/pairs/{pair_id}/orders/{id}";
}

// OrdersByOrderer returns orders made by an orderer.
rpc OrdersByOrderer(QueryOrdersByOrdererRequest) returns (QueryOrdersResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/orders/{orderer}";
}

rpc OrderBooks(QueryOrderBooksRequest) returns (QueryOrderBooksResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/order_books";
}
// Get all parameters of the liquidity module.
rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
  option (google.api.http).get = "/ollo/liquidity/v1beta1/params";
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description : "Returns all parameters of the liquidity module.";
external_docs : {
url:
  "https://ollo/blob/develop/x/liquidity/v1beta1/spec/08_params.md";
description:
  "Find out more about the params";
}
};
}
}

// the request type for the QueryLiquidityPool RPC method. requestable specified
// pool_id.
message QueryLiquidityPoolRequest { uint64 pool_id = 1; }

// the response type for the QueryLiquidityPoolResponse RPC method. Returns the
// liquidity pool that corresponds to the requested pool_id.
message QueryLiquidityPoolResponse {
  PoolResponse pool = 1 [ (gogoproto.nullable) = false ];
}

// the request type for the QueryLiquidityByPoolCoinDenomPool RPC method.
// Requestable specified pool_coin_denom.
message QueryLiquidityPoolByPoolCoinDenomRequest { string pool_coin_denom = 1; }

// the request type for the QueryLiquidityByReserveAcc RPC method. Requestable
// specified reserve_acc.
message QueryLiquidityPoolByReserveAccRequest { string reserve_acc = 1; }

// the request type for the QueryLiquidityPools RPC method. Requestable
// including pagination offset, limit, key.
message QueryLiquidityPoolsRequest {
  // pagination defines an optional pagination for the request.
  uint64 pair_id = 1;

  string inactive = 2;

  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// the response type for the QueryLiquidityPoolsResponse RPC method. This
// includes a list of all existing liquidity pools and paging results that
// contain next_key and total count.
message QueryLiquidityPoolsResponse {
  repeated PoolResponse pools = 1 [ (gogoproto.nullable) = false ];
  // pagination defines the pagination in the response. not working on this
  // version.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is request type for the QueryParams RPC method.
message QueryParamsRequest {}

// the response type for the QueryParamsResponse RPC method. This includes
// current parameter of the liquidity module.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryPairsRequest is request type for the Query/Pairs RPC method.
message QueryPairsRequest {
  repeated string denoms = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryPairsResponse is response type for the Query/Pairs RPC method.
message QueryPairsResponse {
  repeated Pair pairs = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPairRequest is request type for the Query/Pair RPC method.
message QueryPairRequest { uint64 pair_id = 1; }

// QueryPairResponse is response type for the Query/Pair RPC method.
message QueryPairResponse { Pair pair = 1 [ (gogoproto.nullable) = false ]; }

// QueryDepositRequestsRequest is request type for the Query/DepositRequests RPC
// method.
message QueryDepositRequestsRequest {
  uint64 pool_id = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDepositRequestsResponse is response type for the Query/DepositRequests
// RPC method.
message QueryDepositRequestsResponse {
  repeated RequestDeposit deposit_requests = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDepositRequestRequest is request type for the Query/DepositRequest RPC
// method.
message QueryDepositRequestRequest {
  uint64 pool_id = 1;
  uint64 id = 2;
}

// QueryDepositRequestResponse is response type for the Query/DepositRequest RPC
// method.
message QueryDepositRequestResponse {
  RequestDeposit deposit_request = 1 [ (gogoproto.nullable) = false ];
}

// QueryWithdrawRequestsRequest is request type for the Query/WithdrawRequests
// RPC method.
message QueryWithdrawRequestsRequest {
  uint64 pool_id = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryWithdrawRequestsResponse is response type for the Query/WithdrawRequests
// RPC method.
message QueryWithdrawRequestsResponse {
  repeated RequestWithdraw withdraw_requests = 1
      [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryWithdrawRequestRequest is request type for the Query/WithdrawRequest RPC
// method.
message QueryWithdrawRequestRequest {
  uint64 pool_id = 1;
  uint64 id = 2;
}

// QueryWithdrawRequestResponse is response type for the Query/WithdrawRequest
// RPC method.
message QueryWithdrawRequestResponse {
  RequestWithdraw withdraw_request = 1 [ (gogoproto.nullable) = false ];
}

// QueryOrdersRequest is request type for the Query/Orders RPC method.
message QueryOrdersRequest {
  uint64 pair_id = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOrdersResponse is response type for the Query/Orders RPC method.
message QueryOrdersResponse {
  repeated Order orders = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOrderRequest is request type for the Query/Order RPC method.
message QueryOrderRequest {
  uint64 pair_id = 1;
  uint64 id = 2;
}

// QueryOrderResponse is response type for the Query/Order RPC method.
message QueryOrderResponse { Order order = 1 [ (gogoproto.nullable) = false ]; }

// QueryOrdersByOrdererRequest is request type for the Query/OrdersByOrderer RPC
// method.
message QueryOrdersByOrdererRequest {
  string orderer = 1;
  uint64 pair_id = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryOrderBooksRequest is request type for the Query/OrderBooks RPC method.
message QueryOrderBooksRequest {
  repeated uint64 pair_ids = 1;
  repeated uint32 price_unit_powers = 2;
  uint32 num_ticks = 3;
}

// QueryOrderBooksResponse is response type for Query/OrderBooks RPC method.
message QueryOrderBooksResponse {
  repeated OrderBookPairResponse pairs = 2 [ (gogoproto.nullable) = false ];
}

//
// Custom response messages
//

// PoolResponse defines a custom pool response message.
message PoolResponse {
  uint64 id = 1;

  uint64 type_id = 2;

  uint64 pair_id = 3;

  string creator = 4;

  string reserve_address = 5;

  string pool_coin_denom = 6;

  string pool_coin_supply = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  string min_price = 8
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];

  string max_price = 9
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];

  string price = 10
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];

  PoolBalances balances = 11 [ (gogoproto.nullable) = false ];

  uint64 prev_deposit_request_id = 12;

  uint64 prev_withdraw_request_id = 13;

  bool inactive = 14;
}

message PoolBalances {
  cosmos.base.v1beta1.Coin base_coin = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.v1beta1.Coin quote_coin = 2 [ (gogoproto.nullable) = false ];
}

message OrderBookPairResponse {
  uint64 pair_id = 1;
  string base_price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  repeated OrderBookResponse order_books = 3 [ (gogoproto.nullable) = false ];
}

message OrderBookResponse {
  string price_unit = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  repeated OrderBookTickResponse sells = 2 [ (gogoproto.nullable) = false ];
  repeated OrderBookTickResponse buys = 3 [ (gogoproto.nullable) = false ];
}

message OrderBookTickResponse {
  string price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string user_order_amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string pool_order_amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
