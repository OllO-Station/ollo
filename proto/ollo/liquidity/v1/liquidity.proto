syntax = "proto3";
package ollo.liquidity.v1;

import "ollo/liquidity/v1/tx.proto";
import "ollo/liquidity/v1/pair.proto";
import "ollo/liquidity/v1/pool.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "ollo/x/liquidity/types";
option (gogoproto.goproto_getters_all) = false;


// DepositMsgState defines the state of deposit message that contains state
// information as it is processed in the next batch or batches.
message DepositMsgState {

  // height where this message is appended to the batch
  int64 msg_height = 1 [ (gogoproto.moretags) = "yaml:\"msg_height\"" ];

  // index of this deposit message in this liquidity pool
  uint64 msg_index = 2 [ (gogoproto.moretags) = "yaml:\"msg_index\"" ];

  // true if executed on this batch, false if not executed
  bool executed = 3 [ (gogoproto.moretags) = "yaml:\"executed\"" ];

  // true if executed successfully on this batch, false if failed
  bool succeeded = 4 [ (gogoproto.moretags) = "yaml:\"succeeded\"" ];

  // true if ready to be deleted on kvstore, false if not ready to be deleted
  bool to_be_deleted = 5 [ (gogoproto.moretags) = "yaml:\"to_be_deleted\"" ];

  // MsgDepositWithinBatch
  MsgDepositWithinBatch msg = 6 [ (gogoproto.moretags) = "yaml:\"msg\"" ];
}

// WithdrawMsgState defines the state of the withdraw message that contains
// state information as the message is processed in the next batch or batches.
message WithdrawMsgState {

  // height where this message is appended to the batch
  int64 msg_height = 1 [ (gogoproto.moretags) = "yaml:\"msg_height\"" ];

  // index of this withdraw message in this liquidity pool
  uint64 msg_index = 2 [ (gogoproto.moretags) = "yaml:\"msg_index\"" ];

  // true if executed on this batch, false if not executed
  bool executed = 3 [ (gogoproto.moretags) = "yaml:\"executed\"" ];

  // true if executed successfully on this batch, false if failed
  bool succeeded = 4 [ (gogoproto.moretags) = "yaml:\"succeeded\"" ];

  // true if ready to be deleted on kvstore, false if not ready to be deleted
  bool to_be_deleted = 5 [ (gogoproto.moretags) = "yaml:\"to_be_deleted\"" ];

  // MsgWithdrawWithinBatch
  MsgWithdrawWithinBatch msg = 6 [ (gogoproto.moretags) = "yaml:\"msg\"" ];
}

// SwapMsgState defines the state of the swap message that contains state
// information as the message is processed in the next batch or batches.
message SwapMsgState {

  // height where this message is appended to the batch
  int64 msg_height = 1 [ (gogoproto.moretags) = "yaml:\"msg_height\"" ];

  // index of this swap message in this liquidity pool
  uint64 msg_index = 2 [ (gogoproto.moretags) = "yaml:\"msg_index\"" ];

  // true if executed on this batch, false if not executed
  bool executed = 3 [ (gogoproto.moretags) = "yaml:\"executed\"" ];

  // true if executed successfully on this batch, false if failed
  bool succeeded = 4 [ (gogoproto.moretags) = "yaml:\"succeeded\"" ];

  // true if ready to be deleted on kvstore, false if not ready to be deleted
  bool to_be_deleted = 5 [ (gogoproto.moretags) = "yaml:\"to_be_deleted\"" ];

  // swap orders are cancelled when current height is equal to or higher than
  // ExpiryHeight
  int64 order_expiry_height = 6
      [ (gogoproto.moretags) = "yaml:\"order_expiry_height\"" ];

  // offer coin exchanged until now
  cosmos.base.v1beta1.Coin exchanged_offer_coin = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"exchanged_offer_coin\""
  ];

  // offer coin currently remaining to be exchanged
  cosmos.base.v1beta1.Coin remaining_offer_coin = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"remaining_offer_coin\""
  ];

  // reserve fee for pays fee in half offer coin
  cosmos.base.v1beta1.Coin reserved_offer_coin_fee = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"reserved_offer_coin_fee\""

  ];

  // MsgSwapWithinBatch
  MsgSwapWithinBatch msg = 10 [ (gogoproto.moretags) = "yaml:\"msg\"" ];
}

// OrderType specifies the type of order
enum OrderType {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORDER_TYPE_UNSPECIFIED defines an unknown order type
  ORDER_TYPE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderTypeUnspecified"];
  // ORDER_TYPE_MARKET defines a market order type
  ORDER_TYPE_MARKET = 1 [(gogoproto.enumvalue_customname) = "OrderTypeMarket"];
  // ORDER_TYPE_LIMIT defines a limit order type
  ORDER_TYPE_LIMIT = 2 [(gogoproto.enumvalue_customname) = "OrderTypeLimit"];
  // ORDER_TYPE_MM defines a market maker order type
  ORDER_TYPE_MM = 3 [(gogoproto.enumvalue_customname) = "OrderTypeMM"];
}

// OrderSide specifies the side of order
enum OrderSide {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORDER_SIDE_UNSPECIFIED defines an unknown order side
  ORDER_SIDE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderSideUnspecified"];
  // ORDER_SIDE_BUY defines a buy order side
  ORDER_SIDE_BUY = 1 [(gogoproto.enumvalue_customname) = "OrderSideBuy"];
  // ORDER_SIDE_SELL defines a sell order side
  ORDER_SIDE_SELL = 2 [(gogoproto.enumvalue_customname) = "OrderSideSell"];
}

enum OrderStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // ORDER_STATUS_UNSPECIFIED defines an unknown order status
  ORDER_STATUS_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OrderStatusUnspecified"];
  // ORDER_STATUS_OPEN defines an open order status
  ORDER_STATUS_OPEN = 1 [(gogoproto.enumvalue_customname) = "OrderStatusOpen"];
  // ORDER_STATUS_CLOSED defines a closed order status
  ORDER_STATUS_CLOSED = 2 [(gogoproto.enumvalue_customname) = "OrderStatusClosed"];


  // ORDER_STATUS_CANCELLED defines a cancelled order status
  ORDER_STATUS_CANCELLED = 3 [(gogoproto.enumvalue_customname) = "OrderStatusCancelled"];

  // ORDER_STATUS_EXPIRED defines an expired order status
  ORDER_STATUS_EXPIRED = 4 [(gogoproto.enumvalue_customname) = "OrderStatusExpired"];

  // ORDER_STATUS_REJECTED defines a rejected order status
  ORDER_STATUS_REJECTED = 5 [(gogoproto.enumvalue_customname) = "OrderStatusRejected"];

}
