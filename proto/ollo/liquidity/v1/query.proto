syntax = "proto3";
package ollo.liquidity.v1;

// import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "ollo/liquidity/v1/liquidity.proto";
import "ollo/liquidity/v1/params.proto";
import "google/api/annotations.proto";
import "cosmos_proto/pagination.proto";
import "cosmos_proto/coin.proto";

option go_package = "ollo/x/liquidity/types";

// Query defines the gRPC query service for the liquidity module.
service Query {
  // "Returns a list of all liquidity pools with pagination
  rpc LiquidityPools(QueryLiquidityPoolsRequest) 
    returns (QueryLiquidityPoolsResponse) 
  {
    option (google.api.http).get = "/ollo/liquidity/v1/pools";
  }

  // Returns the liquidity pool that corresponds to the pool_id."
  rpc LiquidityPool(QueryLiquidityPoolRequest) 
    returns (QueryLiquidityPoolResponse) 
  {
    option (google.api.http).get = 
      "/ollo/liquidity/v1/pools/{pool_id}";
  }

  // Get specific liquidity pool corresponding to the pool_coin_denom.
  rpc LiquidityPoolByPoolCoinDenom(QueryLiquidityPoolByPoolCoinDenomRequest) 
    returns (QueryLiquidityPoolResponse) 
  {
    option (google.api.http).get = 
      "/ollo/liquidity/v1/pools/denom/{pool_coin_denom}";
  }

  // Get specific liquidity pool corresponding to the reserve account.
  rpc LiquidityPoolByReserveAcc(QueryLiquidityPoolByReserveAccRequest) 
    returns (QueryLiquidityPoolResponse) 
  {
    option (google.api.http).get = 
      "/ollo/liquidity/v1/pools/reserve/{reserve_acc}";
  }
  // Pairs returns all liquidity pairs.
  rpc Pairs(QueryPairsRequest) returns (QueryPairsResponse) {
    option (google.api.http).get = "/ollo/liquidity/v1/pairs";
  }

  // Pair returns the specific pair.
  rpc Pair(QueryPairRequest) returns (QueryPairResponse) {
    option (google.api.http).get = "/ollo/liquidity/v1/pairs/{pair_id}";
  }

  // DepositRequests returns all deposit requests.
  rpc DepositRequests(QueryDepositRequestsRequest) 
    returns (QueryDepositRequestsResponse) {
    option (google.api.http).get =
        "/ollo/liquidity/v1/pools/{pool_id}/deposit_requests";
  }

  // DepositRequest returns the specific deposit request.
  rpc DepositRequest(QueryDepositRequestRequest) 
    returns (QueryDepositRequestResponse) {
    option (google.api.http).get =
        "/ollo/liquidity/v1/pools/{pool_id}/deposit_requests/{id}";
  }

  // WithdrawRequests returns all withdraw requests.
  rpc WithdrawRequests(QueryWithdrawRequestsRequest) 
    returns (QueryWithdrawRequestsResponse) {
    option (google.api.http).get =
        "/ollo/liquidity/v1/pools/{pool_id}/withdraw_requests";
  }

  // WithdrawRequest returns the specific withdraw request.
  rpc WithdrawRequest(QueryWithdrawRequestRequest) 
    returns (QueryWithdrawRequestResponse) {
    option (google.api.http).get =
        "/ollo/liquidity/v1/pools/{pool_id}/withdraw_requests/{id}";
  }

  // Orders returns all orders within the pair.
  rpc Orders(QueryOrdersRequest) returns (QueryOrdersResponse) {
    option (google.api.http).get = "/ollo/liquidity/v1/pairs/{pair_id}/orders";
  }

  // Order returns the specific order.
  rpc Order(QueryOrderRequest) 
    returns (QueryOrderResponse) {
    option (google.api.http).get = 
      "/ollo/liquidity/v1/pairs/{pair_id}/orders/{id}";
  }

  // OrdersByOrderer returns orders made by an orderer.
  rpc OrdersByOrderer(QueryOrdersByOrdererRequest)
    returns (QueryOrdersResponse) {
    option (google.api.http).get = "/ollo/liquidity/orders/{orderer}";
  }

  // Get all order books of the liquidity module.
  rpc OrderBooks(QueryOrderBooksRequest)
    returns (QueryOrderBooksResponse) {
    option (google.api.http).get = "/ollo/liquidity/orderbooks";
  }
  // Get all parameters of the liquidity module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ollo/liquidity/v1/params";
  }
}

// the request type for the QueryLiquidityPool RPC method. requestable specified
// pool_id.
message QueryLiquidityPoolRequest { 
  uint64 pool_id = 1; 
}

// the response type for the QueryLiquidityPoolResponse RPC method. Returns the
// liquidity pool that corresponds to the requested pool_id.
message QueryLiquidityPoolResponse {
  PoolResponse pool = 1 [ (gogoproto.nullable) = false ];
}

// the request type for the QueryLiquidityByPoolCoinDenomPool RPC method.
// Requestable specified pool_coin_denom.
message QueryLiquidityPoolByPoolCoinDenomRequest { 
  string pool_coin_denom = 1; 
}

// the request type for the QueryLiquidityByReserveAcc RPC method. Requestable
// specified reserve_acc.
message QueryLiquidityPoolByReserveAccRequest { 
  string reserve_acc = 1; 
}

// the request type for the QueryLiquidityPools RPC method. Requestable
// including pagination offset, limit, key.
message QueryLiquidityPoolsRequest {
  // pagination defines an optional pagination for the request.
  uint64 pair_id = 1;

  string inactive = 2;

  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// the response type for the QueryLiquidityPoolsResponse RPC method. This
// includes a list of all existing liquidity pools and paging results that
// contain next_key and total count.
message QueryLiquidityPoolsResponse {
  repeated PoolResponse pools = 1 [ (gogoproto.nullable) = false ];
  // pagination defines the pagination in the response. not working on this
  // version.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is request type for the QueryParams RPC method.
message QueryParamsRequest {

}

// the response type for the QueryParamsResponse RPC method. This includes
// current parameter of the liquidity module.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  ollo.liquidity.v1.Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryPairsRequest is request type for the Query/v1/pairs RPC method.
message QueryPairsRequest {
  repeated string denoms = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryPairsResponse is response type for the Query/v1/pairs RPC method.
message QueryPairsResponse {
  repeated ollo.liquidity.v1.Pair pairs = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryPairRequest is request type for the Query/v1/pair RPC method.
message QueryPairRequest { 
  uint64 pair_id = 1; 
}

// QueryPairResponse is response type for the Query/v1/pair RPC method.
message QueryPairResponse { 
  ollo.liquidity.v1.Pair pair = 1 [ (gogoproto.nullable) = false ]; 
}

// QueryDepositRequestsRequest is request type for the Query/DepositRequests RPC
// method.
message QueryDepositRequestsRequest {
  uint64 pool_id = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDepositRequestsResponse is response type for the Query/DepositRequests
// RPC method.
message QueryDepositRequestsResponse {
  repeated ollo.liquidity.v1.RequestDeposit deposit_requests = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDepositRequestRequest is request type for the Query/DepositRequest RPC
// method.
message QueryDepositRequestRequest {
  uint64 pool_id = 1;
  uint64 id = 2;
}

// QueryDepositRequestResponse is response type for the Query/DepositRequest RPC
// method.
message QueryDepositRequestResponse {
  ollo.liquidity.v1.RequestDeposit deposit_request = 1 [ (gogoproto.nullable) = false ];
}

// QueryWithdrawRequestsRequest is request type for the Query/WithdrawRequests
// RPC method.
message QueryWithdrawRequestsRequest {
  uint64 pool_id = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryWithdrawRequestsResponse is response type for the Query/WithdrawRequests
// RPC method.
message QueryWithdrawRequestsResponse {
  repeated RequestWithdraw withdraw_requests = 1
      [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryWithdrawRequestRequest is request type for the Query/WithdrawRequest RPC
// method.
message QueryWithdrawRequestRequest {
  uint64 pool_id = 1;
  uint64 id = 2;
}

// QueryWithdrawRequestResponse is response type for the Query/WithdrawRequest
// RPC method.
message QueryWithdrawRequestResponse {
  ollo.liquidity.v1.RequestWithdraw withdraw_request = 1 [ (gogoproto.nullable) = false ];
}

// QueryOrdersRequest is request type for the Query/Orders RPC method.
message QueryOrdersRequest {
  uint64 pair_id = 1;

  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryOrdersResponse is response type for the Query/Orders RPC method.
message QueryOrdersResponse {
  repeated ollo.liquidity.v1.Order orders = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOrderRequest is request type for the Query/Order RPC method.
message QueryOrderRequest {
  uint64 pair_id = 1;
  uint64 id = 2;
}

// QueryOrderResponse is response type for the Query/Order RPC method.
message QueryOrderResponse { Order order = 1 [ (gogoproto.nullable) = false ]; }

// QueryOrdersByOrdererRequest is request type for the Query/OrdersByOrderer RPC
// method.
message QueryOrdersByOrdererRequest {
  string orderer = 1;
  uint64 pair_id = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryOrderBooksRequest is request type for the Query/OrderBooks RPC method.
message QueryOrderBooksRequest {
  repeated uint64 pair_ids = 1;
  repeated uint32 price_unit_powers = 2;
  uint32 num_ticks = 3;
}

// QueryOrderBooksResponse is response type for Query/OrderBooks RPC method.
message QueryOrderBooksResponse {
  repeated OrderBookPairResponse pairs = 2 [ (gogoproto.nullable) = false ];
}

//
// Custom response messages
//

// PoolResponse defines a custom pool response message.
message PoolResponse {
  uint64 id = 1;

  uint64 type_id = 2;

  uint64 pair_id = 3;

  string creator = 4;

  string reserve_address = 5;

  string pool_coin_denom = 6;

  string pool_coin_supply = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];

  string min_price = 8
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];

  string max_price = 9
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];

  string price = 10
      [ (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec" ];

  PoolBalances balances = 11 [ (gogoproto.nullable) = false ];

  uint64 prev_deposit_request_id = 12;

  uint64 prev_withdraw_request_id = 13;

  bool inactive = 14;
}

message PoolBalances {
  cosmos.base.v1beta1.Coin base_coin = 1 [ (gogoproto.nullable) = false ];

  cosmos.base.v1beta1.Coin quote_coin = 2 [ (gogoproto.nullable) = false ];
}

message OrderBookPairResponse {
  uint64 pair_id = 1;
  string base_price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  repeated OrderBookResponse order_books = 3 [ (gogoproto.nullable) = false ];
}

message OrderBookResponse {
  string price_unit = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  repeated OrderBookTickResponse sells = 2 [ (gogoproto.nullable) = false ];
  repeated OrderBookTickResponse buys = 3 [ (gogoproto.nullable) = false ];
}

message OrderBookTickResponse {
  string price = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string user_order_amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string pool_order_amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
