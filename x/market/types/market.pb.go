// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/market/v1/market.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NftAuctionStatus int32

const (
	//
	NftAuctionStatusUnspecified NftAuctionStatus = 0
	//
	NftAuctionStatusInactive NftAuctionStatus = 1
	//
	NftAuctionStatusActive NftAuctionStatus = 2
)

var NftAuctionStatus_name = map[int32]string{
	0: "NFT_AUCTION_STATUS_UNSPECIFIED",
	1: "NFT_AUCTION_STATUS_INACTIVE",
	2: "NFT_AUCTION_STATUS_ACTIVE",
}

var NftAuctionStatus_value = map[string]int32{
	"NFT_AUCTION_STATUS_UNSPECIFIED": 0,
	"NFT_AUCTION_STATUS_INACTIVE":    1,
	"NFT_AUCTION_STATUS_ACTIVE":      2,
}

func (x NftAuctionStatus) String() string {
	return proto.EnumName(NftAuctionStatus_name, int32(x))
}

func (NftAuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9c435a7710a172e, []int{0}
}

type NftAuctionBid struct {
	AuctionId uint64     `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	Bidder    string     `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount" yaml:"price"`
	Time      time.Time  `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time" yaml:"time"`
}

func (m *NftAuctionBid) Reset()         { *m = NftAuctionBid{} }
func (m *NftAuctionBid) String() string { return proto.CompactTextString(m) }
func (*NftAuctionBid) ProtoMessage()    {}
func (*NftAuctionBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c435a7710a172e, []int{0}
}
func (m *NftAuctionBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftAuctionBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftAuctionBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftAuctionBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftAuctionBid.Merge(m, src)
}
func (m *NftAuctionBid) XXX_Size() int {
	return m.Size()
}
func (m *NftAuctionBid) XXX_DiscardUnknown() {
	xxx_messageInfo_NftAuctionBid.DiscardUnknown(m)
}

var xxx_messageInfo_NftAuctionBid proto.InternalMessageInfo

type NftAuction struct {
	Id                  uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	NftId               string                                 `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty" yaml:"nft_id"`
	DenomId             string                                 `protobuf:"bytes,3,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
	Owner               string                                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	StartPrice          types.Coin                             `protobuf:"bytes,5,opt,name=start_price,json=startPrice,proto3" json:"start_price" yaml:"start_price"`
	StartTime           time.Time                              `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime             time.Time                              `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	IncrementPercentage github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=increment_percentage,json=incrementPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"increment_percentage" yaml:"increment_percentage"`
}

func (m *NftAuction) Reset()         { *m = NftAuction{} }
func (m *NftAuction) String() string { return proto.CompactTextString(m) }
func (*NftAuction) ProtoMessage()    {}
func (*NftAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c435a7710a172e, []int{1}
}
func (m *NftAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftAuction.Merge(m, src)
}
func (m *NftAuction) XXX_Size() int {
	return m.Size()
}
func (m *NftAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_NftAuction.DiscardUnknown(m)
}

var xxx_messageInfo_NftAuction proto.InternalMessageInfo

type NftListing struct {
	Id      string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	NftId   string     `protobuf:"bytes,2,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty" yaml:"nft_id"`
	DenomId string     `protobuf:"bytes,3,opt,name=denom_id,json=denomId,proto3" json:"denom_id,omitempty" yaml:"denom_id"`
	Creator string     `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	Price   types.Coin `protobuf:"bytes,5,opt,name=price,proto3" json:"price" yaml:"price"`
}

func (m *NftListing) Reset()         { *m = NftListing{} }
func (m *NftListing) String() string { return proto.CompactTextString(m) }
func (*NftListing) ProtoMessage()    {}
func (*NftListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c435a7710a172e, []int{2}
}
func (m *NftListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftListing.Merge(m, src)
}
func (m *NftListing) XXX_Size() int {
	return m.Size()
}
func (m *NftListing) XXX_DiscardUnknown() {
	xxx_messageInfo_NftListing.DiscardUnknown(m)
}

var xxx_messageInfo_NftListing proto.InternalMessageInfo

type NftMarket struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *NftMarket) Reset()         { *m = NftMarket{} }
func (m *NftMarket) String() string { return proto.CompactTextString(m) }
func (*NftMarket) ProtoMessage()    {}
func (*NftMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9c435a7710a172e, []int{3}
}
func (m *NftMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftMarket.Merge(m, src)
}
func (m *NftMarket) XXX_Size() int {
	return m.Size()
}
func (m *NftMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_NftMarket.DiscardUnknown(m)
}

var xxx_messageInfo_NftMarket proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ollo.market.v1.NftAuctionStatus", NftAuctionStatus_name, NftAuctionStatus_value)
	proto.RegisterType((*NftAuctionBid)(nil), "ollo.market.v1.NftAuctionBid")
	proto.RegisterType((*NftAuction)(nil), "ollo.market.v1.NftAuction")
	proto.RegisterType((*NftListing)(nil), "ollo.market.v1.NftListing")
	proto.RegisterType((*NftMarket)(nil), "ollo.market.v1.NftMarket")
}

func init() { proto.RegisterFile("ollo/market/v1/market.proto", fileDescriptor_d9c435a7710a172e) }

var fileDescriptor_d9c435a7710a172e = []byte{
	// 826 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcf, 0x6e, 0xe3, 0x44,
	0x1c, 0xc7, 0xed, 0x6c, 0x9a, 0x36, 0x53, 0x5a, 0xda, 0xd9, 0x02, 0xa9, 0xc3, 0xda, 0x91, 0x0f,
	0x28, 0x2c, 0xaa, 0xad, 0x02, 0x17, 0x90, 0x40, 0x4a, 0xd2, 0xee, 0xca, 0x12, 0x1b, 0x2a, 0x27,
	0x59, 0x21, 0x2e, 0x96, 0x63, 0x4f, 0xcc, 0x68, 0xeb, 0x99, 0xc8, 0x9e, 0x14, 0xf6, 0xc6, 0x11,
	0xf5, 0xb4, 0xe2, 0x88, 0xd4, 0x13, 0x17, 0x1e, 0x80, 0x87, 0xe8, 0x09, 0x55, 0x5c, 0x40, 0x1c,
	0xcc, 0xb6, 0x7d, 0x83, 0x3c, 0x01, 0xf2, 0xcc, 0x78, 0x1d, 0x45, 0x59, 0x95, 0xd3, 0x9e, 0x32,
	0xbf, 0x3f, 0xdf, 0xef, 0x78, 0x3e, 0xf9, 0xcd, 0x80, 0x26, 0x3d, 0x3d, 0xa5, 0x76, 0xec, 0x27,
	0xcf, 0x10, 0xb3, 0xcf, 0x0e, 0xe5, 0xca, 0x9a, 0x26, 0x94, 0x51, 0xb8, 0x9d, 0x17, 0x2d, 0x99,
	0x3a, 0x3b, 0xd4, 0xf6, 0x22, 0x1a, 0x51, 0x5e, 0xb2, 0xf3, 0x95, 0xe8, 0xd2, 0xf6, 0x03, 0x9a,
	0xc6, 0x34, 0xf5, 0x44, 0x41, 0x04, 0xb2, 0x64, 0x44, 0x94, 0x46, 0xa7, 0xc8, 0xe6, 0xd1, 0x78,
	0x36, 0xb1, 0x19, 0x8e, 0x51, 0xca, 0xfc, 0x78, 0x2a, 0x1b, 0x96, 0xb7, 0x9f, 0xfa, 0x89, 0x1f,
	0x17, 0x6a, 0x5d, 0x78, 0xd9, 0x63, 0x3f, 0x45, 0xf6, 0xd9, 0xe1, 0x18, 0x31, 0xff, 0xd0, 0x0e,
	0x28, 0x26, 0xa2, 0x6e, 0xfe, 0x52, 0x01, 0x5b, 0xfd, 0x09, 0xeb, 0xcc, 0x02, 0x86, 0x29, 0xe9,
	0xe2, 0x10, 0x7e, 0x0a, 0x80, 0x2f, 0x22, 0x0f, 0x87, 0x0d, 0xb5, 0xa5, 0xb6, 0xab, 0xdd, 0x77,
	0xe6, 0x99, 0xb1, 0xfb, 0xdc, 0x8f, 0x4f, 0x3f, 0x37, 0xcb, 0x9a, 0xe9, 0xd6, 0x65, 0xe0, 0x84,
	0xb0, 0x03, 0x6a, 0x63, 0x1c, 0x86, 0x28, 0x69, 0x54, 0x5a, 0x6a, 0xbb, 0xde, 0xfd, 0x70, 0x9e,
	0x19, 0x5b, 0x42, 0x21, 0xf2, 0xe6, 0x9f, 0xbf, 0x1f, 0xec, 0xc9, 0x83, 0x75, 0xc2, 0x30, 0x41,
	0x69, 0x3a, 0x60, 0x09, 0x26, 0x91, 0x2b, 0x85, 0xf0, 0x31, 0xa8, 0xf9, 0x31, 0x9d, 0x11, 0xd6,
	0xb8, 0xd7, 0x52, 0xdb, 0x9b, 0x1f, 0xef, 0x5b, 0xb2, 0x3d, 0xff, 0x76, 0x4b, 0x7e, 0xbb, 0xd5,
	0xa3, 0x98, 0x74, 0xf7, 0x2e, 0x33, 0x43, 0x99, 0x67, 0xc6, 0x5b, 0x62, 0x87, 0x69, 0x82, 0x03,
	0x64, 0xba, 0x52, 0x0e, 0x1f, 0x83, 0x6a, 0xce, 0xa8, 0x51, 0xe5, 0x36, 0x9a, 0x25, 0x00, 0x5a,
	0x05, 0x40, 0x6b, 0x58, 0x00, 0xec, 0xbe, 0x27, 0x7d, 0x36, 0x85, 0x4f, 0xae, 0x32, 0x5f, 0xfc,
	0x6b, 0xa8, 0x2e, 0x37, 0x30, 0xff, 0xa8, 0x02, 0x50, 0xc2, 0x81, 0x0f, 0x40, 0xe5, 0x15, 0x91,
	0xad, 0x79, 0x66, 0xd4, 0x85, 0x2a, 0x27, 0x51, 0xc1, 0x21, 0x6c, 0x83, 0x1a, 0x99, 0xb0, 0x1c,
	0x9a, 0x40, 0xb0, 0x5b, 0x22, 0x10, 0x79, 0xd3, 0x5d, 0x23, 0x13, 0xe6, 0x84, 0xd0, 0x02, 0x1b,
	0x21, 0x22, 0x34, 0xce, 0x7b, 0xef, 0xf1, 0xde, 0xfb, 0xf3, 0xcc, 0x78, 0x5b, 0xf4, 0x16, 0x15,
	0xd3, 0x5d, 0xe7, 0x4b, 0x27, 0x84, 0x5f, 0x82, 0x35, 0xfa, 0x3d, 0x41, 0x09, 0x3f, 0x51, 0xbd,
	0xdb, 0x2e, 0x4f, 0xce, 0xd3, 0xaf, 0x47, 0x2b, 0x64, 0xf0, 0x29, 0xd8, 0x4c, 0x99, 0x9f, 0x30,
	0x8f, 0x83, 0x6a, 0xac, 0xdd, 0x85, 0x57, 0x93, 0x58, 0xa0, 0xd8, 0x64, 0x41, 0x6b, 0xba, 0x80,
	0x47, 0x27, 0x79, 0x00, 0xbf, 0x01, 0x22, 0xf2, 0x38, 0xee, 0xda, 0x9d, 0xb8, 0x1f, 0x48, 0xdf,
	0xdd, 0x45, 0xdf, 0x12, 0x7a, 0x9d, 0x27, 0xf2, 0x76, 0xe8, 0x82, 0x0d, 0x44, 0x42, 0xe1, 0xbb,
	0x7e, 0xa7, 0x6f, 0x53, 0xfa, 0x4a, 0x82, 0x85, 0x52, 0xb8, 0xae, 0x23, 0x12, 0x72, 0xcf, 0x1f,
	0x55, 0xb0, 0x87, 0x49, 0x90, 0xa0, 0x18, 0x11, 0xe6, 0x4d, 0x51, 0x12, 0x20, 0xc2, 0xfc, 0x08,
	0x35, 0x36, 0x38, 0xd5, 0x27, 0xb9, 0xc9, 0x3f, 0x99, 0xf1, 0x41, 0x84, 0xd9, 0x77, 0xb3, 0xb1,
	0x15, 0xd0, 0x58, 0x5e, 0x44, 0xf9, 0x73, 0x90, 0x86, 0xcf, 0x6c, 0xf6, 0x7c, 0x8a, 0x52, 0xeb,
	0x08, 0x05, 0xf3, 0xcc, 0x68, 0xca, 0xff, 0x7f, 0x85, 0xa7, 0xe9, 0xde, 0x7f, 0x95, 0x3e, 0x29,
	0xb3, 0x3f, 0x57, 0xf8, 0x40, 0x7d, 0x85, 0x53, 0x86, 0x49, 0xb4, 0x30, 0x50, 0xf5, 0x37, 0x3b,
	0x50, 0x47, 0x60, 0x3d, 0x48, 0x90, 0xcf, 0x68, 0x31, 0x52, 0x0f, 0xe7, 0x99, 0xb1, 0x2d, 0xda,
	0x65, 0xe1, 0xf5, 0x43, 0x55, 0x48, 0xe1, 0x31, 0x58, 0xfb, 0x9f, 0x03, 0xb5, 0xfa, 0xbe, 0x0a,
	0xb5, 0xd9, 0x04, 0xf5, 0xfe, 0x84, 0x3d, 0xe1, 0xef, 0x17, 0xdc, 0x2e, 0x91, 0xe4, 0x0c, 0x1e,
	0xfe, 0xa5, 0x82, 0x9d, 0xf2, 0x0a, 0x0e, 0x98, 0xcf, 0x66, 0x29, 0xec, 0x01, 0xbd, 0xff, 0x68,
	0xe8, 0x75, 0x46, 0xbd, 0xa1, 0xf3, 0x75, 0xdf, 0x1b, 0x0c, 0x3b, 0xc3, 0xd1, 0xc0, 0x1b, 0xf5,
	0x07, 0x27, 0xc7, 0x3d, 0xe7, 0x91, 0x73, 0x7c, 0xb4, 0xa3, 0x68, 0xc6, 0xf9, 0x45, 0xab, 0xb9,
	0xac, 0x1c, 0x91, 0x74, 0x8a, 0x02, 0x3c, 0xc1, 0x28, 0x84, 0x5f, 0x80, 0xe6, 0x0a, 0x13, 0xa7,
	0xdf, 0xe9, 0x0d, 0x9d, 0xa7, 0xc7, 0x3b, 0xaa, 0xf6, 0xfe, 0xf9, 0x45, 0xab, 0xb1, 0xec, 0xe0,
	0x10, 0x3f, 0x60, 0xf8, 0x0c, 0xc1, 0xcf, 0xc0, 0xfe, 0x0a, 0xb9, 0x14, 0x57, 0x34, 0xed, 0xfc,
	0xa2, 0xf5, 0xee, 0xb2, 0xb8, 0xc3, 0xa5, 0x5a, 0xf5, 0xa7, 0x5f, 0x75, 0xa5, 0x3b, 0xba, 0xbc,
	0xd6, 0x95, 0xab, 0x6b, 0x5d, 0x79, 0x79, 0xad, 0xab, 0xbf, 0xdd, 0xe8, 0xea, 0xe5, 0x8d, 0xae,
	0x5e, 0xdd, 0xe8, 0xea, 0xcb, 0x1b, 0x5d, 0x7d, 0x71, 0xab, 0x2b, 0x57, 0xb7, 0xba, 0xf2, 0xf7,
	0xad, 0xae, 0x7c, 0xfb, 0xd1, 0xc2, 0x44, 0xe6, 0x6f, 0xfd, 0x41, 0xca, 0xfc, 0xdc, 0x94, 0x07,
	0xf6, 0x0f, 0xc5, 0xd3, 0xcf, 0x47, 0x73, 0x5c, 0xe3, 0xf7, 0xe3, 0x93, 0xff, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xf6, 0x0e, 0xb0, 0x69, 0x95, 0x06, 0x00, 0x00,
}

func (this *NftAuctionBid) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NftAuctionBid)
	if !ok {
		that2, ok := that.(NftAuctionBid)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NftAuctionBid")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NftAuctionBid but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NftAuctionBid but is not nil && this == nil")
	}
	if this.AuctionId != that1.AuctionId {
		return fmt.Errorf("AuctionId this(%v) Not Equal that(%v)", this.AuctionId, that1.AuctionId)
	}
	if this.Bidder != that1.Bidder {
		return fmt.Errorf("Bidder this(%v) Not Equal that(%v)", this.Bidder, that1.Bidder)
	}
	if !this.Amount.Equal(&that1.Amount) {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", this.Amount, that1.Amount)
	}
	if !this.Time.Equal(that1.Time) {
		return fmt.Errorf("Time this(%v) Not Equal that(%v)", this.Time, that1.Time)
	}
	return nil
}
func (this *NftAuctionBid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NftAuctionBid)
	if !ok {
		that2, ok := that.(NftAuctionBid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AuctionId != that1.AuctionId {
		return false
	}
	if this.Bidder != that1.Bidder {
		return false
	}
	if !this.Amount.Equal(&that1.Amount) {
		return false
	}
	if !this.Time.Equal(that1.Time) {
		return false
	}
	return true
}
func (this *NftAuction) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NftAuction)
	if !ok {
		that2, ok := that.(NftAuction)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NftAuction")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NftAuction but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NftAuction but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.NftId != that1.NftId {
		return fmt.Errorf("NftId this(%v) Not Equal that(%v)", this.NftId, that1.NftId)
	}
	if this.DenomId != that1.DenomId {
		return fmt.Errorf("DenomId this(%v) Not Equal that(%v)", this.DenomId, that1.DenomId)
	}
	if this.Owner != that1.Owner {
		return fmt.Errorf("Owner this(%v) Not Equal that(%v)", this.Owner, that1.Owner)
	}
	if !this.StartPrice.Equal(&that1.StartPrice) {
		return fmt.Errorf("StartPrice this(%v) Not Equal that(%v)", this.StartPrice, that1.StartPrice)
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return fmt.Errorf("StartTime this(%v) Not Equal that(%v)", this.StartTime, that1.StartTime)
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return fmt.Errorf("EndTime this(%v) Not Equal that(%v)", this.EndTime, that1.EndTime)
	}
	if !this.IncrementPercentage.Equal(that1.IncrementPercentage) {
		return fmt.Errorf("IncrementPercentage this(%v) Not Equal that(%v)", this.IncrementPercentage, that1.IncrementPercentage)
	}
	return nil
}
func (this *NftAuction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NftAuction)
	if !ok {
		that2, ok := that.(NftAuction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.NftId != that1.NftId {
		return false
	}
	if this.DenomId != that1.DenomId {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if !this.StartPrice.Equal(&that1.StartPrice) {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if !this.IncrementPercentage.Equal(that1.IncrementPercentage) {
		return false
	}
	return true
}
func (this *NftListing) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NftListing)
	if !ok {
		that2, ok := that.(NftListing)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NftListing")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NftListing but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NftListing but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.NftId != that1.NftId {
		return fmt.Errorf("NftId this(%v) Not Equal that(%v)", this.NftId, that1.NftId)
	}
	if this.DenomId != that1.DenomId {
		return fmt.Errorf("DenomId this(%v) Not Equal that(%v)", this.DenomId, that1.DenomId)
	}
	if this.Creator != that1.Creator {
		return fmt.Errorf("Creator this(%v) Not Equal that(%v)", this.Creator, that1.Creator)
	}
	if !this.Price.Equal(&that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	return nil
}
func (this *NftListing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NftListing)
	if !ok {
		that2, ok := that.(NftListing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.NftId != that1.NftId {
		return false
	}
	if this.DenomId != that1.DenomId {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if !this.Price.Equal(&that1.Price) {
		return false
	}
	return true
}
func (this *NftMarket) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*NftMarket)
	if !ok {
		that2, ok := that.(NftMarket)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *NftMarket")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *NftMarket but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *NftMarket but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	return nil
}
func (this *NftMarket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NftMarket)
	if !ok {
		that2, ok := that.(NftMarket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (m *NftAuctionBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftAuctionBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftAuctionBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMarket(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NftAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.IncrementPercentage.Size()
		i -= size
		if _, err := m.IncrementPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintMarket(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintMarket(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.StartPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NftListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DenomId) > 0 {
		i -= len(m.DenomId)
		copy(dAtA[i:], m.DenomId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.DenomId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NftId) > 0 {
		i -= len(m.NftId)
		copy(dAtA[i:], m.NftId)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.NftId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NftMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NftAuctionBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovMarket(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *NftAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.StartPrice.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovMarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovMarket(uint64(l))
	l = m.IncrementPercentage.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *NftListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.NftId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.DenomId)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *NftMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NftAuctionBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftAuctionBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftAuctionBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
