// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/farming/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the farming module.
type Params struct {
	// private_plan_creation_fee specifies the fee for plan creation
	// this fee prevents from spamming and is collected in the community pool
	PrivatePlanCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=private_plan_creation_fee,json=privatePlanCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"private_plan_creation_fee" yaml:"private_plan_creation_fee"`
	// next_epoch_days is the epoch length in number of days
	// it updates internal state called CurrentEpochDays that is used to process
	// staking and reward distribution in end blocker
	NextEpochDays uint32 `protobuf:"varint,2,opt,name=next_epoch_days,json=nextEpochDays,proto3" json:"next_epoch_days,omitempty" yaml:"next_epoch_days"`
	// farming_fee_collector is the module account address to collect fees within
	// the farming module
	FarmingFeeCollector string `protobuf:"bytes,3,opt,name=farming_fee_collector,json=farmingFeeCollector,proto3" json:"farming_fee_collector,omitempty" yaml:"farming_fee_collector"`
	// delayed_staking_gas_fee is used to impose gas fee for the delayed staking
	DelayedStakingGasFee github_com_cosmos_cosmos_sdk_types.Gas `protobuf:"varint,4,opt,name=delayed_staking_gas_fee,json=delayedStakingGasFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Gas" json:"delayed_staking_gas_fee" yaml:"delayed_staking_gas_fee"`
	// max_num_private_plans is the maximum number of active private plans
	MaxNumPrivatePlans uint32 `protobuf:"varint,5,opt,name=max_num_private_plans,json=maxNumPrivatePlans,proto3" json:"max_num_private_plans,omitempty" yaml:"max_num_private_plans"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5c48ae752e4d2b7, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPrivatePlanCreationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PrivatePlanCreationFee
	}
	return nil
}

func (m *Params) GetNextEpochDays() uint32 {
	if m != nil {
		return m.NextEpochDays
	}
	return 0
}

func (m *Params) GetFarmingFeeCollector() string {
	if m != nil {
		return m.FarmingFeeCollector
	}
	return ""
}

func (m *Params) GetMaxNumPrivatePlans() uint32 {
	if m != nil {
		return m.MaxNumPrivatePlans
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "ollo.farming.v1.Params")
}

func init() { proto.RegisterFile("ollo/farming/v1/params.proto", fileDescriptor_d5c48ae752e4d2b7) }

var fileDescriptor_d5c48ae752e4d2b7 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x34, 0x54, 0xc2, 0xa8, 0xaa, 0x64, 0xd2, 0x92, 0x44, 0xc5, 0xb6, 0x7c, 0x40,
	0xbe, 0x60, 0x2b, 0x70, 0xe3, 0xe8, 0x40, 0x7b, 0x43, 0x91, 0xdb, 0x13, 0x97, 0xd5, 0xc4, 0xd9,
	0xba, 0x56, 0xbd, 0x5e, 0xcb, 0xbb, 0x89, 0xe2, 0x27, 0xe0, 0xca, 0x73, 0xf4, 0xc0, 0x73, 0xf4,
	0xd8, 0x23, 0xe2, 0x60, 0x50, 0xf2, 0x06, 0x7e, 0x02, 0xb4, 0x7f, 0x0a, 0x55, 0xd5, 0x4a, 0x3d,
	0xd9, 0x3b, 0xbf, 0xd9, 0x6f, 0x66, 0xbe, 0x1d, 0xeb, 0x88, 0x15, 0x05, 0x8b, 0xce, 0xa1, 0xa6,
	0x79, 0x99, 0x45, 0xab, 0x49, 0x54, 0x41, 0x0d, 0x94, 0x87, 0x55, 0xcd, 0x04, 0xb3, 0xf7, 0x25,
	0x0d, 0x0d, 0x0d, 0x57, 0x93, 0xf1, 0x20, 0x63, 0x19, 0x53, 0x2c, 0x92, 0x7f, 0x3a, 0x6d, 0x3c,
	0x4a, 0x19, 0xa7, 0x8c, 0x63, 0x0d, 0xf4, 0xc1, 0x20, 0x47, 0x9f, 0xa2, 0x39, 0x70, 0x12, 0xad,
	0x26, 0x73, 0x22, 0x60, 0x12, 0xa5, 0x2c, 0x2f, 0x0d, 0x7f, 0x73, 0xbf, 0xfe, 0x6d, 0x31, 0x85,
	0xfd, 0x1f, 0x7d, 0x6b, 0x77, 0xa6, 0x3a, 0xb2, 0xaf, 0x90, 0x35, 0xaa, 0xea, 0x7c, 0x05, 0x82,
	0xe0, 0xaa, 0x80, 0x12, 0xa7, 0x35, 0x01, 0x91, 0xb3, 0x12, 0x9f, 0x13, 0x32, 0x44, 0xde, 0x4e,
	0xf0, 0xf2, 0xfd, 0x28, 0x34, 0xc5, 0x65, 0xb9, 0xd0, 0x94, 0x0b, 0xa7, 0x2c, 0x2f, 0xe3, 0xb3,
	0xeb, 0xd6, 0xed, 0x75, 0xad, 0xeb, 0x35, 0x40, 0x8b, 0x8f, 0xfe, 0xa3, 0x4a, 0xfe, 0xd5, 0x6f,
	0x37, 0xc8, 0x72, 0x71, 0xb1, 0x9c, 0x87, 0x29, 0xa3, 0x66, 0x1a, 0xf3, 0x79, 0xc7, 0x17, 0x97,
	0x91, 0x68, 0x2a, 0xc2, 0x95, 0x28, 0x4f, 0x0e, 0x8d, 0xce, 0xac, 0x80, 0x72, 0x6a, 0x54, 0x8e,
	0x09, 0xb1, 0x63, 0x6b, 0xbf, 0x24, 0x6b, 0x81, 0x49, 0xc5, 0xd2, 0x0b, 0xbc, 0x80, 0x86, 0x0f,
	0x9f, 0x79, 0x28, 0xd8, 0x8b, 0xc7, 0x5d, 0xeb, 0x1e, 0xea, 0x16, 0xee, 0x25, 0xf8, 0xc9, 0x9e,
	0x8c, 0x7c, 0x96, 0x81, 0x4f, 0xd0, 0x70, 0xfb, 0xcc, 0x3a, 0x30, 0x66, 0xc8, 0xbe, 0x70, 0xca,
	0x8a, 0x82, 0xa4, 0x82, 0xd5, 0xc3, 0x1d, 0x0f, 0x05, 0x2f, 0x62, 0xaf, 0x6b, 0xdd, 0x23, 0xad,
	0xf4, 0x60, 0x9a, 0x9f, 0xbc, 0x32, 0xf1, 0x63, 0x42, 0xa6, 0xb7, 0x51, 0xfb, 0x1b, 0xb2, 0x5e,
	0x2f, 0x48, 0x01, 0x0d, 0x59, 0x60, 0x2e, 0xe0, 0x52, 0xde, 0xcb, 0x80, 0x2b, 0x13, 0xfb, 0x1e,
	0x0a, 0xfa, 0xf1, 0x4c, 0x3a, 0xf5, 0xab, 0x75, 0xdf, 0x3e, 0xc1, 0x85, 0x13, 0xe0, 0x5d, 0xeb,
	0x3a, 0xba, 0x8d, 0x47, 0x64, 0xfd, 0x64, 0x60, 0xc8, 0xa9, 0x06, 0x27, 0xc0, 0xa5, 0x47, 0xa7,
	0xd6, 0x01, 0x85, 0x35, 0x2e, 0x97, 0x14, 0xdf, 0x7d, 0x0d, 0x3e, 0x7c, 0xae, 0x9c, 0xba, 0x33,
	0xdf, 0x83, 0x69, 0x7e, 0x62, 0x53, 0x58, 0x7f, 0x59, 0xd2, 0xd9, 0xff, 0x27, 0xe0, 0x71, 0x78,
	0xbd, 0x71, 0xd0, 0xcd, 0xc6, 0x41, 0x7f, 0x36, 0x0e, 0xfa, 0xbe, 0x75, 0x7a, 0x37, 0x5b, 0xa7,
	0xf7, 0x73, 0xeb, 0xf4, 0xbe, 0x0e, 0xd4, 0xa6, 0xad, 0xff, 0xed, 0x9a, 0x1a, 0x60, 0xbe, 0xab,
	0xf6, 0xec, 0xc3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x88, 0xff, 0x89, 0x36, 0x08, 0x03, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNumPrivatePlans != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxNumPrivatePlans))
		i--
		dAtA[i] = 0x28
	}
	if m.DelayedStakingGasFee != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DelayedStakingGasFee))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FarmingFeeCollector) > 0 {
		i -= len(m.FarmingFeeCollector)
		copy(dAtA[i:], m.FarmingFeeCollector)
		i = encodeVarintParams(dAtA, i, uint64(len(m.FarmingFeeCollector)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NextEpochDays != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.NextEpochDays))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PrivatePlanCreationFee) > 0 {
		for iNdEx := len(m.PrivatePlanCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivatePlanCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrivatePlanCreationFee) > 0 {
		for _, e := range m.PrivatePlanCreationFee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.NextEpochDays != 0 {
		n += 1 + sovParams(uint64(m.NextEpochDays))
	}
	l = len(m.FarmingFeeCollector)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.DelayedStakingGasFee != 0 {
		n += 1 + sovParams(uint64(m.DelayedStakingGasFee))
	}
	if m.MaxNumPrivatePlans != 0 {
		n += 1 + sovParams(uint64(m.MaxNumPrivatePlans))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivatePlanCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivatePlanCreationFee = append(m.PrivatePlanCreationFee, types.Coin{})
			if err := m.PrivatePlanCreationFee[len(m.PrivatePlanCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextEpochDays", wireType)
			}
			m.NextEpochDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextEpochDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingFeeCollector", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingFeeCollector = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayedStakingGasFee", wireType)
			}
			m.DelayedStakingGasFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayedStakingGasFee |= github_com_cosmos_cosmos_sdk_types.Gas(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumPrivatePlans", wireType)
			}
			m.MaxNumPrivatePlans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumPrivatePlans |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
