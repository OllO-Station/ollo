// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/prices/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgBandPricesData struct {
	Creator        string                                   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OracleScriptID uint64                                   `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty" yaml:"oracle_script_id"`
	SourceChannel  string                                   `protobuf:"bytes,3,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty"`
	Calldata       *BandPricesCallData                      `protobuf:"bytes,4,opt,name=calldata,proto3" json:"calldata,omitempty"`
	AskCount       uint64                                   `protobuf:"varint,5,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	MinCount       uint64                                   `protobuf:"varint,6,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	FeeLimit       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=fee_limit,json=feeLimit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_limit"`
	PrepareGas     uint64                                   `protobuf:"varint,8,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty"`
	ExecuteGas     uint64                                   `protobuf:"varint,9,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty"`
	ClientID       string                                   `protobuf:"bytes,10,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *MsgBandPricesData) Reset()         { *m = MsgBandPricesData{} }
func (m *MsgBandPricesData) String() string { return proto.CompactTextString(m) }
func (*MsgBandPricesData) ProtoMessage()    {}
func (*MsgBandPricesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{0}
}
func (m *MsgBandPricesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBandPricesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBandPricesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBandPricesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBandPricesData.Merge(m, src)
}
func (m *MsgBandPricesData) XXX_Size() int {
	return m.Size()
}
func (m *MsgBandPricesData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBandPricesData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBandPricesData proto.InternalMessageInfo

func (m *MsgBandPricesData) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgBandPricesData) GetOracleScriptID() uint64 {
	if m != nil {
		return m.OracleScriptID
	}
	return 0
}

func (m *MsgBandPricesData) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *MsgBandPricesData) GetCalldata() *BandPricesCallData {
	if m != nil {
		return m.Calldata
	}
	return nil
}

func (m *MsgBandPricesData) GetAskCount() uint64 {
	if m != nil {
		return m.AskCount
	}
	return 0
}

func (m *MsgBandPricesData) GetMinCount() uint64 {
	if m != nil {
		return m.MinCount
	}
	return 0
}

func (m *MsgBandPricesData) GetFeeLimit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeLimit
	}
	return nil
}

func (m *MsgBandPricesData) GetPrepareGas() uint64 {
	if m != nil {
		return m.PrepareGas
	}
	return 0
}

func (m *MsgBandPricesData) GetExecuteGas() uint64 {
	if m != nil {
		return m.ExecuteGas
	}
	return 0
}

func (m *MsgBandPricesData) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type MsgBandPricesDataResponse struct {
}

func (m *MsgBandPricesDataResponse) Reset()         { *m = MsgBandPricesDataResponse{} }
func (m *MsgBandPricesDataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBandPricesDataResponse) ProtoMessage()    {}
func (*MsgBandPricesDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{1}
}
func (m *MsgBandPricesDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBandPricesDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBandPricesDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBandPricesDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBandPricesDataResponse.Merge(m, src)
}
func (m *MsgBandPricesDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBandPricesDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBandPricesDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBandPricesDataResponse proto.InternalMessageInfo

// Msg defines the Msg gPRC service.
// MsgModuleOwnershipTransfer is the type defined for module ownership transfer
type MsgModuleOwnershipTransfer struct {
	// current module owner address
	AssignerAddress       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=assignerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"assignerAddress,omitempty"`
	NewModuleOwnerAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=newModuleOwnerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"newModuleOwnerAddress,omitempty"`
	NewModuleOwnerPubKey  []byte                                        `protobuf:"bytes,3,opt,name=newModuleOwnerPubKey,proto3" json:"newModuleOwnerPubKey,omitempty" yaml:"pub_key"`
}

func (m *MsgModuleOwnershipTransfer) Reset()         { *m = MsgModuleOwnershipTransfer{} }
func (m *MsgModuleOwnershipTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgModuleOwnershipTransfer) ProtoMessage()    {}
func (*MsgModuleOwnershipTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{2}
}
func (m *MsgModuleOwnershipTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgModuleOwnershipTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgModuleOwnershipTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgModuleOwnershipTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgModuleOwnershipTransfer.Merge(m, src)
}
func (m *MsgModuleOwnershipTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgModuleOwnershipTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgModuleOwnershipTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgModuleOwnershipTransfer proto.InternalMessageInfo

func (m *MsgModuleOwnershipTransfer) GetAssignerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.AssignerAddress
	}
	return nil
}

func (m *MsgModuleOwnershipTransfer) GetNewModuleOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.NewModuleOwnerAddress
	}
	return nil
}

func (m *MsgModuleOwnershipTransfer) GetNewModuleOwnerPubKey() []byte {
	if m != nil {
		return m.NewModuleOwnerPubKey
	}
	return nil
}

// MsgFeed is the type defined for new feed
type MsgFeed struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// FeedOwner is the owner of the feed
	FeedOwner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=feedOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"feedOwner,omitempty"`
	// DataProviders is the init list of data provider of the feed
	DataProviders []*DataProvider `protobuf:"bytes,3,rep,name=dataProviders,proto3" json:"dataProviders,omitempty"`
	// The number of signatures required for a feedData submission to be valid
	SubmissionCount uint32 `protobuf:"varint,4,opt,name=submissionCount,proto3" json:"submissionCount,omitempty"`
	// The interval between which a new round should automatically be triggered.
	// The given value in milliseconds will only be approximate within block
	// intervals
	HeartbeatTrigger uint32 `protobuf:"varint,5,opt,name=heartbeatTrigger,proto3" json:"heartbeatTrigger,omitempty"`
	// The fraction of deviation in the feed data required to trigger a new round.
	// For example if the price of ATOM/USD changes by 1% then a new round should
	// occur even if the heartbeat interval has not elapsed.
	DeviationThresholdTrigger uint32 `protobuf:"varint,6,opt,name=deviationThresholdTrigger,proto3" json:"deviationThresholdTrigger,omitempty"`
	// Module owner who signs the add feed tx
	ModuleOwnerAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,7,opt,name=moduleOwnerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"moduleOwnerAddress,omitempty"`
	// feedReward struct describing how rewards should be paid
	FeedReward *FeedRewardSchema `protobuf:"bytes,8,opt,name=feedReward,proto3" json:"feedReward,omitempty"`
	// Feed description
	Desc string `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *MsgFeed) Reset()         { *m = MsgFeed{} }
func (m *MsgFeed) String() string { return proto.CompactTextString(m) }
func (*MsgFeed) ProtoMessage()    {}
func (*MsgFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{3}
}
func (m *MsgFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeed.Merge(m, src)
}
func (m *MsgFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeed proto.InternalMessageInfo

func (m *MsgFeed) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeed) GetFeedOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.FeedOwner
	}
	return nil
}

func (m *MsgFeed) GetDataProviders() []*DataProvider {
	if m != nil {
		return m.DataProviders
	}
	return nil
}

func (m *MsgFeed) GetSubmissionCount() uint32 {
	if m != nil {
		return m.SubmissionCount
	}
	return 0
}

func (m *MsgFeed) GetHeartbeatTrigger() uint32 {
	if m != nil {
		return m.HeartbeatTrigger
	}
	return 0
}

func (m *MsgFeed) GetDeviationThresholdTrigger() uint32 {
	if m != nil {
		return m.DeviationThresholdTrigger
	}
	return 0
}

func (m *MsgFeed) GetModuleOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ModuleOwnerAddress
	}
	return nil
}

func (m *MsgFeed) GetFeedReward() *FeedRewardSchema {
	if m != nil {
		return m.FeedReward
	}
	return nil
}

func (m *MsgFeed) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// MsgAddProvider is the type defined for adding new data provider of the feed
type MsgAddDataProvider struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// DataProvider is the new data provider of the feed to add
	DataProvider *DataProvider `protobuf:"bytes,2,opt,name=dataProvider,proto3" json:"dataProvider,omitempty"`
	// Signer is the feed owner who signs the add feed provided tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgAddDataProvider) Reset()         { *m = MsgAddDataProvider{} }
func (m *MsgAddDataProvider) String() string { return proto.CompactTextString(m) }
func (*MsgAddDataProvider) ProtoMessage()    {}
func (*MsgAddDataProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{4}
}
func (m *MsgAddDataProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddDataProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddDataProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddDataProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddDataProvider.Merge(m, src)
}
func (m *MsgAddDataProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddDataProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddDataProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddDataProvider proto.InternalMessageInfo

func (m *MsgAddDataProvider) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgAddDataProvider) GetDataProvider() *DataProvider {
	if m != nil {
		return m.DataProvider
	}
	return nil
}

func (m *MsgAddDataProvider) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

// MsgRemoveProvider is the type defined for removing a data provider of the
// feed
type MsgRemoveDataProvider struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// Address of the data provider to remove from the feed
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	// Signer is the feed owner who signs the remove feed provided tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgRemoveDataProvider) Reset()         { *m = MsgRemoveDataProvider{} }
func (m *MsgRemoveDataProvider) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveDataProvider) ProtoMessage()    {}
func (*MsgRemoveDataProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{5}
}
func (m *MsgRemoveDataProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveDataProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveDataProvider.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveDataProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveDataProvider.Merge(m, src)
}
func (m *MsgRemoveDataProvider) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveDataProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveDataProvider.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveDataProvider proto.InternalMessageInfo

func (m *MsgRemoveDataProvider) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgRemoveDataProvider) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgRemoveDataProvider) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgSetSubmissionCount struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// The number of signatures required for a feedData submission to be valid
	SubmissionCount uint32 `protobuf:"varint,2,opt,name=submissionCount,proto3" json:"submissionCount,omitempty"`
	// Signer is the feed owner who signs the tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSetSubmissionCount) Reset()         { *m = MsgSetSubmissionCount{} }
func (m *MsgSetSubmissionCount) String() string { return proto.CompactTextString(m) }
func (*MsgSetSubmissionCount) ProtoMessage()    {}
func (*MsgSetSubmissionCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{6}
}
func (m *MsgSetSubmissionCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSubmissionCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSubmissionCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSubmissionCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSubmissionCount.Merge(m, src)
}
func (m *MsgSetSubmissionCount) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSubmissionCount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSubmissionCount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSubmissionCount proto.InternalMessageInfo

func (m *MsgSetSubmissionCount) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgSetSubmissionCount) GetSubmissionCount() uint32 {
	if m != nil {
		return m.SubmissionCount
	}
	return 0
}

func (m *MsgSetSubmissionCount) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgSetHeartbeatTrigger struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// The interval between which a new round should automatically be triggered.
	// The given value in milliseconds will only be approximate within block
	// intervals
	HeartbeatTrigger uint32 `protobuf:"varint,2,opt,name=heartbeatTrigger,proto3" json:"heartbeatTrigger,omitempty"`
	// Signer is the feed owner who signs the tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSetHeartbeatTrigger) Reset()         { *m = MsgSetHeartbeatTrigger{} }
func (m *MsgSetHeartbeatTrigger) String() string { return proto.CompactTextString(m) }
func (*MsgSetHeartbeatTrigger) ProtoMessage()    {}
func (*MsgSetHeartbeatTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{7}
}
func (m *MsgSetHeartbeatTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetHeartbeatTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetHeartbeatTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetHeartbeatTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetHeartbeatTrigger.Merge(m, src)
}
func (m *MsgSetHeartbeatTrigger) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetHeartbeatTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetHeartbeatTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetHeartbeatTrigger proto.InternalMessageInfo

func (m *MsgSetHeartbeatTrigger) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgSetHeartbeatTrigger) GetHeartbeatTrigger() uint32 {
	if m != nil {
		return m.HeartbeatTrigger
	}
	return 0
}

func (m *MsgSetHeartbeatTrigger) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgSetDeviationThresholdTrigger struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// The fraction of deviation in the feed data required to trigger a new round.
	// For example if the price of ATOM/USD changes by 1% then a new round should
	// occur even if the heartbeat interval has not elapsed.
	DeviationThresholdTrigger uint32 `protobuf:"varint,2,opt,name=deviationThresholdTrigger,proto3" json:"deviationThresholdTrigger,omitempty"`
	// Signer is the feed owner who signs the tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSetDeviationThresholdTrigger) Reset()         { *m = MsgSetDeviationThresholdTrigger{} }
func (m *MsgSetDeviationThresholdTrigger) String() string { return proto.CompactTextString(m) }
func (*MsgSetDeviationThresholdTrigger) ProtoMessage()    {}
func (*MsgSetDeviationThresholdTrigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{8}
}
func (m *MsgSetDeviationThresholdTrigger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDeviationThresholdTrigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDeviationThresholdTrigger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDeviationThresholdTrigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDeviationThresholdTrigger.Merge(m, src)
}
func (m *MsgSetDeviationThresholdTrigger) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDeviationThresholdTrigger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDeviationThresholdTrigger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDeviationThresholdTrigger proto.InternalMessageInfo

func (m *MsgSetDeviationThresholdTrigger) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgSetDeviationThresholdTrigger) GetDeviationThresholdTrigger() uint32 {
	if m != nil {
		return m.DeviationThresholdTrigger
	}
	return 0
}

func (m *MsgSetDeviationThresholdTrigger) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

type MsgSetFeedReward struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// The reward distributed to the data providers in a given feed.
	// The reward will be given as the native token in the application,
	// denominated as "link"
	FeedReward *FeedRewardSchema `protobuf:"bytes,2,opt,name=feedReward,proto3" json:"feedReward,omitempty"`
	// Signer is the feed owner who signs the tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgSetFeedReward) Reset()         { *m = MsgSetFeedReward{} }
func (m *MsgSetFeedReward) String() string { return proto.CompactTextString(m) }
func (*MsgSetFeedReward) ProtoMessage()    {}
func (*MsgSetFeedReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{9}
}
func (m *MsgSetFeedReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetFeedReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetFeedReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetFeedReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetFeedReward.Merge(m, src)
}
func (m *MsgSetFeedReward) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetFeedReward) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetFeedReward.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetFeedReward proto.InternalMessageInfo

func (m *MsgSetFeedReward) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgSetFeedReward) GetFeedReward() *FeedRewardSchema {
	if m != nil {
		return m.FeedReward
	}
	return nil
}

func (m *MsgSetFeedReward) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

// MsgFeedOwnershipTransfer is the type defined for feed ownership transfer
type MsgFeedOwnershipTransfer struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// NewFeedOwnerAddress is the address of the new owner of the feed
	NewFeedOwnerAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=newFeedOwnerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"newFeedOwnerAddress,omitempty"`
	// Signer is the feed owner who signs the tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgFeedOwnershipTransfer) Reset()         { *m = MsgFeedOwnershipTransfer{} }
func (m *MsgFeedOwnershipTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgFeedOwnershipTransfer) ProtoMessage()    {}
func (*MsgFeedOwnershipTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{10}
}
func (m *MsgFeedOwnershipTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeedOwnershipTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeedOwnershipTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeedOwnershipTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeedOwnershipTransfer.Merge(m, src)
}
func (m *MsgFeedOwnershipTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeedOwnershipTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeedOwnershipTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeedOwnershipTransfer proto.InternalMessageInfo

func (m *MsgFeedOwnershipTransfer) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeedOwnershipTransfer) GetNewFeedOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.NewFeedOwnerAddress
	}
	return nil
}

func (m *MsgFeedOwnershipTransfer) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

// MsgFeedData is the type defined for the data of the feed
// It could be an OCR report feed, or any general feed data in the future
type MsgFeedData struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// Submitter is the leader of the current round who is calling the module to
	// submit feed data
	Submitter github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter,omitempty"`
	// observationFeedData is the report for price feed, could be used for general
	// feed data From proposal: The reports generated by Chainlink nodes off-chain
	// using the OCR protocol are ABI encoded byte arrays which means each report
	// contains a byte array which could be deserialized to OCRAbiEncoded type
	// this is the original observation data array from each data provider
	ObservationFeedData [][]byte `protobuf:"bytes,3,rep,name=observationFeedData,proto3" json:"observationFeedData,omitempty"`
	// observationFeedData is the list of the data provider observation data
	// signature of the current round, signed by chainlink prikey. This is
	// observation signatures
	ObservationFeedDataSignatures [][]byte `protobuf:"bytes,4,rep,name=observationFeedDataSignatures,proto3" json:"observationFeedDataSignatures,omitempty"`
	// isFeedDataValid is the indicator whether feed data is valid against the
	// external validation func, it's true by default
	IsFeedDataValid bool `protobuf:"varint,5,opt,name=isFeedDataValid,proto3" json:"isFeedDataValid,omitempty"`
	// cosmosPubKeys is the cosmos account pubKey slice of the data providers who
	// signed this round
	CosmosPubKeys [][]byte `protobuf:"bytes,6,rep,name=cosmosPubKeys,proto3" json:"cosmosPubKeys,omitempty"`
	// txFee is the tx fee of submitting feed data
	TxFee *types.Coin `protobuf:"bytes,7,opt,name=txFee,proto3" json:"txFee,omitempty"`
}

func (m *MsgFeedData) Reset()         { *m = MsgFeedData{} }
func (m *MsgFeedData) String() string { return proto.CompactTextString(m) }
func (*MsgFeedData) ProtoMessage()    {}
func (*MsgFeedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{11}
}
func (m *MsgFeedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFeedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFeedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFeedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFeedData.Merge(m, src)
}
func (m *MsgFeedData) XXX_Size() int {
	return m.Size()
}
func (m *MsgFeedData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFeedData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFeedData proto.InternalMessageInfo

func (m *MsgFeedData) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgFeedData) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

func (m *MsgFeedData) GetObservationFeedData() [][]byte {
	if m != nil {
		return m.ObservationFeedData
	}
	return nil
}

func (m *MsgFeedData) GetObservationFeedDataSignatures() [][]byte {
	if m != nil {
		return m.ObservationFeedDataSignatures
	}
	return nil
}

func (m *MsgFeedData) GetIsFeedDataValid() bool {
	if m != nil {
		return m.IsFeedDataValid
	}
	return false
}

func (m *MsgFeedData) GetCosmosPubKeys() [][]byte {
	if m != nil {
		return m.CosmosPubKeys
	}
	return nil
}

func (m *MsgFeedData) GetTxFee() *types.Coin {
	if m != nil {
		return m.TxFee
	}
	return nil
}

// MsgRequestNewRound is the type defined for requesting new rounds to be
// triggered for a given feed
type MsgRequestNewRound struct {
	// FeedId is the unique identifier of the feed
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	// Signer is the feed owner who signs the tx
	Signer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=signer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signer,omitempty"`
}

func (m *MsgRequestNewRound) Reset()         { *m = MsgRequestNewRound{} }
func (m *MsgRequestNewRound) String() string { return proto.CompactTextString(m) }
func (*MsgRequestNewRound) ProtoMessage()    {}
func (*MsgRequestNewRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{12}
}
func (m *MsgRequestNewRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestNewRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestNewRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestNewRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestNewRound.Merge(m, src)
}
func (m *MsgRequestNewRound) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestNewRound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestNewRound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestNewRound proto.InternalMessageInfo

func (m *MsgRequestNewRound) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *MsgRequestNewRound) GetSigner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Signer
	}
	return nil
}

// MsgAccount is the type defined for account associated with the Chainlink node
type MsgAccount struct {
	// submitter - associated cosmos account address
	Submitter github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter,omitempty"`
	// chainlinkPublicKey - public key of the associated Chainlink Oracle account
	ChainlinkPublicKey []byte `protobuf:"bytes,2,opt,name=chainlinkPublicKey,proto3" json:"chainlinkPublicKey,omitempty"`
	// chainlinkSigningKey - signing key of the associated Chainlink Oracle
	// account
	ChainlinkSigningKey []byte `protobuf:"bytes,3,opt,name=chainlinkSigningKey,proto3" json:"chainlinkSigningKey,omitempty"`
	// piggyAddress - cosmos account address receivable for reward and fee
	// distribution
	PiggyAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=piggyAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"piggyAddress,omitempty"`
}

func (m *MsgAccount) Reset()         { *m = MsgAccount{} }
func (m *MsgAccount) String() string { return proto.CompactTextString(m) }
func (*MsgAccount) ProtoMessage()    {}
func (*MsgAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{13}
}
func (m *MsgAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccount.Merge(m, src)
}
func (m *MsgAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccount proto.InternalMessageInfo

func (m *MsgAccount) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

func (m *MsgAccount) GetChainlinkPublicKey() []byte {
	if m != nil {
		return m.ChainlinkPublicKey
	}
	return nil
}

func (m *MsgAccount) GetChainlinkSigningKey() []byte {
	if m != nil {
		return m.ChainlinkSigningKey
	}
	return nil
}

func (m *MsgAccount) GetPiggyAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.PiggyAddress
	}
	return nil
}

// MsgEditAccount is the type defined to edit a Chainlink account
type MsgEditAccount struct {
	// submitter - associated cosmos account address
	Submitter github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter,omitempty"`
	// piggyAddress - cosmos account address receivable for reward and fee
	// distribution
	PiggyAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=piggyAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"piggyAddress,omitempty"`
}

func (m *MsgEditAccount) Reset()         { *m = MsgEditAccount{} }
func (m *MsgEditAccount) String() string { return proto.CompactTextString(m) }
func (*MsgEditAccount) ProtoMessage()    {}
func (*MsgEditAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{14}
}
func (m *MsgEditAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditAccount.Merge(m, src)
}
func (m *MsgEditAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditAccount proto.InternalMessageInfo

func (m *MsgEditAccount) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

func (m *MsgEditAccount) GetPiggyAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.PiggyAddress
	}
	return nil
}

type MsgResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	TxHash string `protobuf:"bytes,2,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (m *MsgResponse) Reset()         { *m = MsgResponse{} }
func (m *MsgResponse) String() string { return proto.CompactTextString(m) }
func (*MsgResponse) ProtoMessage()    {}
func (*MsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{15}
}
func (m *MsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgResponse.Merge(m, src)
}
func (m *MsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgResponse proto.InternalMessageInfo

func (m *MsgResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgResponse) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type OCRFeedDataInStore struct {
	FeedData              *MsgFeedData   `protobuf:"bytes,1,opt,name=feedData,proto3" json:"feedData,omitempty"`
	DeserializedOCRReport *OCRAbiEncoded `protobuf:"bytes,2,opt,name=deserializedOCRReport,proto3" json:"deserializedOCRReport,omitempty"`
	RoundId               uint64         `protobuf:"varint,3,opt,name=RoundId,proto3" json:"RoundId,omitempty"`
}

func (m *OCRFeedDataInStore) Reset()         { *m = OCRFeedDataInStore{} }
func (m *OCRFeedDataInStore) String() string { return proto.CompactTextString(m) }
func (*OCRFeedDataInStore) ProtoMessage()    {}
func (*OCRFeedDataInStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_e624ac4b13f3dd8c, []int{16}
}
func (m *OCRFeedDataInStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OCRFeedDataInStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OCRFeedDataInStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OCRFeedDataInStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OCRFeedDataInStore.Merge(m, src)
}
func (m *OCRFeedDataInStore) XXX_Size() int {
	return m.Size()
}
func (m *OCRFeedDataInStore) XXX_DiscardUnknown() {
	xxx_messageInfo_OCRFeedDataInStore.DiscardUnknown(m)
}

var xxx_messageInfo_OCRFeedDataInStore proto.InternalMessageInfo

func (m *OCRFeedDataInStore) GetFeedData() *MsgFeedData {
	if m != nil {
		return m.FeedData
	}
	return nil
}

func (m *OCRFeedDataInStore) GetDeserializedOCRReport() *OCRAbiEncoded {
	if m != nil {
		return m.DeserializedOCRReport
	}
	return nil
}

func (m *OCRFeedDataInStore) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgBandPricesData)(nil), "ollo.prices.v1.MsgBandPricesData")
	proto.RegisterType((*MsgBandPricesDataResponse)(nil), "ollo.prices.v1.MsgBandPricesDataResponse")
	proto.RegisterType((*MsgModuleOwnershipTransfer)(nil), "ollo.prices.v1.MsgModuleOwnershipTransfer")
	proto.RegisterType((*MsgFeed)(nil), "ollo.prices.v1.MsgFeed")
	proto.RegisterType((*MsgAddDataProvider)(nil), "ollo.prices.v1.MsgAddDataProvider")
	proto.RegisterType((*MsgRemoveDataProvider)(nil), "ollo.prices.v1.MsgRemoveDataProvider")
	proto.RegisterType((*MsgSetSubmissionCount)(nil), "ollo.prices.v1.MsgSetSubmissionCount")
	proto.RegisterType((*MsgSetHeartbeatTrigger)(nil), "ollo.prices.v1.MsgSetHeartbeatTrigger")
	proto.RegisterType((*MsgSetDeviationThresholdTrigger)(nil), "ollo.prices.v1.MsgSetDeviationThresholdTrigger")
	proto.RegisterType((*MsgSetFeedReward)(nil), "ollo.prices.v1.MsgSetFeedReward")
	proto.RegisterType((*MsgFeedOwnershipTransfer)(nil), "ollo.prices.v1.MsgFeedOwnershipTransfer")
	proto.RegisterType((*MsgFeedData)(nil), "ollo.prices.v1.MsgFeedData")
	proto.RegisterType((*MsgRequestNewRound)(nil), "ollo.prices.v1.MsgRequestNewRound")
	proto.RegisterType((*MsgAccount)(nil), "ollo.prices.v1.MsgAccount")
	proto.RegisterType((*MsgEditAccount)(nil), "ollo.prices.v1.MsgEditAccount")
	proto.RegisterType((*MsgResponse)(nil), "ollo.prices.v1.MsgResponse")
	proto.RegisterType((*OCRFeedDataInStore)(nil), "ollo.prices.v1.OCRFeedDataInStore")
}

func init() { proto.RegisterFile("ollo/prices/v1/tx.proto", fileDescriptor_e624ac4b13f3dd8c) }

var fileDescriptor_e624ac4b13f3dd8c = []byte{
	// 1581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xd7, 0x52, 0xb4, 0x24, 0x3e, 0xfd, 0xb1, 0x3c, 0xb6, 0x2c, 0x4a, 0xb2, 0x49, 0x99, 0xa8,
	0x0b, 0xd9, 0x85, 0x48, 0x4b, 0x3d, 0x14, 0x28, 0xda, 0xc2, 0x24, 0x65, 0xd9, 0x82, 0xcd, 0x4a,
	0x18, 0xb1, 0x2d, 0xe0, 0x16, 0x55, 0x87, 0x3b, 0xa3, 0xe5, 0x40, 0xcb, 0x1d, 0x76, 0x67, 0x29,
	0xad, 0x7a, 0x6c, 0xbe, 0x40, 0x80, 0x00, 0xf9, 0x04, 0x01, 0x02, 0xf8, 0x0b, 0x24, 0x01, 0x72,
	0xca, 0x25, 0xbe, 0x04, 0x30, 0x90, 0x4b, 0x4e, 0x4a, 0x20, 0xe7, 0x1e, 0xc0, 0xc7, 0x1c, 0x82,
	0x60, 0x67, 0x97, 0x14, 0xb9, 0xda, 0x5d, 0x39, 0x32, 0x73, 0x92, 0xf6, 0xfd, 0xf9, 0xcd, 0xfb,
	0x3b, 0xef, 0x0d, 0x61, 0x5e, 0x98, 0xa6, 0x28, 0xb5, 0x6d, 0xae, 0x33, 0x59, 0x3a, 0x5c, 0x2b,
	0x39, 0x6e, 0xb1, 0x6d, 0x0b, 0x47, 0xa0, 0x19, 0x8f, 0x51, 0xf4, 0x19, 0xc5, 0xc3, 0xb5, 0xc5,
	0x5b, 0x21, 0x41, 0x83, 0x59, 0x4c, 0x72, 0xe9, 0x4b, 0x2f, 0x2e, 0x85, 0xb8, 0x81, 0x9e, 0xcf,
	0xbc, 0x61, 0x08, 0x43, 0xa8, 0x7f, 0x4b, 0xde, 0x7f, 0x01, 0x35, 0xa7, 0x0b, 0xd9, 0x12, 0xb2,
	0xd4, 0x20, 0x92, 0x95, 0x0e, 0xd7, 0x1a, 0xcc, 0x21, 0x6b, 0x25, 0x5d, 0x70, 0x2b, 0xe0, 0x2f,
	0x84, 0x20, 0x1b, 0xc4, 0xa2, 0x01, 0xeb, 0x96, 0x21, 0x84, 0x61, 0xb2, 0x12, 0x69, 0xf3, 0x12,
	0xb1, 0x2c, 0xe1, 0x10, 0x87, 0x0b, 0x2b, 0x38, 0xae, 0xf0, 0xd3, 0x28, 0x5c, 0xab, 0x49, 0xa3,
	0x42, 0x2c, 0xba, 0xa3, 0xb4, 0x37, 0x88, 0x43, 0x50, 0x16, 0xc6, 0x75, 0x9b, 0x11, 0x47, 0xd8,
	0x59, 0x6d, 0x59, 0x5b, 0xc9, 0xe0, 0xee, 0x27, 0xfa, 0x07, 0xcc, 0x0a, 0x9b, 0xe8, 0x26, 0xdb,
	0x93, 0xba, 0xcd, 0xdb, 0xce, 0x1e, 0xa7, 0xd9, 0xd4, 0xb2, 0xb6, 0x92, 0xae, 0xac, 0x9e, 0x9e,
	0xe4, 0x67, 0xb6, 0x15, 0x6f, 0x57, 0xb1, 0xb6, 0x36, 0xde, 0x9c, 0xe4, 0xe7, 0x8f, 0x49, 0xcb,
	0xfc, 0x63, 0x21, 0xac, 0x53, 0xc0, 0x33, 0xa2, 0x5f, 0x94, 0xa2, 0xbb, 0x30, 0x23, 0x45, 0xc7,
	0xd6, 0xd9, 0x9e, 0xde, 0x24, 0x96, 0xc5, 0xcc, 0xec, 0xa8, 0x3a, 0x79, 0xda, 0xa7, 0x56, 0x7d,
	0x22, 0xfa, 0x0b, 0x4c, 0xe8, 0xc4, 0x34, 0x29, 0x71, 0x48, 0x36, 0xbd, 0xac, 0xad, 0x4c, 0xae,
	0x17, 0x8a, 0x83, 0xc1, 0x2f, 0x9e, 0xf9, 0x52, 0x25, 0xa6, 0xe9, 0xf9, 0x83, 0x7b, 0x3a, 0x68,
	0x09, 0x32, 0x44, 0x1e, 0xec, 0xe9, 0xa2, 0x63, 0x39, 0xd9, 0x2b, 0x9e, 0xe1, 0x78, 0x82, 0xc8,
	0x83, 0xaa, 0xf7, 0xed, 0x31, 0x5b, 0xdc, 0x0a, 0x98, 0x63, 0x3e, 0xb3, 0xc5, 0x2d, 0x9f, 0xd9,
	0x84, 0xcc, 0x3e, 0x63, 0x7b, 0x26, 0x6f, 0x71, 0x27, 0x3b, 0xbe, 0x3c, 0xba, 0x32, 0xb9, 0xbe,
	0x50, 0xf4, 0xd3, 0x52, 0xf4, 0xd2, 0x52, 0x0c, 0xd2, 0x52, 0xac, 0x0a, 0x6e, 0x55, 0x1e, 0xbc,
	0x3c, 0xc9, 0x8f, 0xbc, 0xf8, 0x36, 0xbf, 0x62, 0x70, 0xa7, 0xd9, 0x69, 0x14, 0x75, 0xd1, 0x2a,
	0x05, 0x39, 0xf4, 0xff, 0xac, 0x4a, 0x7a, 0x50, 0x72, 0x8e, 0xdb, 0x4c, 0x2a, 0x05, 0x89, 0x27,
	0xf6, 0x19, 0x7b, 0xe6, 0x81, 0xa3, 0x3c, 0x4c, 0xb6, 0x6d, 0xd6, 0x26, 0x36, 0xdb, 0x33, 0x88,
	0xcc, 0x4e, 0x28, 0x43, 0x20, 0x20, 0x3d, 0x26, 0xd2, 0x13, 0x60, 0x2e, 0xd3, 0x3b, 0x8e, 0x2f,
	0x90, 0xf1, 0x05, 0x02, 0x92, 0x27, 0x70, 0x0f, 0x32, 0xba, 0xc9, 0x99, 0xa5, 0xd2, 0x03, 0x5e,
	0x1c, 0x2b, 0x53, 0xa7, 0x27, 0xf9, 0x89, 0xaa, 0x22, 0x6e, 0x6d, 0xe0, 0x09, 0x9f, 0xbd, 0x45,
	0x0b, 0x4b, 0xb0, 0x70, 0x2e, 0xff, 0x98, 0xc9, 0xb6, 0xb0, 0x24, 0x2b, 0xbc, 0x48, 0xc1, 0x62,
	0x4d, 0x1a, 0x35, 0x41, 0x3b, 0x26, 0xdb, 0x3e, 0xb2, 0x98, 0x2d, 0x9b, 0xbc, 0x5d, 0xb7, 0x89,
	0x25, 0xf7, 0x99, 0x8d, 0xfe, 0x09, 0x57, 0x89, 0x94, 0xdc, 0xb0, 0x98, 0x5d, 0xa6, 0xd4, 0x66,
	0x52, 0xaa, 0x72, 0x99, 0xaa, 0xac, 0xfd, 0x78, 0x92, 0x5f, 0x7d, 0x0b, 0xcf, 0xcb, 0xba, 0x1e,
	0x28, 0xe2, 0x30, 0x12, 0x32, 0x60, 0xce, 0x62, 0x47, 0x7d, 0x47, 0x77, 0x8f, 0x48, 0x5d, 0xf6,
	0x88, 0x68, 0x3c, 0xb4, 0x09, 0x37, 0x06, 0x19, 0x3b, 0x9d, 0xc6, 0x53, 0x76, 0xac, 0xea, 0x6f,
	0xaa, 0x82, 0xde, 0x9c, 0xe4, 0x67, 0xfc, 0x22, 0x6e, 0x77, 0x1a, 0x7b, 0x07, 0xec, 0xb8, 0x80,
	0x23, 0xe5, 0x0b, 0xef, 0xa5, 0x61, 0xbc, 0x26, 0x8d, 0x4d, 0xc6, 0x28, 0xba, 0x09, 0x63, 0xfb,
	0x8c, 0xd1, 0x2d, 0x1a, 0xf4, 0x4f, 0xf0, 0x85, 0xb6, 0x55, 0x11, 0x51, 0xa5, 0x76, 0x79, 0x47,
	0xce, 0x30, 0x50, 0x05, 0xa6, 0xbd, 0xba, 0xde, 0xb1, 0xc5, 0x21, 0xa7, 0xcc, 0x96, 0xd9, 0x51,
	0x55, 0x99, 0xb7, 0xc2, 0x4d, 0xb1, 0xd1, 0x27, 0x84, 0x07, 0x55, 0xd0, 0x0a, 0x5c, 0x95, 0x9d,
	0x46, 0x8b, 0x4b, 0xc9, 0x85, 0x5f, 0xec, 0xaa, 0xb5, 0xa6, 0x71, 0x98, 0x8c, 0xee, 0xc3, 0x6c,
	0x93, 0x11, 0xdb, 0x69, 0x30, 0xe2, 0xd4, 0x6d, 0x6e, 0x18, 0xcc, 0x56, 0x4d, 0x34, 0x8d, 0xcf,
	0xd1, 0xd1, 0x9f, 0x60, 0x81, 0xb2, 0x43, 0xae, 0x6e, 0x9b, 0x7a, 0xd3, 0x66, 0xb2, 0x29, 0x4c,
	0xda, 0x55, 0x1a, 0x53, 0x4a, 0xf1, 0x02, 0x88, 0x00, 0x6a, 0x9d, 0x4f, 0xfd, 0xf8, 0x65, 0x23,
	0x16, 0x01, 0x86, 0x1e, 0x02, 0x78, 0x71, 0xc4, 0xec, 0x88, 0xd8, 0x54, 0x75, 0xd9, 0xe4, 0xfa,
	0x72, 0x38, 0x6e, 0x9b, 0x3d, 0x89, 0x5d, 0xbd, 0xc9, 0x5a, 0x04, 0xf7, 0xe9, 0x20, 0x04, 0x69,
	0xca, 0xa4, 0xae, 0x1a, 0x30, 0x83, 0xd5, 0xff, 0x85, 0xcf, 0x34, 0x40, 0x35, 0x69, 0x94, 0x29,
	0xed, 0x0f, 0x79, 0x6c, 0x41, 0x3c, 0x84, 0xa9, 0xfe, 0x64, 0xa8, 0x9a, 0xb8, 0x28, 0x7d, 0x03,
	0x1a, 0x68, 0x0b, 0xc6, 0xfc, 0xc6, 0x09, 0x0a, 0xf6, 0x12, 0xd1, 0x09, 0x00, 0x0a, 0x5f, 0x6a,
	0x30, 0x57, 0x93, 0x06, 0x66, 0x2d, 0x71, 0xc8, 0xde, 0xca, 0xfc, 0xa7, 0x30, 0x4e, 0xde, 0xb5,
	0x2d, 0xbb, 0x08, 0xc3, 0xf4, 0xe4, 0x23, 0xdf, 0x93, 0x5d, 0xe6, 0xec, 0x86, 0x4a, 0x38, 0xce,
	0x93, 0x88, 0x26, 0x48, 0x45, 0x37, 0xc1, 0x10, 0xcd, 0xfc, 0x58, 0x83, 0x9b, 0xbe, 0x99, 0x4f,
	0xc2, 0xed, 0x13, 0x67, 0x67, 0x54, 0x0b, 0xa6, 0x62, 0x5a, 0x70, 0x88, 0x96, 0x7e, 0xa1, 0x41,
	0xde, 0xb7, 0x74, 0x23, 0xb6, 0x67, 0xe3, 0x4c, 0x4e, 0xbc, 0x09, 0x52, 0x17, 0xdd, 0x04, 0x43,
	0x74, 0xe2, 0x13, 0x0d, 0x66, 0x7d, 0x27, 0xce, 0xda, 0x3a, 0xa1, 0x33, 0xfb, 0xaf, 0x87, 0xd4,
	0x25, 0xae, 0x87, 0x21, 0x5a, 0x7e, 0xaa, 0x41, 0x36, 0x98, 0x2d, 0xe7, 0xc7, 0x70, 0x9c, 0x07,
	0x3a, 0x5c, 0xb7, 0xd8, 0x51, 0x4f, 0xe7, 0x9d, 0xe7, 0x67, 0x14, 0xda, 0x30, 0x9d, 0xfc, 0x21,
	0x05, 0x93, 0x81, 0x93, 0x6a, 0x0b, 0x4d, 0x18, 0xa2, 0xaa, 0x27, 0x1d, 0xe7, 0x9d, 0x86, 0x68,
	0x0f, 0x03, 0x3d, 0x80, 0xeb, 0xa2, 0x21, 0x99, 0x7d, 0xa8, 0x2a, 0xb0, 0x7b, 0xbe, 0x1a, 0xa5,
	0x53, 0x38, 0x8a, 0x85, 0x36, 0xe0, 0x76, 0x04, 0x79, 0x97, 0x1b, 0x16, 0x71, 0x3a, 0x36, 0x93,
	0xd9, 0xb4, 0xd2, 0x4d, 0x16, 0xf2, 0xee, 0x1c, 0x2e, 0xbb, 0xf4, 0xbf, 0x13, 0x93, 0x53, 0x35,
	0x4d, 0x27, 0x70, 0x98, 0x8c, 0x7e, 0x03, 0xd3, 0xbe, 0x2f, 0xfe, 0xae, 0x21, 0xb3, 0x63, 0x0a,
	0x7f, 0x90, 0x88, 0x4a, 0x70, 0xc5, 0x71, 0x37, 0x19, 0x53, 0x73, 0x32, 0x69, 0x3d, 0xc5, 0xbe,
	0x5c, 0xe1, 0x48, 0xcd, 0x2a, 0xcc, 0xfe, 0xdb, 0x61, 0xd2, 0xf9, 0x2b, 0x3b, 0xc2, 0xa2, 0x63,
	0xc5, 0x77, 0xc4, 0x10, 0x53, 0xfd, 0x61, 0x0a, 0xc0, 0x9b, 0x92, 0xba, 0xda, 0xb5, 0x07, 0x33,
	0xaa, 0x0d, 0x21, 0xa3, 0x45, 0x40, 0x7a, 0x93, 0x70, 0xcb, 0xe4, 0xd6, 0xc1, 0x4e, 0xa7, 0x61,
	0x72, 0xdd, 0xdb, 0xe8, 0x54, 0xad, 0xe0, 0x08, 0x8e, 0x57, 0x01, 0x3d, 0xaa, 0x97, 0x20, 0x6e,
	0x19, 0xbd, 0x15, 0x10, 0x47, 0xb1, 0xd0, 0xdf, 0x60, 0xaa, 0xcd, 0x0d, 0xe3, 0xb8, 0xdb, 0x55,
	0xe9, 0xcb, 0x5a, 0x3d, 0x00, 0x53, 0xf8, 0x54, 0x83, 0x99, 0x9a, 0x34, 0x1e, 0x51, 0xee, 0xfc,
	0x6a, 0xc1, 0x09, 0x9b, 0x9e, 0x1a, 0x8e, 0xe9, 0x7f, 0x56, 0xdd, 0xdb, 0x7d, 0x3b, 0x78, 0x55,
	0xd4, 0x64, 0xdc, 0x68, 0x3a, 0xca, 0xe6, 0x34, 0x0e, 0xbe, 0x3c, 0xba, 0xe3, 0x3e, 0x21, 0xb2,
	0xa9, 0xce, 0xcd, 0xe0, 0xe0, 0xab, 0xf0, 0xb9, 0x06, 0x68, 0xbb, 0x8a, 0xbb, 0x75, 0xbf, 0x65,
	0xed, 0x3a, 0xc2, 0x66, 0xe8, 0x0f, 0xe0, 0x3d, 0x8c, 0xfc, 0x86, 0xd4, 0x54, 0x59, 0x2f, 0x85,
	0x2f, 0xe1, 0xbe, 0x3b, 0x03, 0xf7, 0x84, 0xd1, 0x2e, 0xcc, 0x51, 0x26, 0x99, 0xcd, 0x89, 0xc9,
	0xff, 0xc7, 0xe8, 0x76, 0x15, 0x63, 0xd6, 0x16, 0xb6, 0x13, 0x5c, 0xe5, 0xb7, 0xc3, 0x28, 0xdb,
	0x55, 0x5c, 0x6e, 0xf0, 0x47, 0x96, 0x2e, 0x28, 0xa3, 0x38, 0x5a, 0xd7, 0x7b, 0x18, 0xab, 0x1e,
	0xd9, 0xa2, 0xaa, 0x36, 0xd2, 0xb8, 0xfb, 0xb9, 0xfe, 0x15, 0xc0, 0x68, 0x4d, 0x1a, 0xe8, 0xdf,
	0x30, 0x13, 0x7a, 0x4c, 0xdf, 0x89, 0xb0, 0x77, 0x50, 0x64, 0xf1, 0xde, 0x85, 0x22, 0xbd, 0xb0,
	0x0a, 0x98, 0x55, 0x2b, 0x8d, 0xd3, 0x75, 0xb9, 0xee, 0xa2, 0xa4, 0x88, 0x2c, 0x46, 0x31, 0x7b,
	0x0f, 0xbc, 0x3b, 0xff, 0xff, 0xfa, 0xfb, 0x0f, 0x52, 0x4b, 0x8b, 0x0b, 0xa5, 0xd0, 0x0f, 0x08,
	0x5e, 0x18, 0x4b, 0xea, 0xc5, 0xbc, 0x0d, 0xb3, 0x65, 0x4a, 0xfb, 0x9e, 0x3b, 0x75, 0x17, 0xe5,
	0x22, 0x30, 0xfb, 0x24, 0x12, 0xcf, 0x44, 0x14, 0x16, 0x62, 0x1e, 0x94, 0x75, 0x17, 0xdd, 0x4f,
	0x46, 0xee, 0x97, 0x4e, 0x3e, 0xa5, 0x0c, 0x99, 0x32, 0xa5, 0x5e, 0x14, 0xea, 0x2e, 0x9a, 0x8f,
	0x09, 0x50, 0x32, 0x44, 0x1d, 0xae, 0x85, 0xd6, 0xf8, 0xba, 0x8b, 0x0a, 0x11, 0x1a, 0x21, 0xa9,
	0x64, 0xd4, 0xe7, 0x70, 0xe3, 0xfc, 0x82, 0x5d, 0x77, 0xd1, 0xdd, 0x48, 0xa5, 0xb0, 0xe0, 0x85,
	0xd8, 0xe7, 0x57, 0xde, 0x18, 0xec, 0xf3, 0x82, 0xc9, 0xd8, 0xff, 0x82, 0xb9, 0x88, 0x3d, 0xb5,
	0xee, 0xa2, 0xdf, 0x46, 0x83, 0x87, 0x25, 0x93, 0xd1, 0x2d, 0xc8, 0x25, 0xed, 0x96, 0x75, 0x17,
	0x95, 0xa2, 0x8f, 0x89, 0x55, 0x49, 0x3e, 0x6f, 0x07, 0xae, 0x0e, 0xac, 0x81, 0x75, 0x17, 0x2d,
	0x47, 0x1f, 0x70, 0x26, 0x73, 0x61, 0xb5, 0x84, 0x06, 0x69, 0x4c, 0xb5, 0x84, 0xa4, 0x92, 0x51,
	0xff, 0x03, 0xf3, 0x91, 0x4b, 0x5f, 0xdd, 0x45, 0x2b, 0x31, 0x45, 0xfd, 0x0b, 0x1b, 0xe5, 0x31,
	0x4c, 0x95, 0x29, 0x0d, 0x86, 0x4d, 0xdd, 0x45, 0x8b, 0x51, 0x05, 0xee, 0x73, 0x93, 0x81, 0x9e,
	0xc1, 0x74, 0xdf, 0xd8, 0x8a, 0xb9, 0x25, 0xfa, 0x24, 0x12, 0xd1, 0x2a, 0x8f, 0x5e, 0x9e, 0xe6,
	0xb4, 0x57, 0xa7, 0x39, 0xed, 0xbb, 0xd3, 0x9c, 0xf6, 0xfe, 0xeb, 0xdc, 0xc8, 0xab, 0xd7, 0xb9,
	0x91, 0x6f, 0x5e, 0xe7, 0x46, 0x9e, 0xff, 0xae, 0x6f, 0x48, 0x79, 0x00, 0xab, 0xd2, 0xff, 0x49,
	0xd3, 0xbf, 0xc2, 0xdc, 0xee, 0x25, 0xa6, 0xa6, 0x55, 0x63, 0x4c, 0xfd, 0xcc, 0xf9, 0xfb, 0x9f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x70, 0xc6, 0xe8, 0xbb, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	BandPricesData(ctx context.Context, in *MsgBandPricesData, opts ...grpc.CallOption) (*MsgBandPricesDataResponse, error)
	SubmitFeedDataTx(ctx context.Context, in *MsgFeedData, opts ...grpc.CallOption) (*MsgResponse, error)
	AddModuleOwnerTx(ctx context.Context, in *MsgModuleOwner, opts ...grpc.CallOption) (*MsgResponse, error)
	ModuleOwnershipTransferTx(ctx context.Context, in *MsgModuleOwnershipTransfer, opts ...grpc.CallOption) (*MsgResponse, error)
	AddFeedTx(ctx context.Context, in *MsgFeed, opts ...grpc.CallOption) (*MsgResponse, error)
	AddDataProviderTx(ctx context.Context, in *MsgAddDataProvider, opts ...grpc.CallOption) (*MsgResponse, error)
	RemoveDataProviderTx(ctx context.Context, in *MsgRemoveDataProvider, opts ...grpc.CallOption) (*MsgResponse, error)
	SetSubmissionCountTx(ctx context.Context, in *MsgSetSubmissionCount, opts ...grpc.CallOption) (*MsgResponse, error)
	SetHeartbeatTriggerTx(ctx context.Context, in *MsgSetHeartbeatTrigger, opts ...grpc.CallOption) (*MsgResponse, error)
	SetDeviationThresholdTriggerTx(ctx context.Context, in *MsgSetDeviationThresholdTrigger, opts ...grpc.CallOption) (*MsgResponse, error)
	SetFeedRewardTx(ctx context.Context, in *MsgSetFeedReward, opts ...grpc.CallOption) (*MsgResponse, error)
	RequestNewRoundTx(ctx context.Context, in *MsgRequestNewRound, opts ...grpc.CallOption) (*MsgResponse, error)
	FeedOwnershipTransferTx(ctx context.Context, in *MsgFeedOwnershipTransfer, opts ...grpc.CallOption) (*MsgResponse, error)
	AddAccountTx(ctx context.Context, in *MsgAccount, opts ...grpc.CallOption) (*MsgResponse, error)
	EditAccountTx(ctx context.Context, in *MsgEditAccount, opts ...grpc.CallOption) (*MsgResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) BandPricesData(ctx context.Context, in *MsgBandPricesData, opts ...grpc.CallOption) (*MsgBandPricesDataResponse, error) {
	out := new(MsgBandPricesDataResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/BandPricesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitFeedDataTx(ctx context.Context, in *MsgFeedData, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/SubmitFeedDataTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddModuleOwnerTx(ctx context.Context, in *MsgModuleOwner, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/AddModuleOwnerTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ModuleOwnershipTransferTx(ctx context.Context, in *MsgModuleOwnershipTransfer, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/ModuleOwnershipTransferTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFeedTx(ctx context.Context, in *MsgFeed, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/AddFeedTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddDataProviderTx(ctx context.Context, in *MsgAddDataProvider, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/AddDataProviderTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveDataProviderTx(ctx context.Context, in *MsgRemoveDataProvider, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/RemoveDataProviderTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetSubmissionCountTx(ctx context.Context, in *MsgSetSubmissionCount, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/SetSubmissionCountTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetHeartbeatTriggerTx(ctx context.Context, in *MsgSetHeartbeatTrigger, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/SetHeartbeatTriggerTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDeviationThresholdTriggerTx(ctx context.Context, in *MsgSetDeviationThresholdTrigger, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/SetDeviationThresholdTriggerTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetFeedRewardTx(ctx context.Context, in *MsgSetFeedReward, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/SetFeedRewardTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestNewRoundTx(ctx context.Context, in *MsgRequestNewRound, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/RequestNewRoundTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FeedOwnershipTransferTx(ctx context.Context, in *MsgFeedOwnershipTransfer, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/FeedOwnershipTransferTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAccountTx(ctx context.Context, in *MsgAccount, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/AddAccountTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EditAccountTx(ctx context.Context, in *MsgEditAccount, opts ...grpc.CallOption) (*MsgResponse, error) {
	out := new(MsgResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Msg/EditAccountTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	BandPricesData(context.Context, *MsgBandPricesData) (*MsgBandPricesDataResponse, error)
	SubmitFeedDataTx(context.Context, *MsgFeedData) (*MsgResponse, error)
	AddModuleOwnerTx(context.Context, *MsgModuleOwner) (*MsgResponse, error)
	ModuleOwnershipTransferTx(context.Context, *MsgModuleOwnershipTransfer) (*MsgResponse, error)
	AddFeedTx(context.Context, *MsgFeed) (*MsgResponse, error)
	AddDataProviderTx(context.Context, *MsgAddDataProvider) (*MsgResponse, error)
	RemoveDataProviderTx(context.Context, *MsgRemoveDataProvider) (*MsgResponse, error)
	SetSubmissionCountTx(context.Context, *MsgSetSubmissionCount) (*MsgResponse, error)
	SetHeartbeatTriggerTx(context.Context, *MsgSetHeartbeatTrigger) (*MsgResponse, error)
	SetDeviationThresholdTriggerTx(context.Context, *MsgSetDeviationThresholdTrigger) (*MsgResponse, error)
	SetFeedRewardTx(context.Context, *MsgSetFeedReward) (*MsgResponse, error)
	RequestNewRoundTx(context.Context, *MsgRequestNewRound) (*MsgResponse, error)
	FeedOwnershipTransferTx(context.Context, *MsgFeedOwnershipTransfer) (*MsgResponse, error)
	AddAccountTx(context.Context, *MsgAccount) (*MsgResponse, error)
	EditAccountTx(context.Context, *MsgEditAccount) (*MsgResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) BandPricesData(ctx context.Context, req *MsgBandPricesData) (*MsgBandPricesDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandPricesData not implemented")
}
func (*UnimplementedMsgServer) SubmitFeedDataTx(ctx context.Context, req *MsgFeedData) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeedDataTx not implemented")
}
func (*UnimplementedMsgServer) AddModuleOwnerTx(ctx context.Context, req *MsgModuleOwner) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddModuleOwnerTx not implemented")
}
func (*UnimplementedMsgServer) ModuleOwnershipTransferTx(ctx context.Context, req *MsgModuleOwnershipTransfer) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleOwnershipTransferTx not implemented")
}
func (*UnimplementedMsgServer) AddFeedTx(ctx context.Context, req *MsgFeed) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeedTx not implemented")
}
func (*UnimplementedMsgServer) AddDataProviderTx(ctx context.Context, req *MsgAddDataProvider) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDataProviderTx not implemented")
}
func (*UnimplementedMsgServer) RemoveDataProviderTx(ctx context.Context, req *MsgRemoveDataProvider) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDataProviderTx not implemented")
}
func (*UnimplementedMsgServer) SetSubmissionCountTx(ctx context.Context, req *MsgSetSubmissionCount) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubmissionCountTx not implemented")
}
func (*UnimplementedMsgServer) SetHeartbeatTriggerTx(ctx context.Context, req *MsgSetHeartbeatTrigger) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeartbeatTriggerTx not implemented")
}
func (*UnimplementedMsgServer) SetDeviationThresholdTriggerTx(ctx context.Context, req *MsgSetDeviationThresholdTrigger) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviationThresholdTriggerTx not implemented")
}
func (*UnimplementedMsgServer) SetFeedRewardTx(ctx context.Context, req *MsgSetFeedReward) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeedRewardTx not implemented")
}
func (*UnimplementedMsgServer) RequestNewRoundTx(ctx context.Context, req *MsgRequestNewRound) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestNewRoundTx not implemented")
}
func (*UnimplementedMsgServer) FeedOwnershipTransferTx(ctx context.Context, req *MsgFeedOwnershipTransfer) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeedOwnershipTransferTx not implemented")
}
func (*UnimplementedMsgServer) AddAccountTx(ctx context.Context, req *MsgAccount) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccountTx not implemented")
}
func (*UnimplementedMsgServer) EditAccountTx(ctx context.Context, req *MsgEditAccount) (*MsgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAccountTx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_BandPricesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBandPricesData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BandPricesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/BandPricesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BandPricesData(ctx, req.(*MsgBandPricesData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitFeedDataTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFeedData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitFeedDataTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/SubmitFeedDataTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitFeedDataTx(ctx, req.(*MsgFeedData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddModuleOwnerTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModuleOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddModuleOwnerTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/AddModuleOwnerTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddModuleOwnerTx(ctx, req.(*MsgModuleOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ModuleOwnershipTransferTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgModuleOwnershipTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ModuleOwnershipTransferTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/ModuleOwnershipTransferTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ModuleOwnershipTransferTx(ctx, req.(*MsgModuleOwnershipTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFeedTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFeedTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/AddFeedTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFeedTx(ctx, req.(*MsgFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddDataProviderTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddDataProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddDataProviderTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/AddDataProviderTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddDataProviderTx(ctx, req.(*MsgAddDataProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveDataProviderTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveDataProvider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveDataProviderTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/RemoveDataProviderTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveDataProviderTx(ctx, req.(*MsgRemoveDataProvider))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetSubmissionCountTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetSubmissionCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetSubmissionCountTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/SetSubmissionCountTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetSubmissionCountTx(ctx, req.(*MsgSetSubmissionCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetHeartbeatTriggerTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetHeartbeatTrigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetHeartbeatTriggerTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/SetHeartbeatTriggerTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetHeartbeatTriggerTx(ctx, req.(*MsgSetHeartbeatTrigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDeviationThresholdTriggerTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetDeviationThresholdTrigger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDeviationThresholdTriggerTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/SetDeviationThresholdTriggerTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDeviationThresholdTriggerTx(ctx, req.(*MsgSetDeviationThresholdTrigger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetFeedRewardTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetFeedReward)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetFeedRewardTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/SetFeedRewardTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetFeedRewardTx(ctx, req.(*MsgSetFeedReward))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestNewRoundTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestNewRound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestNewRoundTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/RequestNewRoundTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestNewRoundTx(ctx, req.(*MsgRequestNewRound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FeedOwnershipTransferTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFeedOwnershipTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FeedOwnershipTransferTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/FeedOwnershipTransferTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FeedOwnershipTransferTx(ctx, req.(*MsgFeedOwnershipTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAccountTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAccountTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/AddAccountTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAccountTx(ctx, req.(*MsgAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EditAccountTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EditAccountTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Msg/EditAccountTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EditAccountTx(ctx, req.(*MsgEditAccount))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ollo.prices.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BandPricesData",
			Handler:    _Msg_BandPricesData_Handler,
		},
		{
			MethodName: "SubmitFeedDataTx",
			Handler:    _Msg_SubmitFeedDataTx_Handler,
		},
		{
			MethodName: "AddModuleOwnerTx",
			Handler:    _Msg_AddModuleOwnerTx_Handler,
		},
		{
			MethodName: "ModuleOwnershipTransferTx",
			Handler:    _Msg_ModuleOwnershipTransferTx_Handler,
		},
		{
			MethodName: "AddFeedTx",
			Handler:    _Msg_AddFeedTx_Handler,
		},
		{
			MethodName: "AddDataProviderTx",
			Handler:    _Msg_AddDataProviderTx_Handler,
		},
		{
			MethodName: "RemoveDataProviderTx",
			Handler:    _Msg_RemoveDataProviderTx_Handler,
		},
		{
			MethodName: "SetSubmissionCountTx",
			Handler:    _Msg_SetSubmissionCountTx_Handler,
		},
		{
			MethodName: "SetHeartbeatTriggerTx",
			Handler:    _Msg_SetHeartbeatTriggerTx_Handler,
		},
		{
			MethodName: "SetDeviationThresholdTriggerTx",
			Handler:    _Msg_SetDeviationThresholdTriggerTx_Handler,
		},
		{
			MethodName: "SetFeedRewardTx",
			Handler:    _Msg_SetFeedRewardTx_Handler,
		},
		{
			MethodName: "RequestNewRoundTx",
			Handler:    _Msg_RequestNewRoundTx_Handler,
		},
		{
			MethodName: "FeedOwnershipTransferTx",
			Handler:    _Msg_FeedOwnershipTransferTx_Handler,
		},
		{
			MethodName: "AddAccountTx",
			Handler:    _Msg_AddAccountTx_Handler,
		},
		{
			MethodName: "EditAccountTx",
			Handler:    _Msg_EditAccountTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ollo/prices/v1/tx.proto",
}

func (m *MsgBandPricesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBandPricesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBandPricesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0x52
	}
	if m.ExecuteGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExecuteGas))
		i--
		dAtA[i] = 0x48
	}
	if m.PrepareGas != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PrepareGas))
		i--
		dAtA[i] = 0x40
	}
	if len(m.FeeLimit) > 0 {
		for iNdEx := len(m.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeLimit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MinCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MinCount))
		i--
		dAtA[i] = 0x30
	}
	if m.AskCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AskCount))
		i--
		dAtA[i] = 0x28
	}
	if m.Calldata != nil {
		{
			size, err := m.Calldata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OracleScriptID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OracleScriptID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBandPricesDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBandPricesDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBandPricesDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgModuleOwnershipTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgModuleOwnershipTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgModuleOwnershipTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewModuleOwnerPubKey) > 0 {
		i -= len(m.NewModuleOwnerPubKey)
		copy(dAtA[i:], m.NewModuleOwnerPubKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewModuleOwnerPubKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewModuleOwnerAddress) > 0 {
		i -= len(m.NewModuleOwnerAddress)
		copy(dAtA[i:], m.NewModuleOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewModuleOwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssignerAddress) > 0 {
		i -= len(m.AssignerAddress)
		copy(dAtA[i:], m.AssignerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AssignerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FeedReward != nil {
		{
			size, err := m.FeedReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ModuleOwnerAddress) > 0 {
		i -= len(m.ModuleOwnerAddress)
		copy(dAtA[i:], m.ModuleOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ModuleOwnerAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DeviationThresholdTrigger != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DeviationThresholdTrigger))
		i--
		dAtA[i] = 0x30
	}
	if m.HeartbeatTrigger != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HeartbeatTrigger))
		i--
		dAtA[i] = 0x28
	}
	if m.SubmissionCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubmissionCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DataProviders) > 0 {
		for iNdEx := len(m.DataProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeedOwner) > 0 {
		i -= len(m.FeedOwner)
		copy(dAtA[i:], m.FeedOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddDataProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddDataProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddDataProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DataProvider != nil {
		{
			size, err := m.DataProvider.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveDataProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveDataProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveDataProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetSubmissionCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSubmissionCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSubmissionCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SubmissionCount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SubmissionCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetHeartbeatTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetHeartbeatTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetHeartbeatTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HeartbeatTrigger != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HeartbeatTrigger))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetDeviationThresholdTrigger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDeviationThresholdTrigger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDeviationThresholdTrigger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DeviationThresholdTrigger != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DeviationThresholdTrigger))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetFeedReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetFeedReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetFeedReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FeedReward != nil {
		{
			size, err := m.FeedReward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeedOwnershipTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeedOwnershipTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeedOwnershipTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewFeedOwnerAddress) > 0 {
		i -= len(m.NewFeedOwnerAddress)
		copy(dAtA[i:], m.NewFeedOwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewFeedOwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFeedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFeedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFeedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxFee != nil {
		{
			size, err := m.TxFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CosmosPubKeys) > 0 {
		for iNdEx := len(m.CosmosPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CosmosPubKeys[iNdEx])
			copy(dAtA[i:], m.CosmosPubKeys[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.CosmosPubKeys[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.IsFeedDataValid {
		i--
		if m.IsFeedDataValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.ObservationFeedDataSignatures) > 0 {
		for iNdEx := len(m.ObservationFeedDataSignatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObservationFeedDataSignatures[iNdEx])
			copy(dAtA[i:], m.ObservationFeedDataSignatures[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ObservationFeedDataSignatures[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ObservationFeedData) > 0 {
		for iNdEx := len(m.ObservationFeedData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ObservationFeedData[iNdEx])
			copy(dAtA[i:], m.ObservationFeedData[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ObservationFeedData[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestNewRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestNewRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestNewRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PiggyAddress) > 0 {
		i -= len(m.PiggyAddress)
		copy(dAtA[i:], m.PiggyAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PiggyAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainlinkSigningKey) > 0 {
		i -= len(m.ChainlinkSigningKey)
		copy(dAtA[i:], m.ChainlinkSigningKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainlinkSigningKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainlinkPublicKey) > 0 {
		i -= len(m.ChainlinkPublicKey)
		copy(dAtA[i:], m.ChainlinkPublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainlinkPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PiggyAddress) > 0 {
		i -= len(m.PiggyAddress)
		copy(dAtA[i:], m.PiggyAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PiggyAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OCRFeedDataInStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OCRFeedDataInStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OCRFeedDataInStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RoundId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x18
	}
	if m.DeserializedOCRReport != nil {
		{
			size, err := m.DeserializedOCRReport.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.FeedData != nil {
		{
			size, err := m.FeedData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgBandPricesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OracleScriptID != 0 {
		n += 1 + sovTx(uint64(m.OracleScriptID))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Calldata != nil {
		l = m.Calldata.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AskCount != 0 {
		n += 1 + sovTx(uint64(m.AskCount))
	}
	if m.MinCount != 0 {
		n += 1 + sovTx(uint64(m.MinCount))
	}
	if len(m.FeeLimit) > 0 {
		for _, e := range m.FeeLimit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.PrepareGas != 0 {
		n += 1 + sovTx(uint64(m.PrepareGas))
	}
	if m.ExecuteGas != 0 {
		n += 1 + sovTx(uint64(m.ExecuteGas))
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBandPricesDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgModuleOwnershipTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewModuleOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewModuleOwnerPubKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DataProviders) > 0 {
		for _, e := range m.DataProviders {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.SubmissionCount != 0 {
		n += 1 + sovTx(uint64(m.SubmissionCount))
	}
	if m.HeartbeatTrigger != 0 {
		n += 1 + sovTx(uint64(m.HeartbeatTrigger))
	}
	if m.DeviationThresholdTrigger != 0 {
		n += 1 + sovTx(uint64(m.DeviationThresholdTrigger))
	}
	l = len(m.ModuleOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeedReward != nil {
		l = m.FeedReward.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddDataProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DataProvider != nil {
		l = m.DataProvider.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveDataProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetSubmissionCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SubmissionCount != 0 {
		n += 1 + sovTx(uint64(m.SubmissionCount))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetHeartbeatTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HeartbeatTrigger != 0 {
		n += 1 + sovTx(uint64(m.HeartbeatTrigger))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetDeviationThresholdTrigger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DeviationThresholdTrigger != 0 {
		n += 1 + sovTx(uint64(m.DeviationThresholdTrigger))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetFeedReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.FeedReward != nil {
		l = m.FeedReward.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFeedOwnershipTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewFeedOwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFeedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ObservationFeedData) > 0 {
		for _, b := range m.ObservationFeedData {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.ObservationFeedDataSignatures) > 0 {
		for _, b := range m.ObservationFeedDataSignatures {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.IsFeedDataValid {
		n += 2
	}
	if len(m.CosmosPubKeys) > 0 {
		for _, b := range m.CosmosPubKeys {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.TxFee != nil {
		l = m.TxFee.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestNewRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainlinkPublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainlinkSigningKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PiggyAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEditAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PiggyAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *OCRFeedDataInStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeedData != nil {
		l = m.FeedData.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DeserializedOCRReport != nil {
		l = m.DeserializedOCRReport.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovTx(uint64(m.RoundId))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgBandPricesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBandPricesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBandPricesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleScriptID", wireType)
			}
			m.OracleScriptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OracleScriptID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Calldata == nil {
				m.Calldata = &BandPricesCallData{}
			}
			if err := m.Calldata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
			}
			m.AskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AskCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
			}
			m.MinCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeLimit = append(m.FeeLimit, types.Coin{})
			if err := m.FeeLimit[len(m.FeeLimit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
			}
			m.PrepareGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
			}
			m.ExecuteGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecuteGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBandPricesDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBandPricesDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBandPricesDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgModuleOwnershipTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgModuleOwnershipTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgModuleOwnershipTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignerAddress = append(m.AssignerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AssignerAddress == nil {
				m.AssignerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewModuleOwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewModuleOwnerAddress = append(m.NewModuleOwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.NewModuleOwnerAddress == nil {
				m.NewModuleOwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewModuleOwnerPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewModuleOwnerPubKey = append(m.NewModuleOwnerPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.NewModuleOwnerPubKey == nil {
				m.NewModuleOwnerPubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedOwner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedOwner = append(m.FeedOwner[:0], dAtA[iNdEx:postIndex]...)
			if m.FeedOwner == nil {
				m.FeedOwner = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataProviders = append(m.DataProviders, &DataProvider{})
			if err := m.DataProviders[len(m.DataProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionCount", wireType)
			}
			m.SubmissionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmissionCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTrigger", wireType)
			}
			m.HeartbeatTrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTrigger |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationThresholdTrigger", wireType)
			}
			m.DeviationThresholdTrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationThresholdTrigger |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleOwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleOwnerAddress = append(m.ModuleOwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ModuleOwnerAddress == nil {
				m.ModuleOwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedReward == nil {
				m.FeedReward = &FeedRewardSchema{}
			}
			if err := m.FeedReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddDataProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddDataProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddDataProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataProvider == nil {
				m.DataProvider = &DataProvider{}
			}
			if err := m.DataProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveDataProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveDataProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveDataProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSubmissionCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSubmissionCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSubmissionCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionCount", wireType)
			}
			m.SubmissionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmissionCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetHeartbeatTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetHeartbeatTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetHeartbeatTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatTrigger", wireType)
			}
			m.HeartbeatTrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatTrigger |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDeviationThresholdTrigger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDeviationThresholdTrigger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDeviationThresholdTrigger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviationThresholdTrigger", wireType)
			}
			m.DeviationThresholdTrigger = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeviationThresholdTrigger |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetFeedReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetFeedReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetFeedReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedReward == nil {
				m.FeedReward = &FeedRewardSchema{}
			}
			if err := m.FeedReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeedOwnershipTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeedOwnershipTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeedOwnershipTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFeedOwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewFeedOwnerAddress = append(m.NewFeedOwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.NewFeedOwnerAddress == nil {
				m.NewFeedOwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFeedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFeedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFeedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationFeedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservationFeedData = append(m.ObservationFeedData, make([]byte, postIndex-iNdEx))
			copy(m.ObservationFeedData[len(m.ObservationFeedData)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationFeedDataSignatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservationFeedDataSignatures = append(m.ObservationFeedDataSignatures, make([]byte, postIndex-iNdEx))
			copy(m.ObservationFeedDataSignatures[len(m.ObservationFeedDataSignatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFeedDataValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFeedDataValid = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosPubKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CosmosPubKeys = append(m.CosmosPubKeys, make([]byte, postIndex-iNdEx))
			copy(m.CosmosPubKeys[len(m.CosmosPubKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxFee == nil {
				m.TxFee = &types.Coin{}
			}
			if err := m.TxFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestNewRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestNewRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestNewRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer[:0], dAtA[iNdEx:postIndex]...)
			if m.Signer == nil {
				m.Signer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainlinkPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainlinkPublicKey = append(m.ChainlinkPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainlinkPublicKey == nil {
				m.ChainlinkPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainlinkSigningKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainlinkSigningKey = append(m.ChainlinkSigningKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainlinkSigningKey == nil {
				m.ChainlinkSigningKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiggyAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PiggyAddress = append(m.PiggyAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.PiggyAddress == nil {
				m.PiggyAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PiggyAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PiggyAddress = append(m.PiggyAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.PiggyAddress == nil {
				m.PiggyAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OCRFeedDataInStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OCRFeedDataInStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OCRFeedDataInStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedData == nil {
				m.FeedData = &MsgFeedData{}
			}
			if err := m.FeedData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeserializedOCRReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeserializedOCRReport == nil {
				m.DeserializedOCRReport = &OCRAbiEncoded{}
			}
			if err := m.DeserializedOCRReport.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
