// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/prices/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryBandPricesRequest struct {
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryBandPricesRequest) Reset()         { *m = QueryBandPricesRequest{} }
func (m *QueryBandPricesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBandPricesRequest) ProtoMessage()    {}
func (*QueryBandPricesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{2}
}
func (m *QueryBandPricesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandPricesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandPricesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandPricesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandPricesRequest.Merge(m, src)
}
func (m *QueryBandPricesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandPricesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandPricesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandPricesRequest proto.InternalMessageInfo

func (m *QueryBandPricesRequest) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type QueryBandPricesResponse struct {
	Result *BandPricesResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryBandPricesResponse) Reset()         { *m = QueryBandPricesResponse{} }
func (m *QueryBandPricesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBandPricesResponse) ProtoMessage()    {}
func (*QueryBandPricesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{3}
}
func (m *QueryBandPricesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBandPricesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBandPricesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBandPricesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBandPricesResponse.Merge(m, src)
}
func (m *QueryBandPricesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBandPricesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBandPricesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBandPricesResponse proto.InternalMessageInfo

func (m *QueryBandPricesResponse) GetResult() *BandPricesResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type QueryLastBandPricesIdRequest struct {
}

func (m *QueryLastBandPricesIdRequest) Reset()         { *m = QueryLastBandPricesIdRequest{} }
func (m *QueryLastBandPricesIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastBandPricesIdRequest) ProtoMessage()    {}
func (*QueryLastBandPricesIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{4}
}
func (m *QueryLastBandPricesIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastBandPricesIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastBandPricesIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastBandPricesIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastBandPricesIdRequest.Merge(m, src)
}
func (m *QueryLastBandPricesIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastBandPricesIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastBandPricesIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastBandPricesIdRequest proto.InternalMessageInfo

type QueryLastBandPricesIdResponse struct {
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryLastBandPricesIdResponse) Reset()         { *m = QueryLastBandPricesIdResponse{} }
func (m *QueryLastBandPricesIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastBandPricesIdResponse) ProtoMessage()    {}
func (*QueryLastBandPricesIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{5}
}
func (m *QueryLastBandPricesIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastBandPricesIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastBandPricesIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastBandPricesIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastBandPricesIdResponse.Merge(m, src)
}
func (m *QueryLastBandPricesIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastBandPricesIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastBandPricesIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastBandPricesIdResponse proto.InternalMessageInfo

func (m *QueryLastBandPricesIdResponse) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type QueryFeedByIdRequest struct {
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
}

func (m *QueryFeedByIdRequest) Reset()         { *m = QueryFeedByIdRequest{} }
func (m *QueryFeedByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeedByIdRequest) ProtoMessage()    {}
func (*QueryFeedByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{6}
}
func (m *QueryFeedByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedByIdRequest.Merge(m, src)
}
func (m *QueryFeedByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedByIdRequest proto.InternalMessageInfo

func (m *QueryFeedByIdRequest) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

type QueryFeedByIdResponse struct {
	Feed *MsgFeed `protobuf:"bytes,1,opt,name=feed,proto3" json:"feed,omitempty"`
}

func (m *QueryFeedByIdResponse) Reset()         { *m = QueryFeedByIdResponse{} }
func (m *QueryFeedByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeedByIdResponse) ProtoMessage()    {}
func (*QueryFeedByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{7}
}
func (m *QueryFeedByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedByIdResponse.Merge(m, src)
}
func (m *QueryFeedByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedByIdResponse proto.InternalMessageInfo

func (m *QueryFeedByIdResponse) GetFeed() *MsgFeed {
	if m != nil {
		return m.Feed
	}
	return nil
}

type QueryModuleOwnerRequest struct {
}

func (m *QueryModuleOwnerRequest) Reset()         { *m = QueryModuleOwnerRequest{} }
func (m *QueryModuleOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleOwnerRequest) ProtoMessage()    {}
func (*QueryModuleOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{8}
}
func (m *QueryModuleOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleOwnerRequest.Merge(m, src)
}
func (m *QueryModuleOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleOwnerRequest proto.InternalMessageInfo

type QueryModuleOwnerResponse struct {
	ModuleOwner []*MsgModuleOwner `protobuf:"bytes,1,rep,name=moduleOwner,proto3" json:"moduleOwner,omitempty"`
}

func (m *QueryModuleOwnerResponse) Reset()         { *m = QueryModuleOwnerResponse{} }
func (m *QueryModuleOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleOwnerResponse) ProtoMessage()    {}
func (*QueryModuleOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{9}
}
func (m *QueryModuleOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleOwnerResponse.Merge(m, src)
}
func (m *QueryModuleOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleOwnerResponse proto.InternalMessageInfo

func (m *QueryModuleOwnerResponse) GetModuleOwner() []*MsgModuleOwner {
	if m != nil {
		return m.ModuleOwner
	}
	return nil
}

type QueryRoundDataRequest struct {
	FeedId     string             `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	RoundId    uint64             `protobuf:"varint,2,opt,name=roundId,proto3" json:"roundId,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRoundDataRequest) Reset()         { *m = QueryRoundDataRequest{} }
func (m *QueryRoundDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRoundDataRequest) ProtoMessage()    {}
func (*QueryRoundDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{10}
}
func (m *QueryRoundDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoundDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoundDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoundDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoundDataRequest.Merge(m, src)
}
func (m *QueryRoundDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoundDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoundDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoundDataRequest proto.InternalMessageInfo

func (m *QueryRoundDataRequest) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *QueryRoundDataRequest) GetRoundId() uint64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *QueryRoundDataRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryRoundDataResponse struct {
	RoundData  []*RoundData        `protobuf:"bytes,1,rep,name=roundData,proto3" json:"roundData,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRoundDataResponse) Reset()         { *m = QueryRoundDataResponse{} }
func (m *QueryRoundDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRoundDataResponse) ProtoMessage()    {}
func (*QueryRoundDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{11}
}
func (m *QueryRoundDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRoundDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRoundDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRoundDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRoundDataResponse.Merge(m, src)
}
func (m *QueryRoundDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRoundDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRoundDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRoundDataResponse proto.InternalMessageInfo

func (m *QueryRoundDataResponse) GetRoundData() []*RoundData {
	if m != nil {
		return m.RoundData
	}
	return nil
}

func (m *QueryRoundDataResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLatestRoundDataRequest struct {
	FeedId string `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
}

func (m *QueryLatestRoundDataRequest) Reset()         { *m = QueryLatestRoundDataRequest{} }
func (m *QueryLatestRoundDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRoundDataRequest) ProtoMessage()    {}
func (*QueryLatestRoundDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{12}
}
func (m *QueryLatestRoundDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRoundDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRoundDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRoundDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRoundDataRequest.Merge(m, src)
}
func (m *QueryLatestRoundDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRoundDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRoundDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRoundDataRequest proto.InternalMessageInfo

func (m *QueryLatestRoundDataRequest) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

type QueryLatestRoundDataResponse struct {
	RoundData []*RoundData `protobuf:"bytes,1,rep,name=roundData,proto3" json:"roundData,omitempty"`
}

func (m *QueryLatestRoundDataResponse) Reset()         { *m = QueryLatestRoundDataResponse{} }
func (m *QueryLatestRoundDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestRoundDataResponse) ProtoMessage()    {}
func (*QueryLatestRoundDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{13}
}
func (m *QueryLatestRoundDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestRoundDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestRoundDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestRoundDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestRoundDataResponse.Merge(m, src)
}
func (m *QueryLatestRoundDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestRoundDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestRoundDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestRoundDataResponse proto.InternalMessageInfo

func (m *QueryLatestRoundDataResponse) GetRoundData() []*RoundData {
	if m != nil {
		return m.RoundData
	}
	return nil
}

type RoundData struct {
	FeedId   string         `protobuf:"bytes,1,opt,name=feedId,proto3" json:"feedId,omitempty"`
	FeedData *OCRAbiEncoded `protobuf:"bytes,2,opt,name=feedData,proto3" json:"feedData,omitempty"`
}

func (m *RoundData) Reset()         { *m = RoundData{} }
func (m *RoundData) String() string { return proto.CompactTextString(m) }
func (*RoundData) ProtoMessage()    {}
func (*RoundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{14}
}
func (m *RoundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoundData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoundData.Merge(m, src)
}
func (m *RoundData) XXX_Size() int {
	return m.Size()
}
func (m *RoundData) XXX_DiscardUnknown() {
	xxx_messageInfo_RoundData.DiscardUnknown(m)
}

var xxx_messageInfo_RoundData proto.InternalMessageInfo

func (m *RoundData) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *RoundData) GetFeedData() *OCRAbiEncoded {
	if m != nil {
		return m.FeedData
	}
	return nil
}

type QueryAccountRequest struct {
	AccountAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=accountAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"accountAddress,omitempty"`
}

func (m *QueryAccountRequest) Reset()         { *m = QueryAccountRequest{} }
func (m *QueryAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountRequest) ProtoMessage()    {}
func (*QueryAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{15}
}
func (m *QueryAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountRequest.Merge(m, src)
}
func (m *QueryAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountRequest proto.InternalMessageInfo

func (m *QueryAccountRequest) GetAccountAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.AccountAddress
	}
	return nil
}

type QueryAccountResponse struct {
	Account *MsgAccount `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryAccountResponse) Reset()         { *m = QueryAccountResponse{} }
func (m *QueryAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountResponse) ProtoMessage()    {}
func (*QueryAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{16}
}
func (m *QueryAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountResponse.Merge(m, src)
}
func (m *QueryAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountResponse proto.InternalMessageInfo

func (m *QueryAccountResponse) GetAccount() *MsgAccount {
	if m != nil {
		return m.Account
	}
	return nil
}

type QueryFeedRewardAvailStrategiesRequest struct {
}

func (m *QueryFeedRewardAvailStrategiesRequest) Reset()         { *m = QueryFeedRewardAvailStrategiesRequest{} }
func (m *QueryFeedRewardAvailStrategiesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeedRewardAvailStrategiesRequest) ProtoMessage()    {}
func (*QueryFeedRewardAvailStrategiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{17}
}
func (m *QueryFeedRewardAvailStrategiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedRewardAvailStrategiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedRewardAvailStrategiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedRewardAvailStrategiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedRewardAvailStrategiesRequest.Merge(m, src)
}
func (m *QueryFeedRewardAvailStrategiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedRewardAvailStrategiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedRewardAvailStrategiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedRewardAvailStrategiesRequest proto.InternalMessageInfo

type QueryFeedRewardAvailStrategiesResponse struct {
	AvailStrategies []string `protobuf:"bytes,1,rep,name=availStrategies,proto3" json:"availStrategies,omitempty"`
}

func (m *QueryFeedRewardAvailStrategiesResponse) Reset() {
	*m = QueryFeedRewardAvailStrategiesResponse{}
}
func (m *QueryFeedRewardAvailStrategiesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeedRewardAvailStrategiesResponse) ProtoMessage()    {}
func (*QueryFeedRewardAvailStrategiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8377aabfc0d40fd, []int{18}
}
func (m *QueryFeedRewardAvailStrategiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeedRewardAvailStrategiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeedRewardAvailStrategiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeedRewardAvailStrategiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeedRewardAvailStrategiesResponse.Merge(m, src)
}
func (m *QueryFeedRewardAvailStrategiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeedRewardAvailStrategiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeedRewardAvailStrategiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeedRewardAvailStrategiesResponse proto.InternalMessageInfo

func (m *QueryFeedRewardAvailStrategiesResponse) GetAvailStrategies() []string {
	if m != nil {
		return m.AvailStrategies
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ollo.prices.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ollo.prices.v1.QueryParamsResponse")
	proto.RegisterType((*QueryBandPricesRequest)(nil), "ollo.prices.v1.QueryBandPricesRequest")
	proto.RegisterType((*QueryBandPricesResponse)(nil), "ollo.prices.v1.QueryBandPricesResponse")
	proto.RegisterType((*QueryLastBandPricesIdRequest)(nil), "ollo.prices.v1.QueryLastBandPricesIdRequest")
	proto.RegisterType((*QueryLastBandPricesIdResponse)(nil), "ollo.prices.v1.QueryLastBandPricesIdResponse")
	proto.RegisterType((*QueryFeedByIdRequest)(nil), "ollo.prices.v1.QueryFeedByIdRequest")
	proto.RegisterType((*QueryFeedByIdResponse)(nil), "ollo.prices.v1.QueryFeedByIdResponse")
	proto.RegisterType((*QueryModuleOwnerRequest)(nil), "ollo.prices.v1.QueryModuleOwnerRequest")
	proto.RegisterType((*QueryModuleOwnerResponse)(nil), "ollo.prices.v1.QueryModuleOwnerResponse")
	proto.RegisterType((*QueryRoundDataRequest)(nil), "ollo.prices.v1.QueryRoundDataRequest")
	proto.RegisterType((*QueryRoundDataResponse)(nil), "ollo.prices.v1.QueryRoundDataResponse")
	proto.RegisterType((*QueryLatestRoundDataRequest)(nil), "ollo.prices.v1.QueryLatestRoundDataRequest")
	proto.RegisterType((*QueryLatestRoundDataResponse)(nil), "ollo.prices.v1.QueryLatestRoundDataResponse")
	proto.RegisterType((*RoundData)(nil), "ollo.prices.v1.RoundData")
	proto.RegisterType((*QueryAccountRequest)(nil), "ollo.prices.v1.QueryAccountRequest")
	proto.RegisterType((*QueryAccountResponse)(nil), "ollo.prices.v1.QueryAccountResponse")
	proto.RegisterType((*QueryFeedRewardAvailStrategiesRequest)(nil), "ollo.prices.v1.QueryFeedRewardAvailStrategiesRequest")
	proto.RegisterType((*QueryFeedRewardAvailStrategiesResponse)(nil), "ollo.prices.v1.QueryFeedRewardAvailStrategiesResponse")
}

func init() { proto.RegisterFile("ollo/prices/v1/query.proto", fileDescriptor_d8377aabfc0d40fd) }

var fileDescriptor_d8377aabfc0d40fd = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x26, 0xc1, 0xc5, 0x2f, 0x28, 0x0d, 0x93, 0x34, 0x71, 0xb6, 0xb5, 0x13, 0xb6, 0x89,
	0xe3, 0xa6, 0xc9, 0x2e, 0x0e, 0x94, 0xc2, 0x05, 0x61, 0x53, 0x02, 0x96, 0x5a, 0x35, 0x6c, 0x0f,
	0x08, 0x84, 0x88, 0xc6, 0xde, 0xa9, 0x59, 0xb1, 0xd9, 0x71, 0x76, 0xd7, 0x69, 0xa3, 0x28, 0x17,
	0x2e, 0xbd, 0x41, 0x11, 0xb7, 0xf2, 0xa7, 0x20, 0xee, 0x3d, 0x56, 0xe2, 0xc2, 0x29, 0x42, 0x09,
	0x7f, 0x05, 0x27, 0xb4, 0x33, 0x6f, 0xfd, 0x63, 0xbc, 0xb6, 0x83, 0x7a, 0xf2, 0xee, 0xbc, 0xef,
	0x7b, 0xef, 0x7b, 0xb3, 0xf3, 0xbe, 0x31, 0xe8, 0xdc, 0xf3, 0xb8, 0xd5, 0x0a, 0xdc, 0x06, 0x0b,
	0xad, 0xa3, 0xb2, 0x75, 0xd8, 0x66, 0xc1, 0xb1, 0xd9, 0x0a, 0x78, 0xc4, 0xc9, 0x6c, 0x1c, 0x33,
	0x65, 0xcc, 0x3c, 0x2a, 0xeb, 0x0b, 0x4d, 0xde, 0xe4, 0x22, 0x64, 0xc5, 0x4f, 0x12, 0xa5, 0xdf,
	0x68, 0x72, 0xde, 0xf4, 0x98, 0x45, 0x5b, 0xae, 0x45, 0x7d, 0x9f, 0x47, 0x34, 0x72, 0xb9, 0x1f,
	0x62, 0x74, 0xb3, 0xc1, 0xc3, 0x03, 0x1e, 0x5a, 0x75, 0x1a, 0x32, 0x99, 0xdc, 0x3a, 0x2a, 0xd7,
	0x59, 0x44, 0xcb, 0x56, 0x8b, 0x36, 0x5d, 0x5f, 0x80, 0x11, 0x7b, 0x5d, 0xd1, 0xd2, 0xa2, 0x01,
	0x3d, 0x48, 0x12, 0x2d, 0x2b, 0xc1, 0x3a, 0xf5, 0x1d, 0x0c, 0x2d, 0x29, 0xa1, 0xe8, 0xe9, 0xb0,
	0x84, 0xb2, 0x15, 0x11, 0x34, 0x16, 0x80, 0x7c, 0x19, 0xeb, 0xd9, 0x13, 0x55, 0x6c, 0x76, 0xd8,
	0x66, 0x61, 0x64, 0x7c, 0x01, 0xf3, 0x7d, 0xab, 0x61, 0x8b, 0xfb, 0x21, 0x23, 0x65, 0xc8, 0x48,
	0x35, 0x39, 0x6d, 0x55, 0x2b, 0xcd, 0xec, 0xcc, 0x9b, 0xbd, 0x7b, 0x23, 0xc1, 0xd5, 0xe9, 0x97,
	0x67, 0x2b, 0x13, 0x36, 0x02, 0x8d, 0xbb, 0xb0, 0x28, 0x32, 0x55, 0xa9, 0xef, 0xec, 0x09, 0x1c,
	0xd6, 0x20, 0x79, 0x80, 0x40, 0x3e, 0xee, 0xbb, 0x8e, 0x48, 0x38, 0x65, 0x67, 0x71, 0xa5, 0xe6,
	0x18, 0x8f, 0x60, 0x69, 0x80, 0x88, 0x32, 0x3e, 0x84, 0x4c, 0xc0, 0xc2, 0xb6, 0x17, 0xa1, 0x8c,
	0x55, 0xb3, 0xff, 0x13, 0x99, 0x7d, 0x9c, 0xb6, 0x17, 0xd9, 0x88, 0x37, 0x0a, 0x70, 0x43, 0x24,
	0xbd, 0x4f, 0xc3, 0xa8, 0x0b, 0xaa, 0x39, 0x49, 0xdf, 0x1f, 0x43, 0x7e, 0x48, 0x1c, 0x4b, 0x8f,
	0x11, 0x6d, 0xc2, 0x82, 0xe0, 0xef, 0x32, 0xe6, 0x54, 0x8f, 0x3b, 0x79, 0xc9, 0x22, 0x64, 0x1e,
	0x33, 0xe6, 0xd4, 0x24, 0x25, 0x6b, 0xe3, 0x9b, 0x71, 0x0f, 0xae, 0x29, 0x78, 0xac, 0x73, 0x1b,
	0xa6, 0x63, 0x08, 0x36, 0xb8, 0xa4, 0x36, 0xf8, 0x20, 0x6c, 0xc6, 0x14, 0x5b, 0x80, 0x8c, 0x65,
	0xdc, 0xaa, 0x07, 0xdc, 0x69, 0x7b, 0xec, 0xe1, 0x13, 0x9f, 0x05, 0x49, 0x43, 0xdf, 0x42, 0x6e,
	0x30, 0x84, 0x35, 0x3e, 0x81, 0x99, 0x83, 0xee, 0x72, 0x4e, 0x5b, 0x9d, 0x2a, 0xcd, 0xec, 0x14,
	0x52, 0x4a, 0xf5, 0x92, 0x7b, 0x29, 0xc6, 0x2f, 0x1a, 0xea, 0xb7, 0x79, 0xdb, 0x77, 0xee, 0xd1,
	0x88, 0x8e, 0x69, 0x98, 0xe4, 0xe0, 0x4a, 0x10, 0x63, 0x6b, 0x4e, 0x6e, 0x72, 0x55, 0x2b, 0x4d,
	0xdb, 0xc9, 0x2b, 0xd9, 0x05, 0xe8, 0x8e, 0x42, 0x6e, 0x4a, 0xf4, 0x5d, 0x34, 0xe5, 0xdc, 0x98,
	0xf1, 0xdc, 0x98, 0x72, 0x28, 0x71, 0x6e, 0xcc, 0x3d, 0xda, 0x64, 0x58, 0xcd, 0xee, 0x61, 0x1a,
	0x2f, 0x34, 0x3c, 0x71, 0x3d, 0x9a, 0xb0, 0xe1, 0xbb, 0x90, 0x0d, 0x92, 0x45, 0x6c, 0x77, 0x59,
	0x6d, 0xb7, 0xcb, 0xea, 0x62, 0xc9, 0xe7, 0x7d, 0xda, 0x26, 0x85, 0xb6, 0x8d, 0xb1, 0xda, 0x64,
	0xd5, 0x3e, 0x71, 0x77, 0xe0, 0x3a, 0x9e, 0xaf, 0x28, 0xd6, 0x7d, 0xc9, 0x5d, 0x33, 0xbe, 0xea,
	0x1c, 0x5b, 0x85, 0xf6, 0x9a, 0x8d, 0x19, 0xdf, 0x41, 0xb6, 0xb3, 0x3e, 0xf4, 0x9b, 0x7d, 0x04,
	0x6f, 0xc6, 0x4f, 0x22, 0xb9, 0xec, 0x3d, 0xaf, 0x26, 0x7f, 0xf8, 0xa9, 0x5d, 0xa9, 0xbb, 0x9f,
	0xf9, 0x0d, 0xee, 0x30, 0xc7, 0xee, 0xc0, 0x8d, 0x16, 0xfa, 0x48, 0xa5, 0xd1, 0xe0, 0x6d, 0x3f,
	0x4a, 0xfa, 0xfc, 0x1a, 0x66, 0xa9, 0x5c, 0xa9, 0x38, 0x4e, 0xc0, 0x42, 0xe9, 0x27, 0x6f, 0x55,
	0xcb, 0xff, 0x9e, 0xad, 0x6c, 0x37, 0xdd, 0xe8, 0xfb, 0x76, 0xdd, 0x6c, 0xf0, 0x03, 0x0b, 0x5d,
	0x53, 0xfe, 0x6c, 0x87, 0xce, 0x0f, 0x56, 0x74, 0xdc, 0x62, 0xa1, 0x59, 0x69, 0x34, 0x90, 0x68,
	0x2b, 0x89, 0x8c, 0xfb, 0x38, 0x81, 0x9d, 0x8a, 0xb8, 0x45, 0xef, 0xc3, 0x15, 0x44, 0xe2, 0x4c,
	0xe9, 0x29, 0x07, 0x3d, 0x21, 0x25, 0x50, 0x63, 0x03, 0xd6, 0x3b, 0xf3, 0x69, 0xb3, 0x27, 0x34,
	0x70, 0x2a, 0x47, 0xd4, 0xf5, 0x1e, 0x45, 0x01, 0x8d, 0x58, 0xd3, 0xed, 0x98, 0x99, 0x61, 0x43,
	0x71, 0x1c, 0x10, 0x85, 0x94, 0xe0, 0x2a, 0xed, 0x0f, 0x89, 0x2f, 0x96, 0xb5, 0xd5, 0xe5, 0x9d,
	0x3f, 0x00, 0xde, 0x10, 0x49, 0xc9, 0x21, 0x64, 0xa4, 0xb9, 0x12, 0x43, 0x55, 0x3d, 0x68, 0xde,
	0xfa, 0xcd, 0x91, 0x18, 0x29, 0xc3, 0x28, 0xfc, 0xf8, 0xe7, 0x3f, 0xbf, 0x4e, 0xe6, 0xc8, 0xa2,
	0x95, 0x7a, 0xdd, 0x90, 0x9f, 0x34, 0x98, 0x53, 0x6d, 0x94, 0x14, 0x53, 0x33, 0x0f, 0x58, 0xbb,
	0xbe, 0x31, 0x16, 0x87, 0x2a, 0x6e, 0x09, 0x15, 0x37, 0xc9, 0x3b, 0x56, 0xca, 0xbd, 0x66, 0x9d,
	0x74, 0xad, 0xf6, 0x94, 0xfc, 0xa6, 0xc1, 0x9c, 0x6a, 0xcb, 0x64, 0x2b, 0xb5, 0xd0, 0x10, 0x77,
	0xd7, 0xb7, 0x2f, 0x89, 0x46, 0x71, 0x9b, 0x42, 0xdc, 0x1a, 0x31, 0x52, 0xc5, 0x79, 0x34, 0x8c,
	0xf6, 0xc5, 0xda, 0xbe, 0xeb, 0x90, 0xe7, 0x1a, 0xcc, 0xf6, 0xbb, 0x0e, 0x59, 0x4f, 0xad, 0xa6,
	0xce, 0xbc, 0x5e, 0x1c, 0x07, 0x43, 0x35, 0x96, 0x50, 0x73, 0x8b, 0x6c, 0xa8, 0x6a, 0xe2, 0x61,
	0xb3, 0x4e, 0xe4, 0xac, 0x9e, 0x5a, 0x27, 0xe8, 0xa7, 0xa7, 0xe4, 0x85, 0x06, 0x57, 0x15, 0xc3,
	0x20, 0xb7, 0x87, 0xec, 0x40, 0x9a, 0x1b, 0xe9, 0x5b, 0x97, 0x03, 0xa3, 0xbe, 0x2d, 0xa1, 0xaf,
	0x48, 0xd6, 0x46, 0xeb, 0xf3, 0x04, 0x9d, 0x3c, 0xd3, 0x12, 0x67, 0xf0, 0xbc, 0x9e, 0xeb, 0x85,
	0xa4, 0x9f, 0x9c, 0xc1, 0x8b, 0x4d, 0x2f, 0x8d, 0x07, 0xa2, 0xb0, 0xbc, 0x10, 0xb6, 0x44, 0xae,
	0xa9, 0xc2, 0xb8, 0xa8, 0xf8, 0x4c, 0x83, 0xb7, 0x7b, 0xee, 0xe0, 0x5d, 0xe9, 0x79, 0x6b, 0xa9,
	0xe9, 0x95, 0x6b, 0x5d, 0x5f, 0x1f, 0x83, 0x42, 0x05, 0xeb, 0x42, 0xc1, 0x0a, 0xc9, 0x8f, 0xdc,
	0x1a, 0xf2, 0xb3, 0x06, 0x73, 0xbd, 0xde, 0x55, 0xf3, 0x1f, 0x73, 0x92, 0x3e, 0xcc, 0xfd, 0x7e,
	0xaa, 0xaf, 0x8d, 0x06, 0xa1, 0x8c, 0x77, 0x85, 0x8c, 0x4d, 0x52, 0x52, 0x65, 0xa0, 0xdb, 0x59,
	0x27, 0xfd, 0x5e, 0x7a, 0x4a, 0x7e, 0xd7, 0xf0, 0xe2, 0x49, 0xb7, 0xb5, 0x63, 0x72, 0x67, 0xe8,
	0x06, 0x8c, 0x72, 0x4b, 0xfd, 0x83, 0xff, 0x4b, 0xbb, 0xd4, 0x19, 0x0b, 0x04, 0xd7, 0x0a, 0x51,
	0x5c, 0x75, 0xfb, 0xe5, 0x79, 0x41, 0x7b, 0x75, 0x5e, 0xd0, 0xfe, 0x3e, 0x2f, 0x68, 0xcf, 0x2f,
	0x0a, 0x13, 0xaf, 0x2e, 0x0a, 0x13, 0x7f, 0x5d, 0x14, 0x26, 0xbe, 0x99, 0x17, 0xf4, 0xa7, 0x49,
	0x02, 0x71, 0xa9, 0xd4, 0x33, 0xe2, 0x0f, 0xf1, 0x7b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x28,
	0xe8, 0x85, 0xec, 0x0c, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// BandPricesResult defines a rpc handler method for MsgBandPricesData.
	BandPricesResult(ctx context.Context, in *QueryBandPricesRequest, opts ...grpc.CallOption) (*QueryBandPricesResponse, error)
	// LastBandPricesId query the last BandPrices result id
	LastBandPricesId(ctx context.Context, in *QueryLastBandPricesIdRequest, opts ...grpc.CallOption) (*QueryLastBandPricesIdResponse, error)
	// QueryRoundData fetches given feedId from given roundId
	QueryRoundData(ctx context.Context, in *QueryRoundDataRequest, opts ...grpc.CallOption) (*QueryRoundDataResponse, error)
	// LatestRoundData fetches given feedId from last round
	LatestRoundData(ctx context.Context, in *QueryLatestRoundDataRequest, opts ...grpc.CallOption) (*QueryLatestRoundDataResponse, error)
	// QueryAllModuleOwner fetches all module owners
	QueryAllModuleOwner(ctx context.Context, in *QueryModuleOwnerRequest, opts ...grpc.CallOption) (*QueryModuleOwnerResponse, error)
	// QueryFeedById fetches a feed from its ID
	QueryFeedByFeedId(ctx context.Context, in *QueryFeedByIdRequest, opts ...grpc.CallOption) (*QueryFeedByIdResponse, error)
	// QueryAccountInfo fetches account info from an address
	QueryAccountInfo(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error)
	// QueryFeedRewardAvailStrategy returns the reward strategy for feeds
	QueryFeedRewardAvailStrategy(ctx context.Context, in *QueryFeedRewardAvailStrategiesRequest, opts ...grpc.CallOption) (*QueryFeedRewardAvailStrategiesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandPricesResult(ctx context.Context, in *QueryBandPricesRequest, opts ...grpc.CallOption) (*QueryBandPricesResponse, error) {
	out := new(QueryBandPricesResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/BandPricesResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBandPricesId(ctx context.Context, in *QueryLastBandPricesIdRequest, opts ...grpc.CallOption) (*QueryLastBandPricesIdResponse, error) {
	out := new(QueryLastBandPricesIdResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/LastBandPricesId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryRoundData(ctx context.Context, in *QueryRoundDataRequest, opts ...grpc.CallOption) (*QueryRoundDataResponse, error) {
	out := new(QueryRoundDataResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/QueryRoundData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestRoundData(ctx context.Context, in *QueryLatestRoundDataRequest, opts ...grpc.CallOption) (*QueryLatestRoundDataResponse, error) {
	out := new(QueryLatestRoundDataResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/LatestRoundData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllModuleOwner(ctx context.Context, in *QueryModuleOwnerRequest, opts ...grpc.CallOption) (*QueryModuleOwnerResponse, error) {
	out := new(QueryModuleOwnerResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/QueryAllModuleOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryFeedByFeedId(ctx context.Context, in *QueryFeedByIdRequest, opts ...grpc.CallOption) (*QueryFeedByIdResponse, error) {
	out := new(QueryFeedByIdResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/QueryFeedByFeedId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAccountInfo(ctx context.Context, in *QueryAccountRequest, opts ...grpc.CallOption) (*QueryAccountResponse, error) {
	out := new(QueryAccountResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/QueryAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryFeedRewardAvailStrategy(ctx context.Context, in *QueryFeedRewardAvailStrategiesRequest, opts ...grpc.CallOption) (*QueryFeedRewardAvailStrategiesResponse, error) {
	out := new(QueryFeedRewardAvailStrategiesResponse)
	err := c.cc.Invoke(ctx, "/ollo.prices.v1.Query/QueryFeedRewardAvailStrategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// BandPricesResult defines a rpc handler method for MsgBandPricesData.
	BandPricesResult(context.Context, *QueryBandPricesRequest) (*QueryBandPricesResponse, error)
	// LastBandPricesId query the last BandPrices result id
	LastBandPricesId(context.Context, *QueryLastBandPricesIdRequest) (*QueryLastBandPricesIdResponse, error)
	// QueryRoundData fetches given feedId from given roundId
	QueryRoundData(context.Context, *QueryRoundDataRequest) (*QueryRoundDataResponse, error)
	// LatestRoundData fetches given feedId from last round
	LatestRoundData(context.Context, *QueryLatestRoundDataRequest) (*QueryLatestRoundDataResponse, error)
	// QueryAllModuleOwner fetches all module owners
	QueryAllModuleOwner(context.Context, *QueryModuleOwnerRequest) (*QueryModuleOwnerResponse, error)
	// QueryFeedById fetches a feed from its ID
	QueryFeedByFeedId(context.Context, *QueryFeedByIdRequest) (*QueryFeedByIdResponse, error)
	// QueryAccountInfo fetches account info from an address
	QueryAccountInfo(context.Context, *QueryAccountRequest) (*QueryAccountResponse, error)
	// QueryFeedRewardAvailStrategy returns the reward strategy for feeds
	QueryFeedRewardAvailStrategy(context.Context, *QueryFeedRewardAvailStrategiesRequest) (*QueryFeedRewardAvailStrategiesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BandPricesResult(ctx context.Context, req *QueryBandPricesRequest) (*QueryBandPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandPricesResult not implemented")
}
func (*UnimplementedQueryServer) LastBandPricesId(ctx context.Context, req *QueryLastBandPricesIdRequest) (*QueryLastBandPricesIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBandPricesId not implemented")
}
func (*UnimplementedQueryServer) QueryRoundData(ctx context.Context, req *QueryRoundDataRequest) (*QueryRoundDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoundData not implemented")
}
func (*UnimplementedQueryServer) LatestRoundData(ctx context.Context, req *QueryLatestRoundDataRequest) (*QueryLatestRoundDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestRoundData not implemented")
}
func (*UnimplementedQueryServer) QueryAllModuleOwner(ctx context.Context, req *QueryModuleOwnerRequest) (*QueryModuleOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllModuleOwner not implemented")
}
func (*UnimplementedQueryServer) QueryFeedByFeedId(ctx context.Context, req *QueryFeedByIdRequest) (*QueryFeedByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeedByFeedId not implemented")
}
func (*UnimplementedQueryServer) QueryAccountInfo(ctx context.Context, req *QueryAccountRequest) (*QueryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccountInfo not implemented")
}
func (*UnimplementedQueryServer) QueryFeedRewardAvailStrategy(ctx context.Context, req *QueryFeedRewardAvailStrategiesRequest) (*QueryFeedRewardAvailStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFeedRewardAvailStrategy not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandPricesResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandPricesResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/BandPricesResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandPricesResult(ctx, req.(*QueryBandPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBandPricesId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastBandPricesIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBandPricesId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/LastBandPricesId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBandPricesId(ctx, req.(*QueryLastBandPricesIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryRoundData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRoundDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryRoundData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/QueryRoundData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryRoundData(ctx, req.(*QueryRoundDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestRoundData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestRoundDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestRoundData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/LatestRoundData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestRoundData(ctx, req.(*QueryLatestRoundDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllModuleOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllModuleOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/QueryAllModuleOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllModuleOwner(ctx, req.(*QueryModuleOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryFeedByFeedId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryFeedByFeedId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/QueryFeedByFeedId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryFeedByFeedId(ctx, req.(*QueryFeedByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/QueryAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAccountInfo(ctx, req.(*QueryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryFeedRewardAvailStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeedRewardAvailStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryFeedRewardAvailStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.prices.v1.Query/QueryFeedRewardAvailStrategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryFeedRewardAvailStrategy(ctx, req.(*QueryFeedRewardAvailStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ollo.prices.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BandPricesResult",
			Handler:    _Query_BandPricesResult_Handler,
		},
		{
			MethodName: "LastBandPricesId",
			Handler:    _Query_LastBandPricesId_Handler,
		},
		{
			MethodName: "QueryRoundData",
			Handler:    _Query_QueryRoundData_Handler,
		},
		{
			MethodName: "LatestRoundData",
			Handler:    _Query_LatestRoundData_Handler,
		},
		{
			MethodName: "QueryAllModuleOwner",
			Handler:    _Query_QueryAllModuleOwner_Handler,
		},
		{
			MethodName: "QueryFeedByFeedId",
			Handler:    _Query_QueryFeedByFeedId_Handler,
		},
		{
			MethodName: "QueryAccountInfo",
			Handler:    _Query_QueryAccountInfo_Handler,
		},
		{
			MethodName: "QueryFeedRewardAvailStrategy",
			Handler:    _Query_QueryFeedRewardAvailStrategy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ollo/prices/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBandPricesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandPricesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandPricesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBandPricesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBandPricesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBandPricesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastBandPricesIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastBandPricesIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastBandPricesIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastBandPricesIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastBandPricesIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastBandPricesIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Feed != nil {
		{
			size, err := m.Feed.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ModuleOwner) > 0 {
		for iNdEx := len(m.ModuleOwner) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ModuleOwner[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRoundDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoundDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoundDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RoundId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RoundId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRoundDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRoundDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRoundDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoundData) > 0 {
		for iNdEx := len(m.RoundData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoundData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestRoundDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRoundDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRoundDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestRoundDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestRoundDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestRoundDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoundData) > 0 {
		for iNdEx := len(m.RoundData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoundData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeedData != nil {
		{
			size, err := m.FeedData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountAddress) > 0 {
		i -= len(m.AccountAddress)
		copy(dAtA[i:], m.AccountAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeedRewardAvailStrategiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedRewardAvailStrategiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedRewardAvailStrategiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeedRewardAvailStrategiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeedRewardAvailStrategiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeedRewardAvailStrategiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvailStrategies) > 0 {
		for iNdEx := len(m.AvailStrategies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvailStrategies[iNdEx])
			copy(dAtA[i:], m.AvailStrategies[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AvailStrategies[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBandPricesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryBandPricesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastBandPricesIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastBandPricesIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryFeedByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Feed != nil {
		l = m.Feed.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryModuleOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModuleOwner) > 0 {
		for _, e := range m.ModuleOwner {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRoundDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RoundId != 0 {
		n += 1 + sovQuery(uint64(m.RoundId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRoundDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoundData) > 0 {
		for _, e := range m.RoundData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestRoundDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestRoundDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoundData) > 0 {
		for _, e := range m.RoundData {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RoundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FeedData != nil {
		l = m.FeedData.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeedRewardAvailStrategiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeedRewardAvailStrategiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AvailStrategies) > 0 {
		for _, s := range m.AvailStrategies {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandPricesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandPricesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandPricesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBandPricesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBandPricesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBandPricesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &BandPricesResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastBandPricesIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastBandPricesIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastBandPricesIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastBandPricesIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastBandPricesIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastBandPricesIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Feed == nil {
				m.Feed = &MsgFeed{}
			}
			if err := m.Feed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleOwner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleOwner = append(m.ModuleOwner, &MsgModuleOwner{})
			if err := m.ModuleOwner[len(m.ModuleOwner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoundDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoundDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoundDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundId", wireType)
			}
			m.RoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRoundDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRoundDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRoundDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundData = append(m.RoundData, &RoundData{})
			if err := m.RoundData[len(m.RoundData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRoundDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRoundDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRoundDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestRoundDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestRoundDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestRoundDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundData = append(m.RoundData, &RoundData{})
			if err := m.RoundData[len(m.RoundData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeedData == nil {
				m.FeedData = &OCRAbiEncoded{}
			}
			if err := m.FeedData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAddress = append(m.AccountAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AccountAddress == nil {
				m.AccountAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &MsgAccount{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedRewardAvailStrategiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedRewardAvailStrategiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedRewardAvailStrategiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeedRewardAvailStrategiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeedRewardAvailStrategiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeedRewardAvailStrategiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailStrategies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailStrategies = append(m.AvailStrategies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
