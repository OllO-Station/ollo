// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/prices/v1/store.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeedMarket struct {
	MarketId     string                                          `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty" yaml:"market_id"`
	BaseAssetId  string                                          `protobuf:"bytes,2,opt,name=base_asset_id,json=baseAssetId,proto3" json:"base_asset_id,omitempty" yaml:"base_asset_id"`
	QuoteAssetId string                                          `protobuf:"bytes,3,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty" yaml:"quote_asset_id"`
	Sources      []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,rep,name=sources,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sources,omitempty" yaml:"sources"`
	Active       bool                                            `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty" yaml:"active"`
}

func (m *FeedMarket) Reset()         { *m = FeedMarket{} }
func (m *FeedMarket) String() string { return proto.CompactTextString(m) }
func (*FeedMarket) ProtoMessage()    {}
func (*FeedMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2cfc48c1a5c70e1, []int{0}
}
func (m *FeedMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedMarket.Merge(m, src)
}
func (m *FeedMarket) XXX_Size() int {
	return m.Size()
}
func (m *FeedMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedMarket.DiscardUnknown(m)
}

var xxx_messageInfo_FeedMarket proto.InternalMessageInfo

type FeedPostedPrice struct {
	MarketId string                                        `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty" yaml:"market_id"`
	Price    github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
	Source   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=source,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"source,omitempty" yaml:"source"`
	Expiry   time.Time                                     `protobuf:"bytes,4,opt,name=expiry,proto3,stdtime" json:"expiry"`
}

func (m *FeedPostedPrice) Reset()         { *m = FeedPostedPrice{} }
func (m *FeedPostedPrice) String() string { return proto.CompactTextString(m) }
func (*FeedPostedPrice) ProtoMessage()    {}
func (*FeedPostedPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2cfc48c1a5c70e1, []int{1}
}
func (m *FeedPostedPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedPostedPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedPostedPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedPostedPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedPostedPrice.Merge(m, src)
}
func (m *FeedPostedPrice) XXX_Size() int {
	return m.Size()
}
func (m *FeedPostedPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedPostedPrice.DiscardUnknown(m)
}

var xxx_messageInfo_FeedPostedPrice proto.InternalMessageInfo

type FeedCurrentPrice struct {
	MarketId string                                 `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty" yaml:"market_id"`
	Price    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price" yaml:"price"`
}

func (m *FeedCurrentPrice) Reset()         { *m = FeedCurrentPrice{} }
func (m *FeedCurrentPrice) String() string { return proto.CompactTextString(m) }
func (*FeedCurrentPrice) ProtoMessage()    {}
func (*FeedCurrentPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2cfc48c1a5c70e1, []int{2}
}
func (m *FeedCurrentPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedCurrentPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedCurrentPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedCurrentPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedCurrentPrice.Merge(m, src)
}
func (m *FeedCurrentPrice) XXX_Size() int {
	return m.Size()
}
func (m *FeedCurrentPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedCurrentPrice.DiscardUnknown(m)
}

var xxx_messageInfo_FeedCurrentPrice proto.InternalMessageInfo

func init() {
	proto.RegisterType((*FeedMarket)(nil), "ollo.prices.v1.FeedMarket")
	proto.RegisterType((*FeedPostedPrice)(nil), "ollo.prices.v1.FeedPostedPrice")
	proto.RegisterType((*FeedCurrentPrice)(nil), "ollo.prices.v1.FeedCurrentPrice")
}

func init() { proto.RegisterFile("ollo/prices/v1/store.proto", fileDescriptor_c2cfc48c1a5c70e1) }

var fileDescriptor_c2cfc48c1a5c70e1 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0xa6, 0x6d, 0x48, 0xb6, 0x6d, 0x28, 0x26, 0x48, 0x69, 0x0e, 0xbb, 0xd1, 0x1e, 0x50,
	0x10, 0x8a, 0xad, 0xc0, 0x0d, 0x55, 0xa0, 0x18, 0x84, 0xd4, 0x03, 0x52, 0x65, 0x95, 0x03, 0xbd,
	0x44, 0x8e, 0xbd, 0x04, 0xab, 0x71, 0xd7, 0xf5, 0xae, 0xa3, 0xe6, 0x2f, 0x7a, 0xe7, 0x07, 0xf8,
	0x00, 0x3e, 0x22, 0x12, 0x97, 0x88, 0x13, 0xe2, 0xe0, 0x36, 0xc9, 0x1f, 0xf8, 0xc8, 0x09, 0x79,
	0x77, 0x0d, 0xed, 0x0d, 0x21, 0x0e, 0x9c, 0x3c, 0x33, 0x6f, 0xde, 0x3c, 0xcd, 0xf3, 0xd8, 0xb0,
	0xcd, 0x26, 0x13, 0x66, 0xc7, 0x49, 0xe8, 0x53, 0x6e, 0x4f, 0xfb, 0x36, 0x17, 0x2c, 0xa1, 0x56,
	0x9c, 0x30, 0xc1, 0xcc, 0x46, 0x81, 0x59, 0x0a, 0xb3, 0xa6, 0xfd, 0x76, 0x73, 0xcc, 0xc6, 0x4c,
	0x42, 0x76, 0x11, 0xa9, 0xae, 0xf6, 0xbe, 0xcf, 0x78, 0xc4, 0xf8, 0x50, 0x01, 0x2a, 0xd1, 0x10,
	0x1e, 0x33, 0x36, 0x9e, 0x50, 0x5b, 0x66, 0xa3, 0xf4, 0xbd, 0x2d, 0xc2, 0x88, 0x72, 0xe1, 0x45,
	0xb1, 0x6a, 0x20, 0x57, 0x15, 0x08, 0x5f, 0x53, 0x1a, 0xbc, 0xf1, 0x92, 0x53, 0x2a, 0xcc, 0x3e,
	0xac, 0x47, 0x32, 0x1a, 0x86, 0x41, 0x0b, 0x74, 0x40, 0xb7, 0xee, 0x34, 0xf3, 0x0c, 0xef, 0xcd,
	0xbc, 0x68, 0xf2, 0x8c, 0xfc, 0x82, 0x88, 0x5b, 0x53, 0xf1, 0x61, 0x60, 0x1e, 0xc0, 0xdd, 0x91,
	0xc7, 0xe9, 0xd0, 0xe3, 0x5c, 0xd1, 0x2a, 0x92, 0xd6, 0xca, 0x33, 0xdc, 0x54, 0xb4, 0x5b, 0x30,
	0x71, 0xb7, 0x8b, 0x7c, 0x50, 0xa4, 0x87, 0x81, 0xf9, 0x02, 0x36, 0xce, 0x53, 0x26, 0x6e, 0xd0,
	0x37, 0x24, 0x7d, 0x3f, 0xcf, 0xf0, 0x03, 0x45, 0xbf, 0x8d, 0x13, 0x77, 0x47, 0x16, 0xca, 0x01,
	0x02, 0xde, 0xe1, 0x2c, 0x4d, 0x7c, 0xca, 0x5b, 0x9b, 0x9d, 0x8d, 0x6e, 0xdd, 0x39, 0xc9, 0x33,
	0xdc, 0x50, 0x4c, 0x0d, 0x90, 0x1f, 0x19, 0xee, 0x8d, 0x43, 0xf1, 0x21, 0x1d, 0x59, 0x3e, 0x8b,
	0xb4, 0x43, 0xfa, 0xd1, 0xe3, 0xc1, 0xa9, 0x2d, 0x66, 0x31, 0xe5, 0xd6, 0xc0, 0xf7, 0x07, 0x41,
	0x90, 0x50, 0xce, 0xbf, 0x7e, 0xee, 0xdd, 0xd7, 0x3e, 0xea, 0x8a, 0x33, 0x13, 0x94, 0xbb, 0xa5,
	0x94, 0xf9, 0x08, 0x56, 0x3d, 0x5f, 0x84, 0x53, 0xda, 0xda, 0xea, 0x80, 0x6e, 0xcd, 0xb9, 0x97,
	0x67, 0x78, 0x57, 0x89, 0xaa, 0x3a, 0x71, 0x75, 0x03, 0xf9, 0x52, 0x81, 0x77, 0x0b, 0x87, 0x8f,
	0x18, 0x17, 0x34, 0x38, 0x2a, 0xde, 0xe5, 0xdf, 0xd8, 0x7c, 0x0c, 0xb7, 0xe4, 0x1d, 0x68, 0x7b,
	0x9f, 0xcf, 0x33, 0x6c, 0x7c, 0xcf, 0xf0, 0xc3, 0x3f, 0xd8, 0xeb, 0x15, 0xf5, 0xf3, 0x0c, 0xef,
	0xa8, 0xe1, 0x72, 0x08, 0x71, 0xd5, 0x30, 0xf3, 0x1c, 0x56, 0xd5, 0x4a, 0xda, 0xf6, 0x77, 0xbf,
	0xf7, 0x50, 0xf5, 0x7f, 0xe7, 0x9d, 0x16, 0x32, 0x0f, 0x60, 0x95, 0x5e, 0xc4, 0x61, 0x32, 0x6b,
	0x6d, 0x76, 0x40, 0x77, 0xfb, 0x49, 0xdb, 0x52, 0x37, 0x6a, 0x95, 0x37, 0x6a, 0x1d, 0x97, 0x37,
	0xea, 0xd4, 0x8a, 0x2d, 0x2f, 0xaf, 0x30, 0x70, 0x35, 0x87, 0x7c, 0x04, 0x70, 0xaf, 0x70, 0xf3,
	0x65, 0x9a, 0x24, 0xf4, 0x4c, 0xfc, 0x5f, 0x76, 0x3a, 0x6f, 0xe7, 0x4b, 0x64, 0x2c, 0x96, 0xc8,
	0xb8, 0x5e, 0x22, 0xf0, 0x69, 0x85, 0xc0, 0x7c, 0x85, 0xc0, 0x62, 0x85, 0xc0, 0xf5, 0x0a, 0x81,
	0xcb, 0x35, 0x32, 0x16, 0x6b, 0x64, 0x7c, 0x5b, 0x23, 0xe3, 0xe4, 0xf1, 0x0d, 0xa1, 0xe2, 0x23,
	0xef, 0x71, 0xe1, 0x89, 0x90, 0x9d, 0xc9, 0xc4, 0xbe, 0x28, 0xff, 0x07, 0x52, 0x71, 0x54, 0x95,
	0xd6, 0x3c, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x89, 0x8c, 0x7e, 0x2b, 0x04, 0x00, 0x00,
}

func (this *FeedMarket) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FeedMarket)
	if !ok {
		that2, ok := that.(FeedMarket)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FeedMarket")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FeedMarket but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FeedMarket but is not nil && this == nil")
	}
	if this.MarketId != that1.MarketId {
		return fmt.Errorf("MarketId this(%v) Not Equal that(%v)", this.MarketId, that1.MarketId)
	}
	if this.BaseAssetId != that1.BaseAssetId {
		return fmt.Errorf("BaseAssetId this(%v) Not Equal that(%v)", this.BaseAssetId, that1.BaseAssetId)
	}
	if this.QuoteAssetId != that1.QuoteAssetId {
		return fmt.Errorf("QuoteAssetId this(%v) Not Equal that(%v)", this.QuoteAssetId, that1.QuoteAssetId)
	}
	if len(this.Sources) != len(that1.Sources) {
		return fmt.Errorf("Sources this(%v) Not Equal that(%v)", len(this.Sources), len(that1.Sources))
	}
	for i := range this.Sources {
		if this.Sources[i] != that1.Sources[i] {
			return fmt.Errorf("Sources this[%v](%v) Not Equal that[%v](%v)", i, this.Sources[i], i, that1.Sources[i])
		}
	}
	if this.Active != that1.Active {
		return fmt.Errorf("Active this(%v) Not Equal that(%v)", this.Active, that1.Active)
	}
	return nil
}
func (this *FeedMarket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedMarket)
	if !ok {
		that2, ok := that.(FeedMarket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarketId != that1.MarketId {
		return false
	}
	if this.BaseAssetId != that1.BaseAssetId {
		return false
	}
	if this.QuoteAssetId != that1.QuoteAssetId {
		return false
	}
	if len(this.Sources) != len(that1.Sources) {
		return false
	}
	for i := range this.Sources {
		if this.Sources[i] != that1.Sources[i] {
			return false
		}
	}
	if this.Active != that1.Active {
		return false
	}
	return true
}
func (this *FeedPostedPrice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FeedPostedPrice)
	if !ok {
		that2, ok := that.(FeedPostedPrice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FeedPostedPrice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FeedPostedPrice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FeedPostedPrice but is not nil && this == nil")
	}
	if this.MarketId != that1.MarketId {
		return fmt.Errorf("MarketId this(%v) Not Equal that(%v)", this.MarketId, that1.MarketId)
	}
	if !this.Price.Equal(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	if this.Source != that1.Source {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return fmt.Errorf("Expiry this(%v) Not Equal that(%v)", this.Expiry, that1.Expiry)
	}
	return nil
}
func (this *FeedPostedPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedPostedPrice)
	if !ok {
		that2, ok := that.(FeedPostedPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarketId != that1.MarketId {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if !this.Expiry.Equal(that1.Expiry) {
		return false
	}
	return true
}
func (this *FeedCurrentPrice) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FeedCurrentPrice)
	if !ok {
		that2, ok := that.(FeedCurrentPrice)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FeedCurrentPrice")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FeedCurrentPrice but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FeedCurrentPrice but is not nil && this == nil")
	}
	if this.MarketId != that1.MarketId {
		return fmt.Errorf("MarketId this(%v) Not Equal that(%v)", this.MarketId, that1.MarketId)
	}
	if !this.Price.Equal(that1.Price) {
		return fmt.Errorf("Price this(%v) Not Equal that(%v)", this.Price, that1.Price)
	}
	return nil
}
func (this *FeedCurrentPrice) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeedCurrentPrice)
	if !ok {
		that2, ok := that.(FeedCurrentPrice)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MarketId != that1.MarketId {
		return false
	}
	if !this.Price.Equal(that1.Price) {
		return false
	}
	return true
}
func (m *FeedMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Sources) > 0 {
		for iNdEx := len(m.Sources) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sources[iNdEx])
			copy(dAtA[i:], m.Sources[iNdEx])
			i = encodeVarintStore(dAtA, i, uint64(len(m.Sources[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.QuoteAssetId) > 0 {
		i -= len(m.QuoteAssetId)
		copy(dAtA[i:], m.QuoteAssetId)
		i = encodeVarintStore(dAtA, i, uint64(len(m.QuoteAssetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseAssetId) > 0 {
		i -= len(m.BaseAssetId)
		copy(dAtA[i:], m.BaseAssetId)
		i = encodeVarintStore(dAtA, i, uint64(len(m.BaseAssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintStore(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedPostedPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedPostedPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedPostedPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStore(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintStore(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintStore(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedCurrentPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedCurrentPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedCurrentPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStore(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintStore(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStore(dAtA []byte, offset int, v uint64) int {
	offset -= sovStore(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeedMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.BaseAssetId)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = len(m.QuoteAssetId)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	if len(m.Sources) > 0 {
		for _, s := range m.Sources {
			l = len(s)
			n += 1 + l + sovStore(uint64(l))
		}
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *FeedPostedPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovStore(uint64(l))
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovStore(uint64(l))
	return n
}

func (m *FeedCurrentPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovStore(uint64(l))
	}
	l = m.Price.Size()
	n += 1 + l + sovStore(uint64(l))
	return n
}

func sovStore(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStore(x uint64) (n int) {
	return sovStore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeedMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedPostedPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedPostedPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedPostedPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedCurrentPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedCurrentPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedCurrentPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStore
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStore
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStore
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStore        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStore          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStore = fmt.Errorf("proto: unexpected end of group")
)
