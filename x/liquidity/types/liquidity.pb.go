// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/liquidity.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderType specifies the type of order
type OrderType int32

const (
	// ORDER_TYPE_UNSPECIFIED defines an unknown order type
	OrderTypeUnspecified OrderType = 0
	// ORDER_TYPE_MARKET defines a market order type
	OrderTypeMarket OrderType = 1
	// ORDER_TYPE_LIMIT defines a limit order type
	OrderTypeLimit OrderType = 2
	// ORDER_TYPE_MM defines a market maker order type
	OrderTypeMM OrderType = 3
)

var OrderType_name = map[int32]string{
	0: "ORDER_TYPE_UNSPECIFIED",
	1: "ORDER_TYPE_MARKET",
	2: "ORDER_TYPE_LIMIT",
	3: "ORDER_TYPE_MM",
}

var OrderType_value = map[string]int32{
	"ORDER_TYPE_UNSPECIFIED": 0,
	"ORDER_TYPE_MARKET":      1,
	"ORDER_TYPE_LIMIT":       2,
	"ORDER_TYPE_MM":          3,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{0}
}

// OrderSide specifies the side of order
type OrderSide int32

const (
	// ORDER_SIDE_UNSPECIFIED defines an unknown order side
	OrderSideUnspecified OrderSide = 0
	// ORDER_SIDE_BUY defines a buy order side
	OrderSideBuy OrderSide = 1
	// ORDER_SIDE_SELL defines a sell order side
	OrderSideSell OrderSide = 2
)

var OrderSide_name = map[int32]string{
	0: "ORDER_SIDE_UNSPECIFIED",
	1: "ORDER_SIDE_BUY",
	2: "ORDER_SIDE_SELL",
}

var OrderSide_value = map[string]int32{
	"ORDER_SIDE_UNSPECIFIED": 0,
	"ORDER_SIDE_BUY":         1,
	"ORDER_SIDE_SELL":        2,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}

func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{1}
}

type OrderStatus int32

const (
	// ORDER_STATUS_UNSPECIFIED defines an unknown order status
	OrderStatusUnspecified OrderStatus = 0
	// ORDER_STATUS_OPEN defines an open order status
	OrderStatusOpen OrderStatus = 1
	// ORDER_STATUS_CLOSED defines a closed order status
	OrderStatusClosed OrderStatus = 2
	// ORDER_STATUS_CANCELLED defines a cancelled order status
	OrderStatusCancelled OrderStatus = 3
	// ORDER_STATUS_EXPIRED defines an expired order status
	OrderStatusExpired OrderStatus = 4
	// ORDER_STATUS_REJECTED defines a rejected order status
	OrderStatusRejected OrderStatus = 5
)

var OrderStatus_name = map[int32]string{
	0: "ORDER_STATUS_UNSPECIFIED",
	1: "ORDER_STATUS_OPEN",
	2: "ORDER_STATUS_CLOSED",
	3: "ORDER_STATUS_CANCELLED",
	4: "ORDER_STATUS_EXPIRED",
	5: "ORDER_STATUS_REJECTED",
}

var OrderStatus_value = map[string]int32{
	"ORDER_STATUS_UNSPECIFIED": 0,
	"ORDER_STATUS_OPEN":        1,
	"ORDER_STATUS_CLOSED":      2,
	"ORDER_STATUS_CANCELLED":   3,
	"ORDER_STATUS_EXPIRED":     4,
	"ORDER_STATUS_REJECTED":    5,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{2}
}

// DepositMsgState defines the state of deposit message that contains state
// information as it is processed in the next batch or batches.
type DepositMsgState struct {
	// height where this message is appended to the batch
	MsgHeight int64 `protobuf:"varint,1,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty" yaml:"msg_height"`
	// index of this deposit message in this liquidity pool
	MsgIndex uint64 `protobuf:"varint,2,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty" yaml:"msg_index"`
	// true if executed on this batch, false if not executed
	Executed bool `protobuf:"varint,3,opt,name=executed,proto3" json:"executed,omitempty" yaml:"executed"`
	// true if executed successfully on this batch, false if failed
	Succeeded bool `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty" yaml:"succeeded"`
	// true if ready to be deleted on kvstore, false if not ready to be deleted
	ToBeDeleted bool `protobuf:"varint,5,opt,name=to_be_deleted,json=toBeDeleted,proto3" json:"to_be_deleted,omitempty" yaml:"to_be_deleted"`
	// MsgDepositWithinBatch
	Msg *MsgDepositWithinBatch `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty" yaml:"msg"`
}

func (m *DepositMsgState) Reset()         { *m = DepositMsgState{} }
func (m *DepositMsgState) String() string { return proto.CompactTextString(m) }
func (*DepositMsgState) ProtoMessage()    {}
func (*DepositMsgState) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{0}
}
func (m *DepositMsgState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositMsgState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositMsgState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositMsgState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositMsgState.Merge(m, src)
}
func (m *DepositMsgState) XXX_Size() int {
	return m.Size()
}
func (m *DepositMsgState) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositMsgState.DiscardUnknown(m)
}

var xxx_messageInfo_DepositMsgState proto.InternalMessageInfo

// WithdrawMsgState defines the state of the withdraw message that contains
// state information as the message is processed in the next batch or batches.
type WithdrawMsgState struct {
	// height where this message is appended to the batch
	MsgHeight int64 `protobuf:"varint,1,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty" yaml:"msg_height"`
	// index of this withdraw message in this liquidity pool
	MsgIndex uint64 `protobuf:"varint,2,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty" yaml:"msg_index"`
	// true if executed on this batch, false if not executed
	Executed bool `protobuf:"varint,3,opt,name=executed,proto3" json:"executed,omitempty" yaml:"executed"`
	// true if executed successfully on this batch, false if failed
	Succeeded bool `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty" yaml:"succeeded"`
	// true if ready to be deleted on kvstore, false if not ready to be deleted
	ToBeDeleted bool `protobuf:"varint,5,opt,name=to_be_deleted,json=toBeDeleted,proto3" json:"to_be_deleted,omitempty" yaml:"to_be_deleted"`
	// MsgWithdrawWithinBatch
	Msg *MsgWithdrawWithinBatch `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty" yaml:"msg"`
}

func (m *WithdrawMsgState) Reset()         { *m = WithdrawMsgState{} }
func (m *WithdrawMsgState) String() string { return proto.CompactTextString(m) }
func (*WithdrawMsgState) ProtoMessage()    {}
func (*WithdrawMsgState) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{1}
}
func (m *WithdrawMsgState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawMsgState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawMsgState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawMsgState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawMsgState.Merge(m, src)
}
func (m *WithdrawMsgState) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawMsgState) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawMsgState.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawMsgState proto.InternalMessageInfo

// SwapMsgState defines the state of the swap message that contains state
// information as the message is processed in the next batch or batches.
type SwapMsgState struct {
	// height where this message is appended to the batch
	MsgHeight int64 `protobuf:"varint,1,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty" yaml:"msg_height"`
	// index of this swap message in this liquidity pool
	MsgIndex uint64 `protobuf:"varint,2,opt,name=msg_index,json=msgIndex,proto3" json:"msg_index,omitempty" yaml:"msg_index"`
	// true if executed on this batch, false if not executed
	Executed bool `protobuf:"varint,3,opt,name=executed,proto3" json:"executed,omitempty" yaml:"executed"`
	// true if executed successfully on this batch, false if failed
	Succeeded bool `protobuf:"varint,4,opt,name=succeeded,proto3" json:"succeeded,omitempty" yaml:"succeeded"`
	// true if ready to be deleted on kvstore, false if not ready to be deleted
	ToBeDeleted bool `protobuf:"varint,5,opt,name=to_be_deleted,json=toBeDeleted,proto3" json:"to_be_deleted,omitempty" yaml:"to_be_deleted"`
	// swap orders are cancelled when current height is equal to or higher than
	// ExpiryHeight
	OrderExpiryHeight int64 `protobuf:"varint,6,opt,name=order_expiry_height,json=orderExpiryHeight,proto3" json:"order_expiry_height,omitempty" yaml:"order_expiry_height"`
	// offer coin exchanged until now
	ExchangedOfferCoin types.Coin `protobuf:"bytes,7,opt,name=exchanged_offer_coin,json=exchangedOfferCoin,proto3" json:"exchanged_offer_coin" yaml:"exchanged_offer_coin"`
	// offer coin currently remaining to be exchanged
	RemainingOfferCoin types.Coin `protobuf:"bytes,8,opt,name=remaining_offer_coin,json=remainingOfferCoin,proto3" json:"remaining_offer_coin" yaml:"remaining_offer_coin"`
	// reserve fee for pays fee in half offer coin
	ReservedOfferCoinFee types.Coin `protobuf:"bytes,9,opt,name=reserved_offer_coin_fee,json=reservedOfferCoinFee,proto3" json:"reserved_offer_coin_fee" yaml:"reserved_offer_coin_fee"`
	// MsgSwapWithinBatch
	Msg *MsgSwapWithinBatch `protobuf:"bytes,10,opt,name=msg,proto3" json:"msg,omitempty" yaml:"msg"`
}

func (m *SwapMsgState) Reset()         { *m = SwapMsgState{} }
func (m *SwapMsgState) String() string { return proto.CompactTextString(m) }
func (*SwapMsgState) ProtoMessage()    {}
func (*SwapMsgState) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{2}
}
func (m *SwapMsgState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapMsgState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapMsgState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapMsgState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapMsgState.Merge(m, src)
}
func (m *SwapMsgState) XXX_Size() int {
	return m.Size()
}
func (m *SwapMsgState) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapMsgState.DiscardUnknown(m)
}

var xxx_messageInfo_SwapMsgState proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ollo.liquidity.v1.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("ollo.liquidity.v1.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("ollo.liquidity.v1.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterType((*DepositMsgState)(nil), "ollo.liquidity.v1.DepositMsgState")
	proto.RegisterType((*WithdrawMsgState)(nil), "ollo.liquidity.v1.WithdrawMsgState")
	proto.RegisterType((*SwapMsgState)(nil), "ollo.liquidity.v1.SwapMsgState")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/liquidity.proto", fileDescriptor_84a7f6914c75d21c) }

var fileDescriptor_84a7f6914c75d21c = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xbf, 0x73, 0xe3, 0x44,
	0x14, 0xb6, 0x9c, 0x5c, 0x48, 0xf6, 0x2e, 0x89, 0xac, 0x38, 0x39, 0x23, 0x18, 0x59, 0x08, 0xb8,
	0x31, 0x29, 0x6c, 0x72, 0x5c, 0xc1, 0x30, 0x34, 0xb1, 0xad, 0x03, 0xdf, 0xd9, 0x71, 0x46, 0x76,
	0x06, 0x8e, 0xc6, 0xa3, 0x48, 0x2f, 0xf2, 0x82, 0xa4, 0x15, 0xd2, 0x3a, 0x67, 0xff, 0x07, 0x8c,
	0x2a, 0x28, 0x28, 0x55, 0xf1, 0x97, 0x50, 0x30, 0x93, 0xf2, 0x4a, 0x2a, 0x0f, 0x24, 0x15, 0x43,
	0xe7, 0xbf, 0x80, 0xd1, 0x0f, 0xcb, 0xf2, 0xc5, 0x90, 0xa1, 0xbf, 0x6e, 0xf7, 0xbd, 0xef, 0x7b,
	0xdf, 0xbe, 0x4f, 0xda, 0x37, 0x8b, 0xde, 0x23, 0xa6, 0x49, 0x6a, 0x26, 0xfe, 0x7e, 0x84, 0x75,
	0x4c, 0x27, 0xb5, 0xcb, 0xa3, 0xc5, 0xa6, 0xea, 0xb8, 0x84, 0x12, 0xae, 0x10, 0x42, 0xaa, 0x8b,
	0xe8, 0xe5, 0x11, 0xcf, 0xdf, 0x66, 0xd1, 0x71, 0x0c, 0xe7, 0xdf, 0xbd, 0x9d, 0x73, 0x54, 0xec,
	0xfe, 0x47, 0x96, 0x10, 0x33, 0xc9, 0x16, 0x0d, 0x62, 0x90, 0x68, 0x59, 0x0b, 0x57, 0x49, 0x54,
	0xd0, 0x88, 0x67, 0x11, 0xaf, 0x76, 0xae, 0x7a, 0x50, 0xbb, 0x3c, 0x3a, 0x07, 0xaa, 0x1e, 0xd5,
	0x34, 0x82, 0xed, 0x24, 0x5f, 0x36, 0x08, 0x31, 0x4c, 0xa8, 0x45, 0xbb, 0xf3, 0xd1, 0x45, 0x8d,
	0x62, 0x0b, 0x3c, 0xaa, 0x5a, 0xce, 0xbc, 0xc0, 0xeb, 0x00, 0x7d, 0xe4, 0xaa, 0x14, 0x93, 0xa4,
	0x80, 0xf4, 0x57, 0x1e, 0xed, 0x36, 0xc1, 0x21, 0x1e, 0xa6, 0x1d, 0xcf, 0xe8, 0x51, 0x95, 0x02,
	0xf7, 0x04, 0x21, 0xcb, 0x33, 0x06, 0x43, 0xc0, 0xc6, 0x90, 0x96, 0x18, 0x91, 0xa9, 0xac, 0xd5,
	0xf7, 0x67, 0xd3, 0x72, 0x61, 0xa2, 0x5a, 0xe6, 0x67, 0xd2, 0x22, 0x27, 0x29, 0x5b, 0x96, 0x67,
	0x7c, 0x19, 0xad, 0xb9, 0x23, 0x14, 0x6e, 0x06, 0xd8, 0xd6, 0x61, 0x5c, 0xca, 0x8b, 0x4c, 0x65,
	0xbd, 0x5e, 0x9c, 0x4d, 0xcb, 0xec, 0x82, 0x14, 0xa5, 0x24, 0x65, 0xd3, 0xf2, 0x8c, 0x56, 0xb8,
	0xe4, 0x6a, 0x68, 0x13, 0xc6, 0xa0, 0x8d, 0x28, 0xe8, 0xa5, 0x35, 0x91, 0xa9, 0x6c, 0xd6, 0xf7,
	0x66, 0xd3, 0xf2, 0x6e, 0xcc, 0x98, 0x67, 0x24, 0x25, 0x05, 0x71, 0x8f, 0xd1, 0x96, 0x37, 0xd2,
	0x34, 0x00, 0x1d, 0xf4, 0xd2, 0x7a, 0xc4, 0xc8, 0x68, 0xa4, 0x29, 0x49, 0x59, 0xc0, 0xb8, 0xcf,
	0xd1, 0x36, 0x25, 0x83, 0x73, 0x18, 0xe8, 0x60, 0x42, 0xa8, 0x74, 0x2f, 0xe2, 0x95, 0x66, 0xd3,
	0x72, 0x31, 0xe6, 0x2d, 0xa5, 0x25, 0xe5, 0x3e, 0x25, 0x75, 0x68, 0xc6, 0x3b, 0xee, 0x19, 0x5a,
	0xb3, 0x3c, 0xa3, 0xb4, 0x21, 0x32, 0x95, 0xfb, 0x8f, 0x2b, 0xd5, 0x5b, 0xff, 0x43, 0xb5, 0xe3,
	0x19, 0x89, 0x7f, 0x5f, 0x61, 0x3a, 0xc4, 0x76, 0x5d, 0xa5, 0xda, 0xb0, 0xbe, 0x33, 0x9b, 0x96,
	0x51, 0xda, 0xb9, 0xa4, 0x84, 0x45, 0xa4, 0xbf, 0xf3, 0x88, 0x0d, 0x41, 0xba, 0xab, 0xbe, 0x7c,
	0x63, 0xf6, 0x0a, 0xb3, 0x9f, 0x67, 0xcd, 0xfe, 0x68, 0xb5, 0xd9, 0x73, 0x03, 0xef, 0x74, 0xfb,
	0xa7, 0x0d, 0xf4, 0xa0, 0xf7, 0x52, 0x75, 0xde, 0x38, 0xbd, 0xc2, 0xe9, 0x13, 0xb4, 0x47, 0x5c,
	0x1d, 0xdc, 0x01, 0x8c, 0x1d, 0xec, 0x4e, 0xe6, 0xa6, 0x6c, 0x44, 0xa6, 0x08, 0xb3, 0x69, 0x99,
	0x8f, 0x6b, 0xac, 0x00, 0x49, 0x4a, 0x21, 0x8a, 0xca, 0x51, 0x30, 0x71, 0xc9, 0x41, 0x45, 0x18,
	0x6b, 0x43, 0xd5, 0x36, 0x40, 0x1f, 0x90, 0x8b, 0x0b, 0x70, 0x07, 0xe1, 0x94, 0x2a, 0xbd, 0x15,
	0x7d, 0xca, 0xb7, 0xab, 0xf1, 0x18, 0xab, 0x86, 0x63, 0xac, 0x9a, 0x8c, 0xb1, 0x6a, 0x83, 0x60,
	0xbb, 0xfe, 0xfe, 0xd5, 0xb4, 0x9c, 0x9b, 0x4d, 0xcb, 0xef, 0xcc, 0xdd, 0xb9, 0x5d, 0x44, 0x52,
	0xb8, 0x34, 0xdc, 0x0d, 0xa3, 0x21, 0x31, 0x54, 0x74, 0xc1, 0x52, 0xb1, 0x8d, 0x6d, 0x23, 0xab,
	0xb8, 0xf9, 0x3f, 0x15, 0x57, 0x15, 0x91, 0x14, 0x2e, 0x0d, 0x2f, 0x14, 0xc7, 0xe8, 0xa1, 0x0b,
	0x1e, 0xb8, 0x97, 0x4b, 0xa7, 0x1b, 0x5c, 0x00, 0x94, 0xb6, 0xee, 0x12, 0x7d, 0x94, 0x88, 0x0a,
	0x73, 0xd1, 0x95, 0x75, 0x24, 0xa5, 0x38, 0xcf, 0xa4, 0xb2, 0x4f, 0x01, 0xb8, 0x2f, 0xe2, 0x7b,
	0x81, 0x22, 0x95, 0x0f, 0x57, 0xdf, 0x8b, 0xf0, 0x57, 0xbf, 0xeb, 0x4e, 0x1c, 0xfe, 0xca, 0xa0,
	0xad, 0x6e, 0xf8, 0xf1, 0xfa, 0x13, 0x27, 0xbc, 0x10, 0x07, 0x5d, 0xa5, 0x29, 0x2b, 0x83, 0xfe,
	0x8b, 0x53, 0x79, 0x70, 0x76, 0xd2, 0x3b, 0x95, 0x1b, 0xad, 0xa7, 0x2d, 0xb9, 0xc9, 0xe6, 0xf8,
	0x92, 0x1f, 0x88, 0xc5, 0x14, 0x7a, 0x66, 0x7b, 0x0e, 0x68, 0xf8, 0x02, 0x83, 0xce, 0x1d, 0xa2,
	0x42, 0x86, 0xd5, 0x39, 0x56, 0x9e, 0xcb, 0x7d, 0x96, 0xe1, 0xf7, 0xfc, 0x40, 0xdc, 0x4d, 0x09,
	0x1d, 0xd5, 0xfd, 0x0e, 0x28, 0x57, 0x41, 0x6c, 0x06, 0xdb, 0x6e, 0x75, 0x5a, 0x7d, 0x36, 0xcf,
	0x73, 0x7e, 0x20, 0xee, 0xa4, 0xd0, 0x36, 0xb6, 0x30, 0xe5, 0x24, 0xb4, 0x9d, 0xad, 0xda, 0x61,
	0xd7, 0xf8, 0x5d, 0x3f, 0x10, 0xef, 0x2f, 0x2a, 0x76, 0xf8, 0xf5, 0x1f, 0x7e, 0x11, 0x72, 0x87,
	0x3f, 0xcf, 0x7b, 0xe8, 0x61, 0x3d, 0xd3, 0x43, 0xaf, 0xd5, 0xfc, 0xf7, 0x1e, 0x42, 0x68, 0xb6,
	0x87, 0x0f, 0xd0, 0x4e, 0x86, 0x55, 0x3f, 0x7b, 0xc1, 0x32, 0x3c, 0xeb, 0x07, 0xe2, 0x83, 0x14,
	0x5d, 0x1f, 0x4d, 0xb8, 0x47, 0x68, 0x37, 0x83, 0xea, 0xc9, 0xed, 0x36, 0x9b, 0xe7, 0x0b, 0x7e,
	0x20, 0x6e, 0xa7, 0xb0, 0x1e, 0x98, 0x66, 0x72, 0xae, 0xdf, 0xf2, 0x28, 0x3e, 0x6d, 0x38, 0x6d,
	0x46, 0x1e, 0xf7, 0x29, 0x2a, 0x25, 0xec, 0xfe, 0x71, 0xff, 0xac, 0xf7, 0xda, 0xd9, 0x78, 0x3f,
	0x10, 0x0f, 0x32, 0xf0, 0x95, 0x0e, 0x27, 0xcc, 0xee, 0xa9, 0x7c, 0xb2, 0xe4, 0x70, 0x4c, 0xe9,
	0x3a, 0x60, 0x73, 0x55, 0xb4, 0xb7, 0x84, 0x6d, 0xb4, 0xbb, 0x3d, 0xb9, 0xc9, 0xe6, 0xf9, 0x7d,
	0x3f, 0x10, 0x0b, 0x19, 0x74, 0xc3, 0x24, 0x1e, 0xe8, 0x19, 0xbf, 0x12, 0xfc, 0xf1, 0x49, 0x43,
	0x6e, 0xb7, 0xe5, 0x26, 0xbb, 0x96, 0xf5, 0x2b, 0xa6, 0xa8, 0xb6, 0x06, 0xa6, 0x09, 0x3a, 0xf7,
	0x31, 0x2a, 0x2e, 0xb1, 0xe4, 0xaf, 0x4f, 0x5b, 0x8a, 0xdc, 0x64, 0xd7, 0xf9, 0x03, 0x3f, 0x10,
	0xb9, 0x0c, 0x27, 0x9a, 0x0a, 0xd1, 0x48, 0xdb, 0x5f, 0x62, 0x28, 0xf2, 0x33, 0xb9, 0xd1, 0x97,
	0x9b, 0xec, 0x3d, 0xfe, 0xa1, 0x1f, 0x88, 0x7b, 0x19, 0x8a, 0x02, 0xdf, 0x82, 0x46, 0x41, 0x8f,
	0x7d, 0xac, 0x3f, 0xb9, 0xfa, 0x53, 0xc8, 0x5d, 0x5d, 0x0b, 0xcc, 0xab, 0x6b, 0x81, 0xf9, 0xe3,
	0x5a, 0x60, 0x7e, 0xbc, 0x11, 0x72, 0xaf, 0x6e, 0x84, 0xdc, 0xef, 0x37, 0x42, 0xee, 0x9b, 0x83,
	0xe8, 0x11, 0x35, 0xce, 0x3c, 0xa3, 0xe8, 0xc4, 0x01, 0xef, 0x7c, 0x23, 0x7a, 0xce, 0x7c, 0xf2,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x2e, 0xa7, 0x36, 0xd5, 0x09, 0x00, 0x00,
}

func (m *DepositMsgState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositMsgState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositMsgState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ToBeDeleted {
		i--
		if m.ToBeDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MsgIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawMsgState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawMsgState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawMsgState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ToBeDeleted {
		i--
		if m.ToBeDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MsgIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SwapMsgState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapMsgState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapMsgState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.ReservedOfferCoinFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.RemainingOfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.ExchangedOfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.OrderExpiryHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.OrderExpiryHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.ToBeDeleted {
		i--
		if m.ToBeDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Succeeded {
		i--
		if m.Succeeded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.MsgIndex != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidity(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositMsgState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgIndex))
	}
	if m.Executed {
		n += 2
	}
	if m.Succeeded {
		n += 2
	}
	if m.ToBeDeleted {
		n += 2
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovLiquidity(uint64(l))
	}
	return n
}

func (m *WithdrawMsgState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgIndex))
	}
	if m.Executed {
		n += 2
	}
	if m.Succeeded {
		n += 2
	}
	if m.ToBeDeleted {
		n += 2
	}
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovLiquidity(uint64(l))
	}
	return n
}

func (m *SwapMsgState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	if m.MsgIndex != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgIndex))
	}
	if m.Executed {
		n += 2
	}
	if m.Succeeded {
		n += 2
	}
	if m.ToBeDeleted {
		n += 2
	}
	if m.OrderExpiryHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.OrderExpiryHeight))
	}
	l = m.ExchangedOfferCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.RemainingOfferCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	l = m.ReservedOfferCoinFee.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovLiquidity(uint64(l))
	}
	return n
}

func sovLiquidity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidity(x uint64) (n int) {
	return sovLiquidity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositMsgState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositMsgState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositMsgState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBeDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToBeDeleted = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgDepositWithinBatch{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawMsgState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawMsgState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawMsgState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBeDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToBeDeleted = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgWithdrawWithinBatch{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapMsgState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapMsgState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapMsgState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIndex", wireType)
			}
			m.MsgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succeeded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succeeded = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBeDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToBeDeleted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderExpiryHeight", wireType)
			}
			m.OrderExpiryHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderExpiryHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangedOfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangedOfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingOfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingOfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedOfferCoinFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservedOfferCoinFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &MsgSwapWithinBatch{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidity = fmt.Errorf("proto: unexpected end of group")
)
