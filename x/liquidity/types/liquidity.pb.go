// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/liquidity.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DepositRequest defines a deposit request.
type DepositRequest struct {
	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty" yaml:"msg_height"`
	// depositor specifies the bech32-encoded address that makes a deposit to the pool
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	// deposit_coins specifies the amount of coins to deposit.
	DepositCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=deposit_coins,json=depositCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit_coins"`
	// accepted_coins specifies the amount of coins that are accepted.
	AcceptedCoins  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=accepted_coins,json=acceptedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"accepted_coins"`
	MintedPoolCoin types.Coin                               `protobuf:"bytes,7,opt,name=minted_pool_coin,json=mintedPoolCoin,proto3" json:"minted_pool_coin" yaml:"minted_pool_coin"`
	Status         RequestStatus                            `protobuf:"varint,8,opt,name=status,proto3,enum=ollo.liquidity.v1.RequestStatus" json:"status,omitempty" yaml:"status"`
}

func (m *DepositRequest) Reset()         { *m = DepositRequest{} }
func (m *DepositRequest) String() string { return proto.CompactTextString(m) }
func (*DepositRequest) ProtoMessage()    {}
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{0}
}
func (m *DepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRequest.Merge(m, src)
}
func (m *DepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *DepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRequest proto.InternalMessageInfo

// WithdrawRequest defines a withdraw request.
type WithdrawRequest struct {
	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
	Withdrawer string `protobuf:"bytes,4,opt,name=withdrawer,proto3" json:"withdrawer,omitempty" yaml:"withdrawer"`
	// pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
	PoolCoin types.Coin `protobuf:"bytes,5,opt,name=pool_coin,json=poolCoin,proto3" json:"pool_coin"`
	// withdrawn_coins specifies the amount of coins that are withdrawn.
	WithdrawnCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=withdrawn_coins,json=withdrawnCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawn_coins"`
	Status         RequestStatus                            `protobuf:"varint,7,opt,name=status,proto3,enum=ollo.liquidity.v1.RequestStatus" json:"status,omitempty"`
}

func (m *WithdrawRequest) Reset()         { *m = WithdrawRequest{} }
func (m *WithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawRequest) ProtoMessage()    {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84a7f6914c75d21c, []int{1}
}
func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(m, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DepositRequest)(nil), "ollo.liquidity.v1.DepositRequest")
	proto.RegisterType((*WithdrawRequest)(nil), "ollo.liquidity.v1.WithdrawRequest")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/liquidity.proto", fileDescriptor_84a7f6914c75d21c) }

var fileDescriptor_84a7f6914c75d21c = []byte{
	// 639 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0x8c, 0x9b, 0x36, 0x6d, 0x16, 0xe2, 0xb6, 0x16, 0xa8, 0x6e, 0xa5, 0xda, 0xc6, 0x12, 0x10,
	0x09, 0x6a, 0x93, 0xc2, 0x01, 0x21, 0x2e, 0x84, 0x4a, 0xc0, 0x0d, 0x19, 0x24, 0x24, 0x2e, 0x91,
	0x93, 0x5d, 0x9c, 0x15, 0x76, 0xd6, 0xf5, 0x6e, 0x5a, 0xf2, 0x00, 0xdc, 0xfb, 0x18, 0x88, 0x33,
	0x0f, 0xd1, 0x63, 0xc5, 0x89, 0x93, 0x69, 0xd3, 0x1b, 0x47, 0x3f, 0x01, 0xda, 0x1f, 0xc7, 0x51,
	0x8b, 0x80, 0x03, 0x9c, 0xb2, 0x9f, 0xe7, 0x9b, 0x6f, 0x36, 0xf3, 0x8d, 0x16, 0xdc, 0x20, 0x71,
	0x4c, 0xfc, 0x18, 0xef, 0x8f, 0x31, 0xc4, 0x6c, 0xe2, 0x1f, 0x74, 0xaa, 0xc2, 0x4b, 0x33, 0xc2,
	0x88, 0xb1, 0xce, 0x5b, 0xbc, 0xea, 0xeb, 0x41, 0x67, 0xeb, 0x5a, 0x44, 0x22, 0x22, 0x50, 0x9f,
	0x9f, 0x64, 0xe3, 0xd6, 0xe6, 0x80, 0xd0, 0x84, 0xd0, 0x9e, 0x04, 0x64, 0xa1, 0x20, 0x4b, 0x56,
	0x7e, 0x3f, 0xa4, 0xc8, 0x3f, 0xe8, 0xf4, 0x11, 0x0b, 0x3b, 0xfe, 0x80, 0xe0, 0x91, 0xc2, 0xed,
	0x88, 0x90, 0x28, 0x46, 0xbe, 0xa8, 0xfa, 0xe3, 0x77, 0x3e, 0xc3, 0x09, 0xa2, 0x2c, 0x4c, 0xd2,
	0x72, 0xc0, 0xc5, 0x06, 0x38, 0xce, 0x42, 0x86, 0x49, 0x39, 0x60, 0xfb, 0xf2, 0xff, 0x20, 0x19,
	0x44, 0x99, 0x84, 0xdd, 0x8f, 0x4b, 0x40, 0xdf, 0x43, 0x29, 0xa1, 0x98, 0x05, 0x68, 0x7f, 0x8c,
	0x28, 0x33, 0xb6, 0xc1, 0x02, 0x86, 0xa6, 0xe6, 0x68, 0xed, 0xc5, 0x6e, 0xab, 0xc8, 0xed, 0xe6,
	0x24, 0x4c, 0xe2, 0x47, 0x2e, 0x86, 0x6e, 0xb0, 0x80, 0xa1, 0x71, 0x07, 0x2c, 0xa7, 0x84, 0xc4,
	0x3d, 0x0c, 0xcd, 0x05, 0xd1, 0x63, 0x14, 0xb9, 0xad, 0xcb, 0x1e, 0x05, 0xb8, 0x41, 0x83, 0x9f,
	0x5e, 0x40, 0xe3, 0x01, 0x00, 0x09, 0x8d, 0x7a, 0x43, 0x84, 0xa3, 0x21, 0x33, 0xeb, 0x8e, 0xd6,
	0xae, 0x77, 0xaf, 0x17, 0xb9, 0xbd, 0x2e, 0xfb, 0x2b, 0xcc, 0x0d, 0x9a, 0x09, 0x8d, 0x9e, 0x8b,
	0xb3, 0xb1, 0x07, 0x9a, 0x50, 0xde, 0x89, 0x64, 0xe6, 0xa2, 0xa3, 0xb5, 0x9b, 0xdd, 0x5b, 0x45,
	0x6e, 0xaf, 0x49, 0xd2, 0x0c, 0x72, 0xbf, 0x7e, 0xd9, 0xd1, 0x95, 0x9b, 0x4f, 0x20, 0xcc, 0x10,
	0xa5, 0x41, 0x45, 0x34, 0x52, 0xd0, 0x52, 0x45, 0x8f, 0x1b, 0x4a, 0xcd, 0x25, 0xa7, 0xde, 0xbe,
	0xb2, 0xbb, 0xe9, 0x29, 0x0a, 0xb7, 0xdc, 0x53, 0x96, 0x7b, 0x4f, 0x09, 0x1e, 0x75, 0xef, 0x1d,
	0xe7, 0x76, 0xed, 0xf3, 0x77, 0xbb, 0x1d, 0x61, 0x36, 0x1c, 0xf7, 0xbd, 0x01, 0x49, 0xd4, 0xb6,
	0xd4, 0xcf, 0x0e, 0x85, 0xef, 0x7d, 0x36, 0x49, 0x11, 0x15, 0x04, 0x1a, 0x5c, 0x55, 0x0a, 0xa2,
	0x32, 0x32, 0xa0, 0x87, 0x83, 0x01, 0x4a, 0x19, 0x82, 0x4a, 0xb2, 0xf1, 0xef, 0x25, 0x5b, 0xa5,
	0x84, 0xd4, 0x84, 0x60, 0x2d, 0xc1, 0x23, 0xae, 0x28, 0xcc, 0xe7, 0xb2, 0xe6, 0xb2, 0xa3, 0xfd,
	0x5e, 0xd5, 0xe6, 0xaa, 0x45, 0x6e, 0x6f, 0xa8, 0x35, 0x5c, 0x18, 0xe0, 0x06, 0xba, 0xfc, 0xf4,
	0x92, 0x90, 0x98, 0x13, 0x8c, 0x1e, 0x68, 0x50, 0x16, 0xb2, 0x31, 0x35, 0x57, 0x1c, 0xad, 0xad,
	0xef, 0x3a, 0xde, 0xa5, 0xec, 0x7b, 0x2a, 0x3f, 0xaf, 0x44, 0x5f, 0xf7, 0xe6, 0x8f, 0xdc, 0x5e,
	0x93, 0x9c, 0xbb, 0x24, 0xc1, 0x0c, 0x25, 0x29, 0x9b, 0x14, 0xb9, 0xdd, 0x92, 0x92, 0x12, 0x71,
	0x03, 0x35, 0xd6, 0x3d, 0xaa, 0x83, 0xd5, 0x37, 0x98, 0x0d, 0x61, 0x16, 0x1e, 0x96, 0x41, 0xd4,
	0xab, 0x20, 0x8a, 0xe4, 0x6d, 0x5c, 0x48, 0xde, 0x2c, 0x65, 0xdb, 0x97, 0x53, 0x36, 0x1f, 0xa7,
	0x67, 0x00, 0x1c, 0xaa, 0xd1, 0xa8, 0xcc, 0xd3, 0xed, 0x2a, 0x84, 0x15, 0xf6, 0xab, 0x40, 0xcd,
	0x51, 0x8d, 0xc7, 0xa0, 0x59, 0x99, 0xbc, 0xf4, 0x27, 0x93, 0x17, 0xb9, 0xc9, 0xc1, 0x4a, 0x5a,
	0x7a, 0xc8, 0xc0, 0x6a, 0x39, 0x6b, 0xf4, 0xff, 0xe2, 0xa1, 0xcf, 0x34, 0x64, 0x3e, 0x1e, 0xce,
	0x36, 0xb7, 0xfc, 0x77, 0x9b, 0x2b, 0x57, 0xd2, 0x7d, 0x7d, 0x7c, 0x66, 0xd5, 0x4e, 0xcf, 0x2c,
	0xed, 0xd3, 0xd4, 0xd2, 0x8e, 0xa7, 0x96, 0x76, 0x32, 0xb5, 0xb4, 0xd3, 0xa9, 0xa5, 0x1d, 0x9d,
	0x5b, 0xb5, 0x93, 0x73, 0xab, 0xf6, 0xed, 0xdc, 0xaa, 0xbd, 0xf5, 0xe6, 0x6e, 0xc6, 0x27, 0xef,
	0x70, 0x36, 0x26, 0x23, 0x51, 0xf8, 0x1f, 0xe6, 0x5e, 0x1e, 0x71, 0xcb, 0x7e, 0x43, 0xbc, 0x3b,
	0xf7, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x06, 0x34, 0x97, 0xf4, 0x60, 0x05, 0x00, 0x00,
}

func (this *DepositRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DepositRequest)
	if !ok {
		that2, ok := that.(DepositRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DepositRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DepositRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DepositRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.PoolId != that1.PoolId {
		return fmt.Errorf("PoolId this(%v) Not Equal that(%v)", this.PoolId, that1.PoolId)
	}
	if this.MsgHeight != that1.MsgHeight {
		return fmt.Errorf("MsgHeight this(%v) Not Equal that(%v)", this.MsgHeight, that1.MsgHeight)
	}
	if this.Depositor != that1.Depositor {
		return fmt.Errorf("Depositor this(%v) Not Equal that(%v)", this.Depositor, that1.Depositor)
	}
	if len(this.DepositCoins) != len(that1.DepositCoins) {
		return fmt.Errorf("DepositCoins this(%v) Not Equal that(%v)", len(this.DepositCoins), len(that1.DepositCoins))
	}
	for i := range this.DepositCoins {
		if !this.DepositCoins[i].Equal(&that1.DepositCoins[i]) {
			return fmt.Errorf("DepositCoins this[%v](%v) Not Equal that[%v](%v)", i, this.DepositCoins[i], i, that1.DepositCoins[i])
		}
	}
	if len(this.AcceptedCoins) != len(that1.AcceptedCoins) {
		return fmt.Errorf("AcceptedCoins this(%v) Not Equal that(%v)", len(this.AcceptedCoins), len(that1.AcceptedCoins))
	}
	for i := range this.AcceptedCoins {
		if !this.AcceptedCoins[i].Equal(&that1.AcceptedCoins[i]) {
			return fmt.Errorf("AcceptedCoins this[%v](%v) Not Equal that[%v](%v)", i, this.AcceptedCoins[i], i, that1.AcceptedCoins[i])
		}
	}
	if !this.MintedPoolCoin.Equal(&that1.MintedPoolCoin) {
		return fmt.Errorf("MintedPoolCoin this(%v) Not Equal that(%v)", this.MintedPoolCoin, that1.MintedPoolCoin)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	return nil
}
func (this *DepositRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DepositRequest)
	if !ok {
		that2, ok := that.(DepositRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.PoolId != that1.PoolId {
		return false
	}
	if this.MsgHeight != that1.MsgHeight {
		return false
	}
	if this.Depositor != that1.Depositor {
		return false
	}
	if len(this.DepositCoins) != len(that1.DepositCoins) {
		return false
	}
	for i := range this.DepositCoins {
		if !this.DepositCoins[i].Equal(&that1.DepositCoins[i]) {
			return false
		}
	}
	if len(this.AcceptedCoins) != len(that1.AcceptedCoins) {
		return false
	}
	for i := range this.AcceptedCoins {
		if !this.AcceptedCoins[i].Equal(&that1.AcceptedCoins[i]) {
			return false
		}
	}
	if !this.MintedPoolCoin.Equal(&that1.MintedPoolCoin) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *WithdrawRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*WithdrawRequest)
	if !ok {
		that2, ok := that.(WithdrawRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *WithdrawRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *WithdrawRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *WithdrawRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.PoolId != that1.PoolId {
		return fmt.Errorf("PoolId this(%v) Not Equal that(%v)", this.PoolId, that1.PoolId)
	}
	if this.MsgHeight != that1.MsgHeight {
		return fmt.Errorf("MsgHeight this(%v) Not Equal that(%v)", this.MsgHeight, that1.MsgHeight)
	}
	if this.Withdrawer != that1.Withdrawer {
		return fmt.Errorf("Withdrawer this(%v) Not Equal that(%v)", this.Withdrawer, that1.Withdrawer)
	}
	if !this.PoolCoin.Equal(&that1.PoolCoin) {
		return fmt.Errorf("PoolCoin this(%v) Not Equal that(%v)", this.PoolCoin, that1.PoolCoin)
	}
	if len(this.WithdrawnCoins) != len(that1.WithdrawnCoins) {
		return fmt.Errorf("WithdrawnCoins this(%v) Not Equal that(%v)", len(this.WithdrawnCoins), len(that1.WithdrawnCoins))
	}
	for i := range this.WithdrawnCoins {
		if !this.WithdrawnCoins[i].Equal(&that1.WithdrawnCoins[i]) {
			return fmt.Errorf("WithdrawnCoins this[%v](%v) Not Equal that[%v](%v)", i, this.WithdrawnCoins[i], i, that1.WithdrawnCoins[i])
		}
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	return nil
}
func (this *WithdrawRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithdrawRequest)
	if !ok {
		that2, ok := that.(WithdrawRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.PoolId != that1.PoolId {
		return false
	}
	if this.MsgHeight != that1.MsgHeight {
		return false
	}
	if this.Withdrawer != that1.Withdrawer {
		return false
	}
	if !this.PoolCoin.Equal(&that1.PoolCoin) {
		return false
	}
	if len(this.WithdrawnCoins) != len(that1.WithdrawnCoins) {
		return false
	}
	for i := range this.WithdrawnCoins {
		if !this.WithdrawnCoins[i].Equal(&that1.WithdrawnCoins[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (m *DepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.MintedPoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.AcceptedCoins) > 0 {
		for iNdEx := len(m.AcceptedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DepositCoins) > 0 {
		for iNdEx := len(m.DepositCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.WithdrawnCoins) > 0 {
		for iNdEx := len(m.WithdrawnCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawnCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.PoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintLiquidity(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLiquidity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidity(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidity(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	if len(m.DepositCoins) > 0 {
		for _, e := range m.DepositCoins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	if len(m.AcceptedCoins) > 0 {
		for _, e := range m.AcceptedCoins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	l = m.MintedPoolCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLiquidity(uint64(m.Status))
	}
	return n
}

func (m *WithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLiquidity(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovLiquidity(uint64(m.PoolId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovLiquidity(uint64(m.MsgHeight))
	}
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovLiquidity(uint64(l))
	}
	l = m.PoolCoin.Size()
	n += 1 + l + sovLiquidity(uint64(l))
	if len(m.WithdrawnCoins) > 0 {
		for _, e := range m.WithdrawnCoins {
			l = e.Size()
			n += 1 + l + sovLiquidity(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovLiquidity(uint64(m.Status))
	}
	return n
}

func sovLiquidity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidity(x uint64) (n int) {
	return sovLiquidity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCoins = append(m.DepositCoins, types.Coin{})
			if err := m.DepositCoins[len(m.DepositCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedCoins = append(m.AcceptedCoins, types.Coin{})
			if err := m.AcceptedCoins[len(m.AcceptedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedPoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintedPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawnCoins = append(m.WithdrawnCoins, types.Coin{})
			if err := m.WithdrawnCoins[len(m.WithdrawnCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidity = fmt.Errorf("proto: unexpected end of group")
)
