// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/withdraw.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WithdrawRequest defines a withdraw request.
type WithdrawRequest struct {
	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
	Withdrawer string `protobuf:"bytes,4,opt,name=withdrawer,proto3" json:"withdrawer,omitempty" yaml:"withdrawer"`
	// pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
	PoolCoin types.Coin `protobuf:"bytes,5,opt,name=pool_coin,json=poolCoin,proto3" json:"pool_coin"`
	// withdrawn_coins specifies the amount of coins that are withdrawn.
	WithdrawnCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=withdrawn_coins,json=withdrawnCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawn_coins"`
	Status         RequestStatus                            `protobuf:"varint,7,opt,name=status,proto3,enum=ollo.liquidity.v1.RequestStatus" json:"status,omitempty"`
}

func (m *WithdrawRequest) Reset()         { *m = WithdrawRequest{} }
func (m *WithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*WithdrawRequest) ProtoMessage()    {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c229576b35e631, []int{0}
}
func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(m, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*WithdrawRequest)(nil), "ollo.liquidity.v1.WithdrawRequest")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/withdraw.proto", fileDescriptor_36c229576b35e631) }

var fileDescriptor_36c229576b35e631 = []byte{
	// 453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0xe3, 0xb6, 0xf4, 0xa8, 0x91, 0x7a, 0xba, 0xe8, 0x04, 0xb9, 0x93, 0x48, 0xa3, 0x4e,
	0x59, 0x6a, 0xd3, 0x83, 0x01, 0x21, 0x16, 0xca, 0x02, 0x03, 0x4b, 0x6e, 0x40, 0x62, 0xa9, 0x92,
	0xda, 0xb8, 0x16, 0x49, 0x5f, 0x2f, 0x76, 0x7a, 0xf4, 0x5b, 0x30, 0xf1, 0x21, 0x98, 0xf9, 0x10,
	0x1d, 0x4f, 0x4c, 0x4c, 0x07, 0xb4, 0xdf, 0x80, 0x4f, 0x80, 0xec, 0x38, 0xc7, 0x89, 0x4a, 0x4c,
	0xc9, 0xdf, 0xef, 0xff, 0x7e, 0x7e, 0xef, 0xf9, 0xe1, 0x08, 0xf2, 0x1c, 0x68, 0x2e, 0x2f, 0x2a,
	0xc9, 0xa4, 0x5e, 0xd3, 0xd5, 0x98, 0x5e, 0x4a, 0x3d, 0x67, 0x65, 0x7a, 0x49, 0x96, 0x25, 0x68,
	0xf0, 0x8f, 0x8c, 0x83, 0xdc, 0x38, 0xc8, 0x6a, 0x7c, 0x7a, 0x2c, 0x40, 0x80, 0x8d, 0x52, 0xf3,
	0x57, 0x1b, 0x4f, 0x07, 0xfb, 0xa8, 0x92, 0x5f, 0x54, 0x5c, 0x69, 0x67, 0x38, 0x99, 0x81, 0x2a,
	0x40, 0x4d, 0xeb, 0xcc, 0x5a, 0xb8, 0x50, 0x58, 0x2b, 0x9a, 0xa5, 0x8a, 0xd3, 0xd5, 0x38, 0xe3,
	0x3a, 0x1d, 0xd3, 0x19, 0xc8, 0x45, 0xc3, 0x16, 0x00, 0x22, 0xe7, 0xd4, 0xaa, 0xac, 0x7a, 0x4f,
	0xb5, 0x2c, 0xb8, 0xd2, 0x69, 0xb1, 0x6c, 0x00, 0xff, 0x1a, 0x58, 0x55, 0xa6, 0x5a, 0x82, 0x03,
	0x0c, 0x3f, 0xb7, 0xf1, 0xe1, 0x5b, 0xd7, 0x58, 0x52, 0x57, 0xe5, 0xf7, 0x71, 0x4b, 0xb2, 0x00,
	0x45, 0x28, 0xee, 0x24, 0x2d, 0xc9, 0xfc, 0x07, 0xf8, 0x60, 0x09, 0x90, 0x4f, 0x25, 0x0b, 0x5a,
	0xf6, 0xb0, 0x6b, 0xe4, 0x6b, 0xe6, 0x3f, 0xc4, 0xb8, 0x50, 0x62, 0x3a, 0xe7, 0x52, 0xcc, 0x75,
	0xd0, 0x8e, 0x50, 0xdc, 0x4e, 0x7a, 0x85, 0x12, 0xaf, 0xec, 0x81, 0xff, 0x06, 0xe3, 0x66, 0x66,
	0xbc, 0x0c, 0x3a, 0x11, 0x8a, 0x7b, 0x93, 0xd1, 0xef, 0xeb, 0xc1, 0xd1, 0x3a, 0x2d, 0xf2, 0x67,
	0xc3, 0xbf, 0xb1, 0xe1, 0xb7, 0xaf, 0xa3, 0x63, 0xd7, 0xf7, 0x0b, 0xc6, 0x4a, 0xae, 0xd4, 0xb9,
	0x2e, 0xe5, 0x42, 0x24, 0xb7, 0x00, 0xfe, 0x73, 0xdc, 0xb3, 0x65, 0x98, 0xf6, 0x83, 0x3b, 0x11,
	0x8a, 0xef, 0x9d, 0x9d, 0x10, 0x97, 0x65, 0xe6, 0x43, 0xdc, 0x7c, 0xc8, 0x4b, 0x90, 0x8b, 0x49,
	0x67, 0x73, 0x3d, 0xf0, 0x92, 0xbb, 0x26, 0xc3, 0x68, 0x5f, 0xe3, 0xc3, 0x86, 0xb5, 0xb0, 0x08,
	0x15, 0x74, 0xa3, 0xf6, 0xff, 0x19, 0x8f, 0x0c, 0xe3, 0xcb, 0x8f, 0x41, 0x2c, 0xa4, 0x9e, 0x57,
	0x19, 0x99, 0x41, 0xe1, 0x9e, 0xc7, 0x7d, 0x46, 0x8a, 0x7d, 0xa0, 0x7a, 0xbd, 0xe4, 0xca, 0x26,
	0xa8, 0xa4, 0x7f, 0x73, 0x87, 0xd5, 0xfe, 0x53, 0xdc, 0x55, 0x3a, 0xd5, 0x95, 0x0a, 0x0e, 0x22,
	0x14, 0xf7, 0xcf, 0x22, 0xb2, 0xb7, 0x35, 0xc4, 0x8d, 0xfd, 0xdc, 0xfa, 0x12, 0xe7, 0x9f, 0x3c,
	0xd9, 0xfc, 0x0a, 0xbd, 0xcd, 0x36, 0x44, 0x57, 0xdb, 0x10, 0xfd, 0xdc, 0x86, 0xe8, 0xd3, 0x2e,
	0xf4, 0xae, 0x76, 0xa1, 0xf7, 0x7d, 0x17, 0x7a, 0xef, 0xee, 0xdb, 0x9d, 0xfa, 0x78, 0x6b, 0xab,
	0x6c, 0x15, 0x59, 0xd7, 0xbe, 0xea, 0xe3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x23, 0x9a, 0x05,
	0x44, 0xbf, 0x02, 0x00, 0x00,
}

func (m *WithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.WithdrawnCoins) > 0 {
		for iNdEx := len(m.WithdrawnCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawnCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWithdraw(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.PoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintWithdraw(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintWithdraw(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWithdraw(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWithdraw(dAtA []byte, offset int, v uint64) int {
	offset -= sovWithdraw(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWithdraw(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovWithdraw(uint64(m.PoolId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovWithdraw(uint64(m.MsgHeight))
	}
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovWithdraw(uint64(l))
	}
	l = m.PoolCoin.Size()
	n += 1 + l + sovWithdraw(uint64(l))
	if len(m.WithdrawnCoins) > 0 {
		for _, e := range m.WithdrawnCoins {
			l = e.Size()
			n += 1 + l + sovWithdraw(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovWithdraw(uint64(m.Status))
	}
	return n
}

func sovWithdraw(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWithdraw(x uint64) (n int) {
	return sovWithdraw(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawnCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWithdraw
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWithdraw
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawnCoins = append(m.WithdrawnCoins, types.Coin{})
			if err := m.WithdrawnCoins[len(m.WithdrawnCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWithdraw(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWithdraw
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWithdraw(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWithdraw
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWithdraw
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWithdraw
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWithdraw
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWithdraw
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWithdraw        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWithdraw          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWithdraw = fmt.Errorf("proto: unexpected end of group")
)
