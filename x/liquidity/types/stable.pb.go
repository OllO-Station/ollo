// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/stable.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConstantProductPool struct {
	//
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	//
	PairId uint64 `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	//
	PoolCoinDenom string `protobuf:"bytes,3,opt,name=pool_coin_denom,json=poolCoinDenom,proto3" json:"pool_coin_denom,omitempty" yaml:"pool_coin_denom"`
	//
	ReserveAccountAddress string `protobuf:"bytes,4,opt,name=reserve_account_address,json=reserveAccountAddress,proto3" json:"reserve_account_address,omitempty" yaml:"reserve_account_address"`
}

func (m *ConstantProductPool) Reset()         { *m = ConstantProductPool{} }
func (m *ConstantProductPool) String() string { return proto.CompactTextString(m) }
func (*ConstantProductPool) ProtoMessage()    {}
func (*ConstantProductPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_25ce2ba47e0ae367, []int{0}
}
func (m *ConstantProductPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstantProductPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConstantProductPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConstantProductPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstantProductPool.Merge(m, src)
}
func (m *ConstantProductPool) XXX_Size() int {
	return m.Size()
}
func (m *ConstantProductPool) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstantProductPool.DiscardUnknown(m)
}

var xxx_messageInfo_ConstantProductPool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ConstantProductPool)(nil), "ollo.liquidity.v1.ConstantProductPool")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/stable.proto", fileDescriptor_25ce2ba47e0ae367) }

var fileDescriptor_25ce2ba47e0ae367 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0x86, 0x3b, 0x7c, 0x84, 0x2f, 0x36, 0x11, 0x63, 0xfd, 0x43, 0x16, 0x03, 0xe9, 0x8a, 0xc4,
	0xd0, 0x86, 0xe8, 0xca, 0x1d, 0xe0, 0x86, 0x1d, 0x21, 0xae, 0xdc, 0x34, 0x43, 0xa7, 0xc1, 0x49,
	0xa6, 0x3d, 0xd8, 0x99, 0x12, 0xb9, 0x0b, 0x6f, 0xc1, 0x9d, 0x17, 0xe0, 0x45, 0xb0, 0x24, 0xae,
	0x5c, 0x11, 0x28, 0x77, 0xc0, 0x15, 0x98, 0x99, 0x69, 0x14, 0x17, 0xee, 0xe6, 0x9c, 0xe7, 0xc9,
	0x7b, 0x92, 0x79, 0x6d, 0x0c, 0x9c, 0x83, 0xcf, 0xd9, 0x53, 0xc6, 0x28, 0x93, 0x73, 0x7f, 0xd6,
	0xf1, 0x85, 0x24, 0x63, 0x1e, 0x79, 0xd3, 0x14, 0x24, 0x38, 0xc7, 0x8a, 0x7b, 0xdf, 0xdc, 0x9b,
	0x75, 0xea, 0xa7, 0x13, 0x98, 0x80, 0xa6, 0xbe, 0x7a, 0x19, 0xb1, 0x7e, 0x19, 0x82, 0x88, 0x41,
	0x04, 0x06, 0x98, 0xc1, 0x20, 0xf7, 0xb5, 0x64, 0x9f, 0xf4, 0x21, 0x11, 0x92, 0x24, 0x72, 0x98,
	0x02, 0xcd, 0x42, 0x39, 0x04, 0xe0, 0xce, 0x95, 0xfd, 0x7f, 0x0a, 0xc0, 0x03, 0x46, 0x6b, 0xa8,
	0x89, 0x5a, 0x07, 0x3d, 0x67, 0xb7, 0x6a, 0x54, 0xe7, 0x24, 0xe6, 0xb7, 0x6e, 0x01, 0xdc, 0x51,
	0x45, 0xbd, 0x06, 0x54, 0xcb, 0x84, 0xa5, 0x4a, 0x2e, 0x35, 0x51, 0xab, 0xfc, 0x4b, 0x36, 0x40,
	0xc9, 0x84, 0xa5, 0x03, 0xea, 0xf4, 0xec, 0x23, 0x1d, 0x10, 0x02, 0x4b, 0x02, 0x1a, 0x25, 0x10,
	0xd7, 0xfe, 0xe9, 0x0b, 0xf5, 0xdd, 0xaa, 0x71, 0xbe, 0x77, 0xe1, 0x47, 0x70, 0x47, 0x87, 0x6a,
	0xd3, 0x07, 0x96, 0xdc, 0xa9, 0xd9, 0xe1, 0xf6, 0x45, 0x1a, 0x89, 0x28, 0x9d, 0x45, 0x01, 0x09,
	0x43, 0xc8, 0x12, 0x19, 0x10, 0x4a, 0xd3, 0x48, 0x88, 0x5a, 0x59, 0x67, 0xdd, 0xec, 0x56, 0x0d,
	0x6c, 0xb2, 0xfe, 0x10, 0xdd, 0x8f, 0xf7, 0x76, 0xb5, 0xf8, 0x8a, 0xae, 0x59, 0x8d, 0xce, 0x0a,
	0xb7, 0x6b, 0xd4, 0x62, 0xdd, 0xbb, 0x5f, 0x6c, 0xb0, 0xb5, 0xde, 0x60, 0xf4, 0x96, 0x63, 0xb4,
	0xc8, 0x31, 0x5a, 0xe6, 0x18, 0xad, 0x73, 0x8c, 0x5e, 0xb6, 0xd8, 0x5a, 0x6e, 0xb1, 0xf5, 0xb9,
	0xc5, 0xd6, 0x83, 0x37, 0x61, 0xf2, 0x31, 0x1b, 0x7b, 0x21, 0xc4, 0xbe, 0x2a, 0xa6, 0x2d, 0x24,
	0x91, 0x0c, 0x12, 0x3d, 0xf8, 0xcf, 0x7b, 0x3d, 0xca, 0xf9, 0x34, 0x12, 0xe3, 0x8a, 0x2e, 0xe0,
	0xfa, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x62, 0x06, 0x1f, 0x00, 0xe6, 0x01, 0x00, 0x00,
}

func (this *ConstantProductPool) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConstantProductPool)
	if !ok {
		that2, ok := that.(ConstantProductPool)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConstantProductPool")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConstantProductPool but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConstantProductPool but is not nil && this == nil")
	}
	if this.PoolId != that1.PoolId {
		return fmt.Errorf("PoolId this(%v) Not Equal that(%v)", this.PoolId, that1.PoolId)
	}
	if this.PairId != that1.PairId {
		return fmt.Errorf("PairId this(%v) Not Equal that(%v)", this.PairId, that1.PairId)
	}
	if this.PoolCoinDenom != that1.PoolCoinDenom {
		return fmt.Errorf("PoolCoinDenom this(%v) Not Equal that(%v)", this.PoolCoinDenom, that1.PoolCoinDenom)
	}
	if this.ReserveAccountAddress != that1.ReserveAccountAddress {
		return fmt.Errorf("ReserveAccountAddress this(%v) Not Equal that(%v)", this.ReserveAccountAddress, that1.ReserveAccountAddress)
	}
	return nil
}
func (this *ConstantProductPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConstantProductPool)
	if !ok {
		that2, ok := that.(ConstantProductPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolId != that1.PoolId {
		return false
	}
	if this.PairId != that1.PairId {
		return false
	}
	if this.PoolCoinDenom != that1.PoolCoinDenom {
		return false
	}
	if this.ReserveAccountAddress != that1.ReserveAccountAddress {
		return false
	}
	return true
}
func (m *ConstantProductPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstantProductPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstantProductPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveAccountAddress) > 0 {
		i -= len(m.ReserveAccountAddress)
		copy(dAtA[i:], m.ReserveAccountAddress)
		i = encodeVarintStable(dAtA, i, uint64(len(m.ReserveAccountAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolCoinDenom) > 0 {
		i -= len(m.PoolCoinDenom)
		copy(dAtA[i:], m.PoolCoinDenom)
		i = encodeVarintStable(dAtA, i, uint64(len(m.PoolCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PairId != 0 {
		i = encodeVarintStable(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintStable(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStable(dAtA []byte, offset int, v uint64) int {
	offset -= sovStable(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConstantProductPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovStable(uint64(l))
	}
	if m.PairId != 0 {
		n += 1 + sovStable(uint64(m.PairId))
	}
	l = len(m.PoolCoinDenom)
	if l > 0 {
		n += 1 + l + sovStable(uint64(l))
	}
	l = len(m.ReserveAccountAddress)
	if l > 0 {
		n += 1 + l + sovStable(uint64(l))
	}
	return n
}

func sovStable(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStable(x uint64) (n int) {
	return sovStable(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConstantProductPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStable
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConstantProductPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConstantProductPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStable
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStable
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStable
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStable(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStable
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStable(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStable
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStable
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStable
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStable
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStable
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStable        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStable          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStable = fmt.Errorf("proto: unexpected end of group")
)
