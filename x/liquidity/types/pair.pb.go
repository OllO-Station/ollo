// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/pair.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pair defines a coin pair.
type Pair struct {
	Id             uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	BaseCoinDenom  string                                  `protobuf:"bytes,2,opt,name=base_coin_denom,json=baseCoinDenom,proto3" json:"base_coin_denom,omitempty" yaml:"base_coin_denom"`
	QuoteCoinDenom string                                  `protobuf:"bytes,3,opt,name=quote_coin_denom,json=quoteCoinDenom,proto3" json:"quote_coin_denom,omitempty" yaml:"quote_coin_denom"`
	EscrowAddress  string                                  `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" yaml:"escrow_address"`
	LastOrderId    uint64                                  `protobuf:"varint,5,opt,name=last_order_id,json=lastOrderId,proto3" json:"last_order_id,omitempty" yaml:"last_order_id"`
	LastPrice      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=last_price,json=lastPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_price,omitempty" yaml:"last_price"`
	CurrentBatchId uint64                                  `protobuf:"varint,7,opt,name=current_batch_id,json=currentBatchId,proto3" json:"current_batch_id,omitempty" yaml:"current_batch_id"`
}

func (m *Pair) Reset()         { *m = Pair{} }
func (m *Pair) String() string { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()    {}
func (*Pair) Descriptor() ([]byte, []int) {
	return fileDescriptor_884a260aa90aae36, []int{0}
}
func (m *Pair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pair.Merge(m, src)
}
func (m *Pair) XXX_Size() int {
	return m.Size()
}
func (m *Pair) XXX_DiscardUnknown() {
	xxx_messageInfo_Pair.DiscardUnknown(m)
}

var xxx_messageInfo_Pair proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Pair)(nil), "ollo.liquidity.v1.Pair")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/pair.proto", fileDescriptor_884a260aa90aae36) }

var fileDescriptor_884a260aa90aae36 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x6f, 0xba, 0x32, 0x54, 0xa3, 0x16, 0x16, 0x0d, 0x08, 0x05, 0x9c, 0xc9, 0x07, 0x34, 0x09,
	0x35, 0xd1, 0xc4, 0x0d, 0x21, 0x21, 0xc2, 0x38, 0xec, 0xc4, 0x14, 0x71, 0xe2, 0x40, 0x94, 0xda,
	0x56, 0x67, 0x91, 0xe6, 0xeb, 0x6c, 0x77, 0xd0, 0xb7, 0xe0, 0x31, 0x78, 0x00, 0x1e, 0x62, 0xc7,
	0x89, 0x13, 0xe2, 0x10, 0x6d, 0xed, 0x89, 0x6b, 0x9e, 0x00, 0xd9, 0x8e, 0x20, 0xed, 0x29, 0xfe,
	0xfd, 0xd1, 0x2f, 0xdf, 0xf7, 0xd3, 0x87, 0x9e, 0x40, 0x51, 0x40, 0x5c, 0x88, 0xf3, 0x85, 0x60,
	0x42, 0x2f, 0xe3, 0x8b, 0xa3, 0x78, 0x9e, 0x0b, 0x19, 0xcd, 0x25, 0x68, 0xf0, 0xf7, 0x8c, 0x1a,
	0xfd, 0x53, 0xa3, 0x8b, 0xa3, 0xd1, 0xfe, 0x14, 0xa6, 0x60, 0xd5, 0xd8, 0xbc, 0x9c, 0x71, 0xf4,
	0x88, 0x82, 0x9a, 0x81, 0xca, 0x9c, 0xe0, 0x80, 0x93, 0xc8, 0x9f, 0x1d, 0xd4, 0x3b, 0xcd, 0x85,
	0xf4, 0x9f, 0xa2, 0xae, 0x60, 0x81, 0x77, 0xe0, 0x1d, 0xf6, 0x92, 0x41, 0x5d, 0x85, 0xfd, 0x65,
	0x3e, 0x2b, 0x5e, 0x12, 0xc1, 0x48, 0xda, 0x15, 0xcc, 0x4f, 0xd0, 0xdd, 0x49, 0xae, 0x78, 0x46,
	0x41, 0x94, 0x19, 0xe3, 0x25, 0xcc, 0x82, 0xee, 0x81, 0x77, 0xd8, 0x4f, 0x46, 0x75, 0x15, 0x3e,
	0x70, 0xde, 0x2d, 0x03, 0x49, 0x07, 0x86, 0x79, 0x0b, 0xa2, 0x3c, 0x36, 0xd8, 0x7f, 0x87, 0xee,
	0x9d, 0x2f, 0x40, 0x6f, 0x84, 0xec, 0xd8, 0x90, 0xc7, 0x75, 0x15, 0x3e, 0x74, 0x21, 0xdb, 0x0e,
	0x92, 0x0e, 0x2d, 0xf5, 0x3f, 0x26, 0x45, 0x43, 0xae, 0xa8, 0x84, 0x2f, 0x59, 0xce, 0x98, 0xe4,
	0x4a, 0x05, 0x3d, 0x1b, 0xf2, 0xbc, 0xae, 0xc2, 0xfb, 0x2e, 0x64, 0x53, 0x27, 0x3f, 0x7f, 0x8c,
	0x87, 0xcd, 0xd6, 0x6f, 0x1c, 0x95, 0x0e, 0x9c, 0xa5, 0x81, 0xfe, 0x2b, 0x34, 0x28, 0x72, 0xa5,
	0x33, 0x90, 0x8c, 0xcb, 0x4c, 0xb0, 0xe0, 0x96, 0x2d, 0x22, 0xa8, 0xab, 0x70, 0xdf, 0x45, 0x6e,
	0xc8, 0x24, 0xbd, 0x63, 0xf0, 0x7b, 0x03, 0x4f, 0x98, 0xff, 0x09, 0x21, 0x2b, 0xcf, 0xa5, 0xa0,
	0x3c, 0xd8, 0xb5, 0xd3, 0xbc, 0xfe, 0x5d, 0x85, 0xcf, 0xa6, 0x42, 0x9f, 0x2d, 0x26, 0x11, 0x85,
	0x59, 0xd3, 0x7a, 0xf3, 0x19, 0x2b, 0xf6, 0x39, 0xd6, 0xcb, 0x39, 0x57, 0xd1, 0x31, 0xa7, 0x75,
	0x15, 0xee, 0xb5, 0x7e, 0x62, 0x53, 0x48, 0xda, 0x37, 0xe0, 0xd4, 0xbc, 0x4d, 0x71, 0x74, 0x21,
	0x25, 0x2f, 0x75, 0x36, 0xc9, 0x35, 0x3d, 0x33, 0x03, 0xde, 0xb6, 0x03, 0xb6, 0x8a, 0xdb, 0x76,
	0x90, 0x74, 0xd8, 0x50, 0x89, 0x61, 0x4e, 0x58, 0xf2, 0xe1, 0xf2, 0x06, 0x77, 0xae, 0x6f, 0xb0,
	0xf7, 0x7d, 0x85, 0xbd, 0xcb, 0x15, 0xf6, 0xae, 0x56, 0xd8, 0xbb, 0x5e, 0x61, 0xef, 0xdb, 0x1a,
	0x77, 0xae, 0xd6, 0xb8, 0xf3, 0x6b, 0x8d, 0x3b, 0x1f, 0xa3, 0xd6, 0xd0, 0xe6, 0xc0, 0xc6, 0x4a,
	0xe7, 0x5a, 0x40, 0x69, 0x41, 0xfc, 0xb5, 0x75, 0x8d, 0x76, 0x81, 0xc9, 0xae, 0x3d, 0xa4, 0x17,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x56, 0x6e, 0xdf, 0xf1, 0xac, 0x02, 0x00, 0x00,
}

func (this *Pair) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Pair)
	if !ok {
		that2, ok := that.(Pair)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Pair")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Pair but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Pair but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.BaseCoinDenom != that1.BaseCoinDenom {
		return fmt.Errorf("BaseCoinDenom this(%v) Not Equal that(%v)", this.BaseCoinDenom, that1.BaseCoinDenom)
	}
	if this.QuoteCoinDenom != that1.QuoteCoinDenom {
		return fmt.Errorf("QuoteCoinDenom this(%v) Not Equal that(%v)", this.QuoteCoinDenom, that1.QuoteCoinDenom)
	}
	if this.EscrowAddress != that1.EscrowAddress {
		return fmt.Errorf("EscrowAddress this(%v) Not Equal that(%v)", this.EscrowAddress, that1.EscrowAddress)
	}
	if this.LastOrderId != that1.LastOrderId {
		return fmt.Errorf("LastOrderId this(%v) Not Equal that(%v)", this.LastOrderId, that1.LastOrderId)
	}
	if that1.LastPrice == nil {
		if this.LastPrice != nil {
			return fmt.Errorf("this.LastPrice != nil && that1.LastPrice == nil")
		}
	} else if !this.LastPrice.Equal(*that1.LastPrice) {
		return fmt.Errorf("LastPrice this(%v) Not Equal that(%v)", this.LastPrice, that1.LastPrice)
	}
	if this.CurrentBatchId != that1.CurrentBatchId {
		return fmt.Errorf("CurrentBatchId this(%v) Not Equal that(%v)", this.CurrentBatchId, that1.CurrentBatchId)
	}
	return nil
}
func (this *Pair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pair)
	if !ok {
		that2, ok := that.(Pair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.BaseCoinDenom != that1.BaseCoinDenom {
		return false
	}
	if this.QuoteCoinDenom != that1.QuoteCoinDenom {
		return false
	}
	if this.EscrowAddress != that1.EscrowAddress {
		return false
	}
	if this.LastOrderId != that1.LastOrderId {
		return false
	}
	if that1.LastPrice == nil {
		if this.LastPrice != nil {
			return false
		}
	} else if !this.LastPrice.Equal(*that1.LastPrice) {
		return false
	}
	if this.CurrentBatchId != that1.CurrentBatchId {
		return false
	}
	return true
}
func (m *Pair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentBatchId != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.CurrentBatchId))
		i--
		dAtA[i] = 0x38
	}
	if m.LastPrice != nil {
		{
			size := m.LastPrice.Size()
			i -= size
			if _, err := m.LastPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPair(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LastOrderId != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.LastOrderId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintPair(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuoteCoinDenom) > 0 {
		i -= len(m.QuoteCoinDenom)
		copy(dAtA[i:], m.QuoteCoinDenom)
		i = encodeVarintPair(dAtA, i, uint64(len(m.QuoteCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseCoinDenom) > 0 {
		i -= len(m.BaseCoinDenom)
		copy(dAtA[i:], m.BaseCoinDenom)
		i = encodeVarintPair(dAtA, i, uint64(len(m.BaseCoinDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPair(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPair(dAtA []byte, offset int, v uint64) int {
	offset -= sovPair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPair(uint64(m.Id))
	}
	l = len(m.BaseCoinDenom)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.QuoteCoinDenom)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovPair(uint64(l))
	}
	if m.LastOrderId != 0 {
		n += 1 + sovPair(uint64(m.LastOrderId))
	}
	if m.LastPrice != nil {
		l = m.LastPrice.Size()
		n += 1 + l + sovPair(uint64(l))
	}
	if m.CurrentBatchId != 0 {
		n += 1 + sovPair(uint64(m.CurrentBatchId))
	}
	return n
}

func sovPair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPair(x uint64) (n int) {
	return sovPair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOrderId", wireType)
			}
			m.LastOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.LastPrice = &v
			if err := m.LastPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBatchId", wireType)
			}
			m.CurrentBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentBatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPair = fmt.Errorf("proto: unexpected end of group")
)
