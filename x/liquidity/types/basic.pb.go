// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/basic.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BasicPool struct {
	//
	PoolId string `protobuf:"bytes,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	//
	PairId uint64 `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	//
	PoolCoinDenom string `protobuf:"bytes,3,opt,name=pool_coin_denom,json=poolCoinDenom,proto3" json:"pool_coin_denom,omitempty" yaml:"pool_coin_denom"`
	//
	ReserveAccountAddress string `protobuf:"bytes,4,opt,name=reserve_account_address,json=reserveAccountAddress,proto3" json:"reserve_account_address,omitempty" yaml:"reserve_account_address"`
}

func (m *BasicPool) Reset()         { *m = BasicPool{} }
func (m *BasicPool) String() string { return proto.CompactTextString(m) }
func (*BasicPool) ProtoMessage()    {}
func (*BasicPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a10b1985ccbd0ea4, []int{0}
}
func (m *BasicPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicPool.Merge(m, src)
}
func (m *BasicPool) XXX_Size() int {
	return m.Size()
}
func (m *BasicPool) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicPool.DiscardUnknown(m)
}

var xxx_messageInfo_BasicPool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BasicPool)(nil), "ollo.liquidity.v1.BasicPool")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/basic.proto", fileDescriptor_a10b1985ccbd0ea4) }

var fileDescriptor_a10b1985ccbd0ea4 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4a, 0xfb, 0x40,
	0x10, 0xc7, 0x93, 0xfe, 0x4a, 0x7f, 0x34, 0x60, 0xc5, 0xe0, 0x9f, 0x5a, 0x70, 0x5b, 0x72, 0x2a,
	0x48, 0x13, 0x8a, 0x9e, 0xbc, 0x35, 0x7a, 0x29, 0x78, 0x90, 0x1e, 0xbd, 0x84, 0x6d, 0x76, 0xa9,
	0x0b, 0x9b, 0x4c, 0xdd, 0xdd, 0x16, 0xfb, 0x16, 0xde, 0x7c, 0x11, 0x1f, 0xa2, 0xc7, 0xe2, 0xc9,
	0x53, 0xd1, 0xf6, 0x0d, 0xf2, 0x04, 0xb2, 0xbb, 0x41, 0xeb, 0xc1, 0xdb, 0xcc, 0x7c, 0x3e, 0x7c,
	0x07, 0x66, 0xbc, 0x33, 0xe0, 0x1c, 0x22, 0xce, 0x1e, 0x67, 0x8c, 0x30, 0xb5, 0x88, 0xe6, 0xfd,
	0x68, 0x8c, 0x25, 0x4b, 0xc3, 0xa9, 0x00, 0x05, 0xfe, 0x81, 0xc6, 0xe1, 0x37, 0x0e, 0xe7, 0xfd,
	0xd6, 0xe1, 0x04, 0x26, 0x60, 0x68, 0xa4, 0x2b, 0x2b, 0xb6, 0x4e, 0x53, 0x90, 0x19, 0xc8, 0xc4,
	0x02, 0xdb, 0x58, 0x14, 0xbc, 0x54, 0xbc, 0x7a, 0xac, 0x33, 0xef, 0x00, 0xb8, 0x7f, 0xee, 0xfd,
	0x9f, 0x02, 0xf0, 0x84, 0x91, 0xa6, 0xdb, 0x71, 0xbb, 0xf5, 0xd8, 0x2f, 0xd6, 0xed, 0xc6, 0x02,
	0x67, 0xfc, 0x2a, 0x28, 0x41, 0x30, 0xaa, 0xe9, 0x6a, 0x48, 0x8c, 0x8c, 0x99, 0xd0, 0x72, 0xa5,
	0xe3, 0x76, 0xab, 0xbf, 0x64, 0x0b, 0xb4, 0x8c, 0x99, 0x18, 0x12, 0x3f, 0xf6, 0xf6, 0x4d, 0x40,
	0x0a, 0x2c, 0x4f, 0x08, 0xcd, 0x21, 0x6b, 0xfe, 0x33, 0x1b, 0x5a, 0xc5, 0xba, 0x7d, 0xbc, 0xb3,
	0xe1, 0x47, 0x08, 0x46, 0x7b, 0x7a, 0x72, 0x0d, 0x2c, 0xbf, 0xd1, 0xbd, 0xcf, 0xbd, 0x13, 0x41,
	0x25, 0x15, 0x73, 0x9a, 0xe0, 0x34, 0x85, 0x59, 0xae, 0x12, 0x4c, 0x88, 0xa0, 0x52, 0x36, 0xab,
	0x26, 0xeb, 0xb2, 0x58, 0xb7, 0x91, 0xcd, 0xfa, 0x43, 0x0c, 0xde, 0x5e, 0x7b, 0x8d, 0xf2, 0x00,
	0x03, 0x3b, 0x1a, 0x1d, 0x95, 0xee, 0xc0, 0xaa, 0xe5, 0x38, 0xbe, 0x5d, 0x7e, 0x22, 0x67, 0xb9,
	0x41, 0xee, 0x6a, 0x83, 0xdc, 0x8f, 0x0d, 0x72, 0x9f, 0xb7, 0xc8, 0x59, 0x6d, 0x91, 0xf3, 0xbe,
	0x45, 0xce, 0x7d, 0x38, 0x61, 0xea, 0x61, 0x36, 0x0e, 0x53, 0xc8, 0x22, 0xfd, 0x86, 0x9e, 0x54,
	0x58, 0x31, 0xc8, 0x4d, 0x13, 0x3d, 0xed, 0x3c, 0x4d, 0x2d, 0xa6, 0x54, 0x8e, 0x6b, 0xe6, 0xdc,
	0x17, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x22, 0x82, 0x18, 0x79, 0xd3, 0x01, 0x00, 0x00,
}

func (m *BasicPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReserveAccountAddress) > 0 {
		i -= len(m.ReserveAccountAddress)
		copy(dAtA[i:], m.ReserveAccountAddress)
		i = encodeVarintBasic(dAtA, i, uint64(len(m.ReserveAccountAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolCoinDenom) > 0 {
		i -= len(m.PoolCoinDenom)
		copy(dAtA[i:], m.PoolCoinDenom)
		i = encodeVarintBasic(dAtA, i, uint64(len(m.PoolCoinDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PairId != 0 {
		i = encodeVarintBasic(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintBasic(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBasic(dAtA []byte, offset int, v uint64) int {
	offset -= sovBasic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	if m.PairId != 0 {
		n += 1 + sovBasic(uint64(m.PairId))
	}
	l = len(m.PoolCoinDenom)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	l = len(m.ReserveAccountAddress)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	return n
}

func sovBasic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBasic(x uint64) (n int) {
	return sovBasic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAccountAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAccountAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBasic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBasic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBasic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBasic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBasic = fmt.Errorf("proto: unexpected end of group")
)
