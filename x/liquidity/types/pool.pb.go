// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolA struct {
	Type                  *PoolType                               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                    uint64                                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PairId                uint64                                  `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	Creator               string                                  `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	ReserveAddress        string                                  `protobuf:"bytes,5,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
	PoolCoinDenom         string                                  `protobuf:"bytes,6,opt,name=pool_coin_denom,json=poolCoinDenom,proto3" json:"pool_coin_denom,omitempty"`
	MinPrice              *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=min_price,json=minPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_price,omitempty"`
	MaxPrice              *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=max_price,json=maxPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_price,omitempty"`
	LastDepositRequestId  uint64                                  `protobuf:"varint,9,opt,name=last_deposit_request_id,json=lastDepositRequestId,proto3" json:"last_deposit_request_id,omitempty"`
	LastWithdrawRequestId uint64                                  `protobuf:"varint,10,opt,name=last_withdraw_request_id,json=lastWithdrawRequestId,proto3" json:"last_withdraw_request_id,omitempty"`
	Disabled              bool                                    `protobuf:"varint,11,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *PoolA) Reset()         { *m = PoolA{} }
func (m *PoolA) String() string { return proto.CompactTextString(m) }
func (*PoolA) ProtoMessage()    {}
func (*PoolA) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e204054048950d3, []int{0}
}
func (m *PoolA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolA.Merge(m, src)
}
func (m *PoolA) XXX_Size() int {
	return m.Size()
}
func (m *PoolA) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolA.DiscardUnknown(m)
}

var xxx_messageInfo_PoolA proto.InternalMessageInfo

func (m *PoolA) GetType() *PoolType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PoolA) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PoolA) GetPairId() uint64 {
	if m != nil {
		return m.PairId
	}
	return 0
}

func (m *PoolA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *PoolA) GetReserveAddress() string {
	if m != nil {
		return m.ReserveAddress
	}
	return ""
}

func (m *PoolA) GetPoolCoinDenom() string {
	if m != nil {
		return m.PoolCoinDenom
	}
	return ""
}

func (m *PoolA) GetLastDepositRequestId() uint64 {
	if m != nil {
		return m.LastDepositRequestId
	}
	return 0
}

func (m *PoolA) GetLastWithdrawRequestId() uint64 {
	if m != nil {
		return m.LastWithdrawRequestId
	}
	return 0
}

func (m *PoolA) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func init() {
	proto.RegisterType((*PoolA)(nil), "ollo.liquidity.v1.PoolA")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/pool.proto", fileDescriptor_5e204054048950d3) }

var fileDescriptor_5e204054048950d3 = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x34, 0xcd, 0x9f, 0xad, 0x68, 0xc5, 0xaa, 0x90, 0x55, 0x40, 0x26, 0x70, 0x28,
	0x11, 0x12, 0x5e, 0x0a, 0x42, 0x9c, 0x5b, 0x22, 0xa1, 0xde, 0x2a, 0x0b, 0x09, 0x89, 0x8b, 0xb5,
	0xf1, 0x2e, 0xe9, 0x08, 0xdb, 0xe3, 0xee, 0xae, 0xd3, 0xe4, 0x2d, 0x78, 0x2c, 0x8e, 0x3d, 0x22,
	0x0e, 0x08, 0x25, 0x37, 0x9e, 0x02, 0xed, 0xda, 0xfd, 0x23, 0xf5, 0xd6, 0x53, 0x32, 0xdf, 0xef,
	0xfb, 0x66, 0x3d, 0xa3, 0x21, 0x4f, 0x31, 0xcb, 0x90, 0x67, 0x70, 0x5e, 0x81, 0x04, 0xbb, 0xe2,
	0x8b, 0x43, 0x5e, 0x22, 0x66, 0x51, 0xa9, 0xd1, 0x22, 0x7d, 0xe8, 0x68, 0x74, 0x4d, 0xa3, 0xc5,
	0xe1, 0x68, 0x7f, 0x8e, 0x73, 0xf4, 0x94, 0xbb, 0x7f, 0xb5, 0x71, 0x14, 0xce, 0x11, 0xe7, 0x99,
	0xe2, 0xbe, 0x9a, 0x55, 0xdf, 0xb8, 0xac, 0xb4, 0xb0, 0x80, 0x45, 0xc3, 0x87, 0x29, 0x9a, 0x1c,
	0x4d, 0x52, 0x07, 0x53, 0x84, 0x2b, 0xf0, 0xfc, 0xee, 0xfb, 0x37, 0xcf, 0x79, 0xcb, 0x8b, 0x7f,
	0x5b, 0x64, 0xfb, 0x14, 0x31, 0x3b, 0xa2, 0x9c, 0x74, 0xec, 0xaa, 0x54, 0x2c, 0x18, 0x07, 0x93,
	0x9d, 0xb7, 0x4f, 0xa2, 0x3b, 0x5f, 0x17, 0x39, 0xdf, 0xe7, 0x55, 0xa9, 0x62, 0x6f, 0xa4, 0xbb,
	0xa4, 0x0d, 0x92, 0xb5, 0xc7, 0xc1, 0xa4, 0x13, 0xb7, 0x41, 0xd2, 0x21, 0xe9, 0x95, 0x02, 0x74,
	0x02, 0x92, 0x6d, 0x79, 0xb1, 0xeb, 0xca, 0x13, 0x49, 0x19, 0xe9, 0xa5, 0x5a, 0x09, 0x8b, 0x9a,
	0x75, 0xc6, 0xc1, 0x64, 0x10, 0x5f, 0x95, 0xf4, 0x25, 0xd9, 0xd3, 0xca, 0x28, 0xbd, 0x50, 0x89,
	0x90, 0x52, 0x2b, 0x63, 0xd8, 0xb6, 0x77, 0xec, 0x36, 0xf2, 0x51, 0xad, 0xd2, 0x03, 0xb2, 0xe7,
	0x36, 0x97, 0xb8, 0xe1, 0x12, 0xa9, 0x0a, 0xcc, 0x59, 0xd7, 0x1b, 0x1f, 0x38, 0xf9, 0x23, 0x42,
	0x31, 0x75, 0x22, 0xfd, 0x44, 0x06, 0x39, 0x14, 0x49, 0xa9, 0x21, 0x55, 0xac, 0xe7, 0x1c, 0xc7,
	0xaf, 0x7e, 0xff, 0x79, 0x76, 0x30, 0x07, 0x7b, 0x56, 0xcd, 0xa2, 0x14, 0x73, 0x5e, 0x2f, 0xab,
	0xf9, 0x79, 0x6d, 0xe4, 0x77, 0xee, 0xa6, 0x31, 0xd1, 0x54, 0xa5, 0x71, 0x3f, 0x87, 0xe2, 0xd4,
	0x65, 0x7d, 0x23, 0xb1, 0x6c, 0x1a, 0xf5, 0xef, 0xd1, 0x48, 0x2c, 0xeb, 0x46, 0xef, 0xc9, 0x30,
	0x13, 0xc6, 0x26, 0x52, 0x95, 0x68, 0xc0, 0x26, 0x5a, 0x9d, 0x57, 0xca, 0x58, 0xb7, 0xa5, 0x81,
	0xdf, 0xd2, 0xbe, 0xc3, 0xd3, 0x9a, 0xc6, 0x35, 0x3c, 0x91, 0xf4, 0x03, 0x61, 0x3e, 0x76, 0x01,
	0xf6, 0x4c, 0x6a, 0x71, 0x71, 0x3b, 0x47, 0x7c, 0xee, 0x91, 0xe3, 0x5f, 0x1a, 0x7c, 0x13, 0x1c,
	0x91, 0xbe, 0x04, 0x23, 0x66, 0x99, 0x92, 0x6c, 0x67, 0x1c, 0x4c, 0xfa, 0xf1, 0x75, 0x7d, 0xfc,
	0xe6, 0xe7, 0x3a, 0x0c, 0x2e, 0xd7, 0x61, 0xf0, 0x77, 0x1d, 0x06, 0x3f, 0x36, 0x61, 0xeb, 0x72,
	0x13, 0xb6, 0x7e, 0x6d, 0xc2, 0xd6, 0xd7, 0xc7, 0xfe, 0x52, 0x96, 0xb7, 0x6e, 0xc5, 0xcf, 0x32,
	0xeb, 0xfa, 0x2b, 0x79, 0xf7, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xef, 0xef, 0x95, 0x8e, 0xca, 0x02,
	0x00, 0x00,
}

func (m *PoolA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.LastWithdrawRequestId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastWithdrawRequestId))
		i--
		dAtA[i] = 0x50
	}
	if m.LastDepositRequestId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastDepositRequestId))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxPrice != nil {
		{
			size := m.MaxPrice.Size()
			i -= size
			if _, err := m.MaxPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MinPrice != nil {
		{
			size := m.MinPrice.Size()
			i -= size
			if _, err := m.MinPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PoolCoinDenom) > 0 {
		i -= len(m.PoolCoinDenom)
		copy(dAtA[i:], m.PoolCoinDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.PoolCoinDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.PairId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovPool(uint64(m.Id))
	}
	if m.PairId != 0 {
		n += 1 + sovPool(uint64(m.PairId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.PoolCoinDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.MinPrice != nil {
		l = m.MinPrice.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.MaxPrice != nil {
		l = m.MaxPrice.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.LastDepositRequestId != 0 {
		n += 1 + sovPool(uint64(m.LastDepositRequestId))
	}
	if m.LastWithdrawRequestId != 0 {
		n += 1 + sovPool(uint64(m.LastWithdrawRequestId))
	}
	if m.Disabled {
		n += 2
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &PoolType{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MinPrice = &v
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MaxPrice = &v
			if err := m.MaxPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDepositRequestId", wireType)
			}
			m.LastDepositRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDepositRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawRequestId", wireType)
			}
			m.LastWithdrawRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
