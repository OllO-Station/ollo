// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/pool.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolType enumerates pool types.
type PoolType int32

const (
	// POOL_TYPE_UNSPECIFIED specifies unknown pool type
	PoolTypeUnspecified PoolType = 0
	// POOL_TYPE_BASIC specifies the basic pool type
	PoolTypeBasic PoolType = 1
	// POOL_TYPE_RANGED specifies the ranged pool type
	PoolTypeRanged PoolType = 2
)

var PoolType_name = map[int32]string{
	0: "POOL_TYPE_UNSPECIFIED",
	1: "POOL_TYPE_BASIC",
	2: "POOL_TYPE_RANGED",
}

var PoolType_value = map[string]int32{
	"POOL_TYPE_UNSPECIFIED": 0,
	"POOL_TYPE_BASIC":       1,
	"POOL_TYPE_RANGED":      2,
}

func (x PoolType) String() string {
	return proto.EnumName(PoolType_name, int32(x))
}

func (PoolType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5e204054048950d3, []int{0}
}

// Pool defines generic liquidity pool object which can be either a basic pool or a
// ranged pool.
type Pool struct {
	Type                  PoolType                                `protobuf:"varint,1,opt,name=type,proto3,enum=ollo.liquidity.v1.PoolType" json:"type,omitempty" yaml:"type"`
	Id                    uint64                                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	PairId                uint64                                  `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	Creator               string                                  `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	ReserveAddress        string                                  `protobuf:"bytes,5,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty" yaml:"reserve_address"`
	PoolCoinDenom         string                                  `protobuf:"bytes,6,opt,name=pool_coin_denom,json=poolCoinDenom,proto3" json:"pool_coin_denom,omitempty"`
	MinPrice              *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=min_price,json=minPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_price,omitempty"`
	MaxPrice              *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=max_price,json=maxPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_price,omitempty"`
	LastDepositRequestId  uint64                                  `protobuf:"varint,9,opt,name=last_deposit_request_id,json=lastDepositRequestId,proto3" json:"last_deposit_request_id,omitempty"`
	LastWithdrawRequestId uint64                                  `protobuf:"varint,10,opt,name=last_withdraw_request_id,json=lastWithdrawRequestId,proto3" json:"last_withdraw_request_id,omitempty"`
	Disabled              bool                                    `protobuf:"varint,11,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e204054048950d3, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ollo.liquidity.v1.PoolType", PoolType_name, PoolType_value)
	proto.RegisterType((*Pool)(nil), "ollo.liquidity.v1.Pool")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/pool.proto", fileDescriptor_5e204054048950d3) }

var fileDescriptor_5e204054048950d3 = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4d, 0x4f, 0x13, 0x41,
	0x1c, 0xc6, 0x77, 0x6a, 0x85, 0x76, 0x08, 0xa5, 0x8c, 0x20, 0xeb, 0xaa, 0xdb, 0x4d, 0x63, 0x48,
	0x83, 0xb2, 0x1b, 0x30, 0xc6, 0xc4, 0x83, 0x91, 0xd2, 0x4a, 0x9a, 0x18, 0x68, 0x16, 0x88, 0x2f,
	0x97, 0xcd, 0xb0, 0x33, 0x96, 0x89, 0xbb, 0x3b, 0xcb, 0xce, 0xf2, 0xd2, 0x6f, 0x60, 0x38, 0x79,
	0xf2, 0xc6, 0xc9, 0x8b, 0x1f, 0xc0, 0x0f, 0xc1, 0x91, 0x78, 0x32, 0x1e, 0x1a, 0x28, 0x9f, 0xc0,
	0x7e, 0x02, 0x33, 0xbb, 0x5b, 0x4a, 0xd4, 0x93, 0xa7, 0xce, 0x7f, 0x7e, 0xcf, 0xf3, 0x34, 0x3b,
	0xcf, 0x0c, 0xbc, 0xc7, 0x3d, 0x8f, 0x5b, 0x1e, 0xdb, 0xdb, 0x67, 0x84, 0xc5, 0x5d, 0xeb, 0x60,
	0xc9, 0x0a, 0x39, 0xf7, 0xcc, 0x30, 0xe2, 0x31, 0x47, 0xd3, 0x92, 0x9a, 0x57, 0xd4, 0x3c, 0x58,
	0xd2, 0x66, 0x3a, 0xbc, 0xc3, 0x13, 0x6a, 0xc9, 0x55, 0x2a, 0xd4, 0xee, 0xb8, 0x5c, 0xf8, 0x5c,
	0x38, 0x29, 0x48, 0x87, 0x14, 0x55, 0x7f, 0xe5, 0x61, 0xbe, 0xcd, 0xb9, 0x87, 0x5e, 0xc0, 0x7c,
	0xdc, 0x0d, 0xa9, 0x0a, 0x0c, 0x50, 0x2b, 0x2d, 0xdf, 0x35, 0xff, 0xca, 0x36, 0xa5, 0x6c, 0xab,
	0x1b, 0xd2, 0xfa, 0xd4, 0xa0, 0x57, 0x99, 0xe8, 0x62, 0xdf, 0x7b, 0x56, 0x95, 0x96, 0xaa, 0x9d,
	0x38, 0xd1, 0x7d, 0x98, 0x63, 0x44, 0xcd, 0x19, 0xa0, 0x96, 0xaf, 0x4f, 0x0e, 0x7a, 0x95, 0x62,
	0x2a, 0x61, 0xa4, 0x6a, 0xe7, 0x18, 0x41, 0x0f, 0xe1, 0x78, 0x88, 0x59, 0xe4, 0x30, 0xa2, 0xde,
	0x48, 0x34, 0x68, 0xd0, 0xab, 0x94, 0x52, 0x4d, 0x06, 0xaa, 0xf6, 0x98, 0x5c, 0xb5, 0x08, 0x7a,
	0x0e, 0xc7, 0xdd, 0x88, 0xe2, 0x98, 0x47, 0x6a, 0xde, 0x00, 0xb5, 0x62, 0xfd, 0xc1, 0x48, 0x9c,
	0x81, 0xea, 0xf7, 0x6f, 0x8b, 0xa5, 0xec, 0x5b, 0x56, 0x08, 0x89, 0xa8, 0x10, 0xf6, 0xd0, 0x84,
	0xb6, 0xe1, 0x54, 0x44, 0x05, 0x8d, 0x0e, 0xa8, 0x83, 0x53, 0xa6, 0xde, 0x4c, 0x72, 0x1e, 0x0d,
	0x7a, 0x95, 0xdb, 0x69, 0xce, 0x1f, 0x82, 0x7f, 0xe5, 0x95, 0x32, 0x4d, 0x36, 0xa3, 0x79, 0x38,
	0x25, 0xcf, 0xdf, 0x71, 0x39, 0x0b, 0x1c, 0x42, 0x03, 0xee, 0xab, 0x63, 0x32, 0xd6, 0x9e, 0x94,
	0xdb, 0xab, 0x9c, 0x05, 0x0d, 0xb9, 0x89, 0xd6, 0x60, 0xd1, 0x67, 0x81, 0x13, 0x46, 0xcc, 0xa5,
	0xea, 0x78, 0xf2, 0xc7, 0x0b, 0x3f, 0x7b, 0x95, 0xf9, 0x0e, 0x8b, 0x77, 0xf7, 0x77, 0x4c, 0x97,
	0xfb, 0x59, 0x0b, 0xd9, 0xcf, 0xa2, 0x20, 0x1f, 0x2c, 0x79, 0x88, 0xc2, 0x6c, 0x50, 0xd7, 0x2e,
	0xf8, 0x2c, 0x68, 0x4b, 0x6f, 0x12, 0x84, 0x8f, 0xb2, 0xa0, 0xc2, 0x7f, 0x04, 0xe1, 0xa3, 0x34,
	0xe8, 0x09, 0x9c, 0xf3, 0xb0, 0x88, 0x1d, 0x42, 0x43, 0x2e, 0x58, 0xec, 0x44, 0x74, 0x6f, 0x9f,
	0x8a, 0x58, 0xb6, 0x51, 0x94, 0x6d, 0xd8, 0x33, 0x12, 0x37, 0x52, 0x6a, 0xa7, 0xb0, 0x45, 0xd0,
	0x53, 0xa8, 0x26, 0xb6, 0x43, 0x16, 0xef, 0x92, 0x08, 0x1f, 0x5e, 0xf7, 0xc1, 0xc4, 0x37, 0x2b,
	0xf9, 0xeb, 0x0c, 0x8f, 0x8c, 0x1a, 0x2c, 0x10, 0x26, 0xf0, 0x8e, 0x47, 0x89, 0x3a, 0x61, 0x80,
	0x5a, 0xc1, 0xbe, 0x9a, 0x17, 0x3e, 0x03, 0x58, 0x18, 0x5e, 0x26, 0xb4, 0x0c, 0x67, 0xdb, 0x1b,
	0x1b, 0xaf, 0x9c, 0xad, 0xb7, 0xed, 0xa6, 0xb3, 0xbd, 0xbe, 0xd9, 0x6e, 0xae, 0xb6, 0x5e, 0xb6,
	0x9a, 0x8d, 0xb2, 0xa2, 0xcd, 0x1d, 0x9f, 0x18, 0xb7, 0x86, 0xc2, 0xed, 0x40, 0x84, 0xd4, 0x65,
	0xef, 0x19, 0x25, 0xb2, 0x86, 0x91, 0xa7, 0xbe, 0xb2, 0xd9, 0x5a, 0x2d, 0x03, 0x6d, 0xfa, 0xf8,
	0xc4, 0x98, 0xbc, 0xba, 0xa3, 0x58, 0x30, 0x17, 0xd5, 0x60, 0x79, 0xa4, 0xb3, 0x57, 0xd6, 0xd7,
	0x9a, 0x8d, 0x72, 0x4e, 0x43, 0xc7, 0x27, 0x46, 0x69, 0x28, 0xb4, 0x71, 0xd0, 0xa1, 0x44, 0xcb,
	0x7f, 0xfc, 0xa2, 0x2b, 0xf5, 0x37, 0xa7, 0x17, 0xba, 0x72, 0x76, 0xa1, 0x2b, 0xe7, 0x17, 0x3a,
	0xf8, 0xda, 0xd7, 0xc1, 0x69, 0x5f, 0x07, 0x67, 0x7d, 0x1d, 0x9c, 0xf7, 0x75, 0xf0, 0xe9, 0x52,
	0x57, 0xce, 0x2e, 0x75, 0xe5, 0xc7, 0xa5, 0xae, 0xbc, 0x33, 0xaf, 0x15, 0x20, 0x5f, 0xca, 0xa2,
	0x88, 0x71, 0xcc, 0x78, 0x90, 0x0c, 0xd6, 0xd1, 0xb5, 0x27, 0x9b, 0x94, 0xb1, 0x33, 0x96, 0xbc,
	0xb6, 0xc7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xf1, 0x7a, 0xf3, 0xd1, 0x03, 0x00, 0x00,
}

func (this *Pool) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Pool")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Pool but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Pool but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.PairId != that1.PairId {
		return fmt.Errorf("PairId this(%v) Not Equal that(%v)", this.PairId, that1.PairId)
	}
	if this.Creator != that1.Creator {
		return fmt.Errorf("Creator this(%v) Not Equal that(%v)", this.Creator, that1.Creator)
	}
	if this.ReserveAddress != that1.ReserveAddress {
		return fmt.Errorf("ReserveAddress this(%v) Not Equal that(%v)", this.ReserveAddress, that1.ReserveAddress)
	}
	if this.PoolCoinDenom != that1.PoolCoinDenom {
		return fmt.Errorf("PoolCoinDenom this(%v) Not Equal that(%v)", this.PoolCoinDenom, that1.PoolCoinDenom)
	}
	if that1.MinPrice == nil {
		if this.MinPrice != nil {
			return fmt.Errorf("this.MinPrice != nil && that1.MinPrice == nil")
		}
	} else if !this.MinPrice.Equal(*that1.MinPrice) {
		return fmt.Errorf("MinPrice this(%v) Not Equal that(%v)", this.MinPrice, that1.MinPrice)
	}
	if that1.MaxPrice == nil {
		if this.MaxPrice != nil {
			return fmt.Errorf("this.MaxPrice != nil && that1.MaxPrice == nil")
		}
	} else if !this.MaxPrice.Equal(*that1.MaxPrice) {
		return fmt.Errorf("MaxPrice this(%v) Not Equal that(%v)", this.MaxPrice, that1.MaxPrice)
	}
	if this.LastDepositRequestId != that1.LastDepositRequestId {
		return fmt.Errorf("LastDepositRequestId this(%v) Not Equal that(%v)", this.LastDepositRequestId, that1.LastDepositRequestId)
	}
	if this.LastWithdrawRequestId != that1.LastWithdrawRequestId {
		return fmt.Errorf("LastWithdrawRequestId this(%v) Not Equal that(%v)", this.LastWithdrawRequestId, that1.LastWithdrawRequestId)
	}
	if this.Disabled != that1.Disabled {
		return fmt.Errorf("Disabled this(%v) Not Equal that(%v)", this.Disabled, that1.Disabled)
	}
	return nil
}
func (this *Pool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pool)
	if !ok {
		that2, ok := that.(Pool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.PairId != that1.PairId {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.ReserveAddress != that1.ReserveAddress {
		return false
	}
	if this.PoolCoinDenom != that1.PoolCoinDenom {
		return false
	}
	if that1.MinPrice == nil {
		if this.MinPrice != nil {
			return false
		}
	} else if !this.MinPrice.Equal(*that1.MinPrice) {
		return false
	}
	if that1.MaxPrice == nil {
		if this.MaxPrice != nil {
			return false
		}
	} else if !this.MaxPrice.Equal(*that1.MaxPrice) {
		return false
	}
	if this.LastDepositRequestId != that1.LastDepositRequestId {
		return false
	}
	if this.LastWithdrawRequestId != that1.LastWithdrawRequestId {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	return true
}
func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.LastWithdrawRequestId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastWithdrawRequestId))
		i--
		dAtA[i] = 0x50
	}
	if m.LastDepositRequestId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastDepositRequestId))
		i--
		dAtA[i] = 0x48
	}
	if m.MaxPrice != nil {
		{
			size := m.MaxPrice.Size()
			i -= size
			if _, err := m.MaxPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MinPrice != nil {
		{
			size := m.MinPrice.Size()
			i -= size
			if _, err := m.MinPrice.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PoolCoinDenom) > 0 {
		i -= len(m.PoolCoinDenom)
		copy(dAtA[i:], m.PoolCoinDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.PoolCoinDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReserveAddress) > 0 {
		i -= len(m.ReserveAddress)
		copy(dAtA[i:], m.ReserveAddress)
		i = encodeVarintPool(dAtA, i, uint64(len(m.ReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if m.PairId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPool(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovPool(uint64(m.Id))
	}
	if m.PairId != 0 {
		n += 1 + sovPool(uint64(m.PairId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.ReserveAddress)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.PoolCoinDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.MinPrice != nil {
		l = m.MinPrice.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.MaxPrice != nil {
		l = m.MaxPrice.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.LastDepositRequestId != 0 {
		n += 1 + sovPool(uint64(m.LastDepositRequestId))
	}
	if m.LastWithdrawRequestId != 0 {
		n += 1 + sovPool(uint64(m.LastWithdrawRequestId))
	}
	if m.Disabled {
		n += 2
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PoolType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MinPrice = &v
			if err := m.MinPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.MaxPrice = &v
			if err := m.MaxPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDepositRequestId", wireType)
			}
			m.LastDepositRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDepositRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawRequestId", wireType)
			}
			m.LastWithdrawRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastWithdrawRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
