// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/order.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OrderType specifies the type of order
type OrderType int32

const (
	// ORDER_TYPE_UNSPECIFIED defines an unknown order type
	OrderTypeUnspecified OrderType = 0
	// ORDER_TYPE_MARKET defines a market order type
	OrderTypeMarket OrderType = 1
	// ORDER_TYPE_LIMIT defines a limit order type
	OrderTypeLimit OrderType = 2
	// ORDER_TYPE_MM defines a market maker order type
	OrderTypeMM OrderType = 3
)

var OrderType_name = map[int32]string{
	0: "ORDER_TYPE_UNSPECIFIED",
	1: "ORDER_TYPE_MARKET",
	2: "ORDER_TYPE_LIMIT",
	3: "ORDER_TYPE_MM",
}

var OrderType_value = map[string]int32{
	"ORDER_TYPE_UNSPECIFIED": 0,
	"ORDER_TYPE_MARKET":      1,
	"ORDER_TYPE_LIMIT":       2,
	"ORDER_TYPE_MM":          3,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}

func (OrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71b117091565b732, []int{0}
}

// OrderSide specifies the side of order
type OrderSide int32

const (
	// ORDER_SIDE_UNSPECIFIED defines an unknown order side
	OrderSideUnspecified OrderSide = 0
	// ORDER_SIDE_BUY defines a buy order side
	OrderSideBuy OrderSide = 1
	// ORDER_SIDE_SELL defines a sell order side
	OrderSideSell OrderSide = 2
)

var OrderSide_name = map[int32]string{
	0: "ORDER_SIDE_UNSPECIFIED",
	1: "ORDER_SIDE_BUY",
	2: "ORDER_SIDE_SELL",
}

var OrderSide_value = map[string]int32{
	"ORDER_SIDE_UNSPECIFIED": 0,
	"ORDER_SIDE_BUY":         1,
	"ORDER_SIDE_SELL":        2,
}

func (x OrderSide) String() string {
	return proto.EnumName(OrderSide_name, int32(x))
}

func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71b117091565b732, []int{1}
}

type OrderStatus int32

const (
	// ORDER_STATUS_UNSPECIFIED defines an unknown order status
	OrderStatusUnspecified OrderStatus = 0
	// ORDER_STATUS_OPEN defines an open order status
	OrderStatusOpen OrderStatus = 1
	// ORDER_STATUS_CLOSED defines a closed order status
	OrderStatusClosed OrderStatus = 2
	// ORDER_STATUS_CANCELLED defines a cancelled order status
	OrderStatusCancelled OrderStatus = 3
	// ORDER_STATUS_EXPIRED defines an expired order status
	OrderStatusExpired OrderStatus = 4
	// ORDER_STATUS_REJECTED defines a rejected order status
	OrderStatusRejected OrderStatus = 5
)

var OrderStatus_name = map[int32]string{
	0: "ORDER_STATUS_UNSPECIFIED",
	1: "ORDER_STATUS_OPEN",
	2: "ORDER_STATUS_CLOSED",
	3: "ORDER_STATUS_CANCELLED",
	4: "ORDER_STATUS_EXPIRED",
	5: "ORDER_STATUS_REJECTED",
}

var OrderStatus_value = map[string]int32{
	"ORDER_STATUS_UNSPECIFIED": 0,
	"ORDER_STATUS_OPEN":        1,
	"ORDER_STATUS_CLOSED":      2,
	"ORDER_STATUS_CANCELLED":   3,
	"ORDER_STATUS_EXPIRED":     4,
	"ORDER_STATUS_REJECTED":    5,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}

func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71b117091565b732, []int{2}
}

// Order defines an order.
type Order struct {
	// type specifies the typo of the order
	Type OrderType `protobuf:"varint,1,opt,name=type,proto3,enum=ollo.liquidity.v1.OrderType" json:"type,omitempty"`
	// id specifies the id of the order
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// pair_id specifies the pair id
	PairId uint64 `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	// msg_height specifies the block height when the order is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,4,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// orderer specifies the bech32-encoded address that makes an order
	Orderer string `protobuf:"bytes,5,opt,name=orderer,proto3" json:"orderer,omitempty" yaml:"withdrawer"`
	// direction specifies the order direction; either buy or sell
	Direction OrderSide  `protobuf:"varint,6,opt,name=direction,proto3,enum=ollo.liquidity.v1.OrderSide" json:"direction,omitempty"`
	OfferCoin types.Coin `protobuf:"bytes,7,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin"`
	// remaining_offer_coin specifies the remaining offer coin
	RemainingOfferCoin types.Coin `protobuf:"bytes,8,opt,name=remaining_offer_coin,json=remainingOfferCoin,proto3" json:"remaining_offer_coin"`
	// received_coin specifies the received coin after the swap
	ReceivedCoin types.Coin `protobuf:"bytes,9,opt,name=received_coin,json=receivedCoin,proto3" json:"received_coin"`
	// price specifies the price that an orderer is willing to swap
	Price      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	Amount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	OpenAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=open_amount,json=openAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"open_amount"`
	// batch_id specifies the pair's batch id when the request is stored
	BatchId  uint64      `protobuf:"varint,13,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	ExpireAt time.Time   `protobuf:"bytes,14,opt,name=expire_at,json=expireAt,proto3,stdtime" json:"expire_at"`
	Status   OrderStatus `protobuf:"varint,15,opt,name=status,proto3,enum=ollo.liquidity.v1.OrderStatus" json:"status,omitempty"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_71b117091565b732, []int{0}
}
func (m *Order) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Order.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return m.Size()
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

// MMOrderIndex defines an index type to quickly find market making orders
// from an orderer.
type MMOrderIndex struct {
	Orderer  string   `protobuf:"bytes,1,opt,name=orderer,proto3" json:"orderer,omitempty"`
	PairId   uint64   `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	OrderIds []uint64 `protobuf:"varint,3,rep,packed,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (m *MMOrderIndex) Reset()         { *m = MMOrderIndex{} }
func (m *MMOrderIndex) String() string { return proto.CompactTextString(m) }
func (*MMOrderIndex) ProtoMessage()    {}
func (*MMOrderIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_71b117091565b732, []int{1}
}
func (m *MMOrderIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MMOrderIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MMOrderIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MMOrderIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MMOrderIndex.Merge(m, src)
}
func (m *MMOrderIndex) XXX_Size() int {
	return m.Size()
}
func (m *MMOrderIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_MMOrderIndex.DiscardUnknown(m)
}

var xxx_messageInfo_MMOrderIndex proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ollo.liquidity.v1.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("ollo.liquidity.v1.OrderSide", OrderSide_name, OrderSide_value)
	proto.RegisterEnum("ollo.liquidity.v1.OrderStatus", OrderStatus_name, OrderStatus_value)
	proto.RegisterType((*Order)(nil), "ollo.liquidity.v1.Order")
	proto.RegisterType((*MMOrderIndex)(nil), "ollo.liquidity.v1.MMOrderIndex")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/order.proto", fileDescriptor_71b117091565b732) }

var fileDescriptor_71b117091565b732 = []byte{
	// 991 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0xc7, 0xe3, 0x24, 0x4d, 0x9b, 0xe9, 0x9b, 0x3b, 0xdb, 0xed, 0xba, 0x86, 0x4d, 0xad, 0x0a,
	0xad, 0xa2, 0x4a, 0xb5, 0xb7, 0x65, 0x85, 0xd0, 0x1e, 0x90, 0xf2, 0xe2, 0x05, 0x43, 0xd2, 0x14,
	0x27, 0x95, 0x58, 0x0e, 0x58, 0x8e, 0x67, 0xea, 0x0e, 0xeb, 0x37, 0xec, 0x49, 0xb7, 0xfd, 0x06,
	0xc8, 0xa7, 0xbd, 0x70, 0xf4, 0x89, 0xaf, 0xc0, 0x17, 0xe0, 0x80, 0xd4, 0xe3, 0x0a, 0x71, 0x40,
	0x1c, 0x0a, 0xb4, 0xdf, 0x80, 0x4f, 0x80, 0x3c, 0x76, 0x52, 0x77, 0x97, 0x45, 0x0b, 0xa7, 0x64,
	0x66, 0x7e, 0xff, 0xbf, 0xe7, 0xf9, 0xfb, 0x79, 0x64, 0x70, 0xdf, 0x77, 0x1c, 0x5f, 0x71, 0xc8,
	0x37, 0x13, 0x82, 0x08, 0x3d, 0x57, 0x4e, 0xf7, 0x14, 0x3f, 0x44, 0x38, 0x94, 0x83, 0xd0, 0xa7,
	0x3e, 0x5c, 0x4b, 0x8f, 0xe5, 0xd9, 0xb1, 0x7c, 0xba, 0x27, 0x6e, 0x5a, 0x7e, 0xe4, 0xfa, 0x91,
	0xc1, 0x00, 0x25, 0x5b, 0x64, 0xb4, 0x28, 0xbe, 0x6e, 0x46, 0xcf, 0xf2, 0xb3, 0x75, 0xdb, 0xb7,
	0xfd, 0x4c, 0x93, 0xfe, 0xcb, 0x77, 0x1b, 0x99, 0x5e, 0x19, 0x9b, 0x11, 0x56, 0x4e, 0xf7, 0xc6,
	0x98, 0x9a, 0x7b, 0x8a, 0xe5, 0x13, 0x2f, 0x3f, 0xdf, 0xb2, 0x7d, 0xdf, 0x76, 0xb0, 0xc2, 0x56,
	0xe3, 0xc9, 0xb1, 0x42, 0x89, 0x8b, 0x23, 0x6a, 0xba, 0xc1, 0xd4, 0xe0, 0x55, 0x00, 0x4d, 0x42,
	0x93, 0x12, 0x3f, 0x37, 0xd8, 0xfe, 0xa5, 0x06, 0xe6, 0x06, 0x69, 0x41, 0xf0, 0x21, 0xa8, 0xd2,
	0xf3, 0x00, 0x0b, 0x9c, 0xc4, 0x35, 0x57, 0xf6, 0xdf, 0x95, 0x5f, 0xab, 0x4c, 0x66, 0xdc, 0xe8,
	0x3c, 0xc0, 0x3a, 0x23, 0xe1, 0x0a, 0x28, 0x13, 0x24, 0x94, 0x25, 0xae, 0x59, 0xd5, 0xcb, 0x04,
	0xc1, 0x7b, 0x60, 0x3e, 0x30, 0x49, 0x68, 0x10, 0x24, 0x54, 0xd8, 0x66, 0x2d, 0x5d, 0x6a, 0x08,
	0xde, 0x07, 0xc0, 0x8d, 0x6c, 0xe3, 0x04, 0x13, 0xfb, 0x84, 0x0a, 0x55, 0x89, 0x6b, 0x56, 0xf4,
	0xba, 0x1b, 0xd9, 0x9f, 0xb0, 0x0d, 0xf8, 0x31, 0x98, 0x67, 0x99, 0xe2, 0x50, 0x98, 0x93, 0xb8,
	0x66, 0xbd, 0xbd, 0xfb, 0xd7, 0xe5, 0xd6, 0xda, 0xb9, 0xe9, 0x3a, 0x8f, 0xb7, 0x9f, 0x13, 0x7a,
	0x82, 0x42, 0xf3, 0x39, 0x0e, 0xb7, 0x7f, 0xfe, 0x61, 0x77, 0x3d, 0x8f, 0xb3, 0x85, 0x50, 0x88,
	0xa3, 0x68, 0x48, 0x43, 0xe2, 0xd9, 0xfa, 0x54, 0x0d, 0x1f, 0x83, 0x3a, 0x22, 0x21, 0xb6, 0xd2,
	0xfa, 0x84, 0xda, 0xbf, 0xd7, 0x31, 0x24, 0x08, 0xeb, 0x37, 0x38, 0xfc, 0x08, 0x00, 0xff, 0xf8,
	0x18, 0x87, 0x46, 0x9a, 0xae, 0x30, 0x2f, 0x71, 0xcd, 0xc5, 0xfd, 0x4d, 0x39, 0x7f, 0x5e, 0x1a,
	0xbf, 0x9c, 0xc7, 0x2f, 0x77, 0x7c, 0xe2, 0xb5, 0xab, 0x17, 0x97, 0x5b, 0x25, 0xbd, 0xce, 0x24,
	0xe9, 0x06, 0xfc, 0x1c, 0xac, 0x87, 0xd8, 0x35, 0x89, 0x47, 0x3c, 0xdb, 0x28, 0x38, 0x2d, 0xbc,
	0x9d, 0x13, 0x9c, 0x89, 0x07, 0x33, 0xcb, 0x2e, 0x58, 0x0e, 0xb1, 0x85, 0xc9, 0x29, 0x46, 0x99,
	0x57, 0xfd, 0xed, 0xbc, 0x96, 0xa6, 0xaa, 0xdc, 0x65, 0x2e, 0x08, 0x89, 0x85, 0x05, 0xc0, 0xb2,
	0x95, 0x53, 0xe4, 0xb7, 0xcb, 0xad, 0x07, 0x36, 0xa1, 0x27, 0x93, 0xb1, 0x6c, 0xf9, 0x6e, 0xde,
	0xa4, 0xf9, 0xcf, 0x6e, 0x84, 0x9e, 0x29, 0xe9, 0xfb, 0x8d, 0xe4, 0x2e, 0xb6, 0xf4, 0x4c, 0x0c,
	0x9f, 0x80, 0x9a, 0xe9, 0xfa, 0x13, 0x8f, 0x0a, 0x8b, 0xff, 0xd9, 0x46, 0xf3, 0xa8, 0x9e, 0xab,
	0xe1, 0x00, 0x2c, 0xfa, 0x01, 0xf6, 0x8c, 0xdc, 0x6c, 0xe9, 0x7f, 0x99, 0x81, 0xd4, 0xa2, 0x95,
	0x19, 0x6e, 0x82, 0x85, 0xb1, 0x49, 0xad, 0x93, 0xb4, 0xeb, 0x96, 0x59, 0xd7, 0xcd, 0xb3, 0xb5,
	0x86, 0x60, 0x0b, 0xd4, 0xf1, 0x59, 0x40, 0x42, 0x6c, 0x98, 0x54, 0x58, 0x61, 0xd9, 0x89, 0x72,
	0x36, 0x0f, 0xf2, 0x74, 0x1e, 0xe4, 0xd1, 0x74, 0x60, 0xda, 0x0b, 0xe9, 0x2d, 0x5e, 0xfc, 0xbe,
	0xc5, 0xe9, 0x0b, 0x99, 0xac, 0x45, 0xe1, 0x07, 0xa0, 0x16, 0x51, 0x93, 0x4e, 0x22, 0x61, 0x95,
	0xb5, 0x53, 0xe3, 0x8d, 0xed, 0xc4, 0x28, 0x3d, 0xa7, 0xb7, 0xbf, 0x02, 0x4b, 0xfd, 0x3e, 0x3b,
	0xd0, 0x3c, 0x84, 0xcf, 0xa0, 0x70, 0xd3, 0xe2, 0xe9, 0x7c, 0xd5, 0x6f, 0x7a, 0xb6, 0x30, 0x34,
	0xe5, 0x5b, 0x43, 0xf3, 0x0e, 0xa8, 0x33, 0xc6, 0x20, 0x28, 0x12, 0x2a, 0x52, 0xa5, 0x59, 0xd5,
	0x17, 0xd8, 0x86, 0x86, 0xa2, 0x9d, 0x1f, 0x39, 0x50, 0x9f, 0x8d, 0x23, 0x7c, 0x04, 0x36, 0x06,
	0x7a, 0x57, 0xd5, 0x8d, 0xd1, 0xd3, 0x43, 0xd5, 0x38, 0x3a, 0x18, 0x1e, 0xaa, 0x1d, 0xed, 0x89,
	0xa6, 0x76, 0xf9, 0x92, 0x28, 0xc4, 0x89, 0xb4, 0x3e, 0x43, 0x8f, 0xbc, 0x28, 0xc0, 0x16, 0x39,
	0x26, 0x18, 0xc1, 0x1d, 0xb0, 0x56, 0x50, 0xf5, 0x5b, 0xfa, 0x67, 0xea, 0x88, 0xe7, 0xc4, 0x3b,
	0x71, 0x22, 0xad, 0xce, 0x04, 0x7d, 0x33, 0x7c, 0x86, 0x29, 0x6c, 0x02, 0xbe, 0xc0, 0xf6, 0xb4,
	0xbe, 0x36, 0xe2, 0xcb, 0x22, 0x8c, 0x13, 0x69, 0x65, 0x86, 0xf6, 0x88, 0x4b, 0x28, 0xdc, 0x06,
	0xcb, 0x45, 0xd7, 0x3e, 0x5f, 0x11, 0x57, 0xe3, 0x44, 0x5a, 0xbc, 0x71, 0xec, 0x8b, 0xd5, 0x6f,
	0xbf, 0x6f, 0x94, 0x76, 0xbe, 0x9b, 0xd6, 0x90, 0x8e, 0xe2, 0x4d, 0x0d, 0x43, 0xad, 0xfb, 0xe6,
	0x1a, 0x52, 0xb4, 0x58, 0xc3, 0x7b, 0x60, 0xa5, 0xa0, 0x6a, 0x1f, 0x3d, 0xe5, 0x39, 0x91, 0x8f,
	0x13, 0x69, 0x69, 0x46, 0xb7, 0x27, 0xe7, 0xf0, 0x01, 0x58, 0x2d, 0x50, 0x43, 0xb5, 0xd7, 0xe3,
	0xcb, 0xe2, 0x5a, 0x9c, 0x48, 0xcb, 0x33, 0x6c, 0x88, 0x1d, 0x27, 0xbf, 0xd7, 0x4f, 0x65, 0xb0,
	0x58, 0x78, 0xa7, 0xf0, 0x43, 0x20, 0xe4, 0xea, 0x51, 0x6b, 0x74, 0x34, 0x7c, 0xe5, 0x6e, 0x62,
	0x9c, 0x48, 0x1b, 0x05, 0xfc, 0x1f, 0x13, 0xce, 0x95, 0x83, 0x43, 0xf5, 0xe0, 0x56, 0xc2, 0x99,
	0x64, 0x10, 0x60, 0x0f, 0xca, 0xe0, 0xce, 0x2d, 0xb6, 0xd3, 0x1b, 0x0c, 0xd5, 0x2e, 0x5f, 0x16,
	0xef, 0xc6, 0x89, 0xb4, 0x56, 0xa0, 0x3b, 0x8e, 0x1f, 0x61, 0x54, 0xc8, 0x2b, 0xe7, 0x5b, 0x07,
	0x1d, 0xb5, 0xd7, 0x53, 0xbb, 0x7c, 0xa5, 0x98, 0x57, 0x26, 0x31, 0x3d, 0x0b, 0x3b, 0x0e, 0x46,
	0xf0, 0x21, 0x58, 0xbf, 0xa5, 0x52, 0xbf, 0x38, 0xd4, 0x74, 0xb5, 0xcb, 0x57, 0xc5, 0x8d, 0x38,
	0x91, 0x60, 0x41, 0xa3, 0xb2, 0x11, 0x40, 0x70, 0x1f, 0xdc, 0xbd, 0xa5, 0xd0, 0xd5, 0x4f, 0xd5,
	0xce, 0x48, 0xed, 0xf2, 0x73, 0xe2, 0xbd, 0x38, 0x91, 0xee, 0x14, 0xbb, 0x1f, 0x7f, 0x8d, 0x2d,
	0x8a, 0x51, 0x96, 0x63, 0xfb, 0xd1, 0xc5, 0x9f, 0x8d, 0xd2, 0xc5, 0x55, 0x83, 0x7b, 0x79, 0xd5,
	0xe0, 0xfe, 0xb8, 0x6a, 0x70, 0x2f, 0xae, 0x1b, 0xa5, 0x97, 0xd7, 0x8d, 0xd2, 0xaf, 0xd7, 0x8d,
	0xd2, 0x97, 0x1b, 0xec, 0x5b, 0x78, 0x56, 0xf8, 0x1a, 0xb2, 0xf9, 0x1e, 0xd7, 0xd8, 0x64, 0xbe,
	0xff, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0xe2, 0x82, 0xeb, 0x79, 0x07, 0x00, 0x00,
}

func (m *Order) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x78
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ExpireAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintOrder(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x72
	if m.BatchId != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.BatchId))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.OpenAmount.Size()
		i -= size
		if _, err := m.OpenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.ReceivedCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.RemainingOfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.OfferCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Direction != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Orderer) > 0 {
		i -= len(m.Orderer)
		copy(dAtA[i:], m.Orderer)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Orderer)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MsgHeight != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.PairId != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MMOrderIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MMOrderIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MMOrderIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		dAtA6 := make([]byte, len(m.OrderIds)*10)
		var j5 int
		for _, num := range m.OrderIds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintOrder(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if m.PairId != 0 {
		i = encodeVarintOrder(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Orderer) > 0 {
		i -= len(m.Orderer)
		copy(dAtA[i:], m.Orderer)
		i = encodeVarintOrder(dAtA, i, uint64(len(m.Orderer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOrder(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovOrder(uint64(m.Id))
	}
	if m.PairId != 0 {
		n += 1 + sovOrder(uint64(m.PairId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovOrder(uint64(m.MsgHeight))
	}
	l = len(m.Orderer)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.Direction != 0 {
		n += 1 + sovOrder(uint64(m.Direction))
	}
	l = m.OfferCoin.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.RemainingOfferCoin.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.ReceivedCoin.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.Price.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovOrder(uint64(l))
	l = m.OpenAmount.Size()
	n += 1 + l + sovOrder(uint64(l))
	if m.BatchId != 0 {
		n += 1 + sovOrder(uint64(m.BatchId))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ExpireAt)
	n += 1 + l + sovOrder(uint64(l))
	if m.Status != 0 {
		n += 1 + sovOrder(uint64(m.Status))
	}
	return n
}

func (m *MMOrderIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Orderer)
	if l > 0 {
		n += 1 + l + sovOrder(uint64(l))
	}
	if m.PairId != 0 {
		n += 1 + sovOrder(uint64(m.PairId))
	}
	if len(m.OrderIds) > 0 {
		l = 0
		for _, e := range m.OrderIds {
			l += sovOrder(uint64(e))
		}
		n += 1 + sovOrder(uint64(l)) + l
	}
	return n
}

func sovOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOrder(x uint64) (n int) {
	return sovOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Order) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Order: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= OrderSide(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingOfferCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingOfferCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceivedCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReceivedCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OpenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
			}
			m.BatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ExpireAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MMOrderIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MMOrderIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MMOrderIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orderer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OrderIds = append(m.OrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrder
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOrder
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOrder
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OrderIds) == 0 {
					m.OrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrder
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OrderIds = append(m.OrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOrder = fmt.Errorf("proto: unexpected end of group")
)
