// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/deposit.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DepositRequest defines a deposit request.
type DepositRequest struct {
	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// depositor specifies the bech32-encoded address that makes a deposit to the pool
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty" yaml:"depositor"`
	// deposit_coins specifies the amount of coins to deposit.
	DepositCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=deposit_coins,json=depositCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit_coins"`
	// accepted_coins specifies the amount of coins that are accepted.
	AcceptedCoins  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=accepted_coins,json=acceptedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"accepted_coins"`
	MintedPoolCoin types.Coin                               `protobuf:"bytes,7,opt,name=minted_pool_coin,json=mintedPoolCoin,proto3" json:"minted_pool_coin"`
	Status         RequestStatus                            `protobuf:"varint,8,opt,name=status,proto3,enum=ollo.liquidity.v1.RequestStatus" json:"status,omitempty"`
}

func (m *DepositRequest) Reset()         { *m = DepositRequest{} }
func (m *DepositRequest) String() string { return proto.CompactTextString(m) }
func (*DepositRequest) ProtoMessage()    {}
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25e14b7c6bc855b, []int{0}
}
func (m *DepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositRequest.Merge(m, src)
}
func (m *DepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *DepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DepositRequest)(nil), "ollo.liquidity.v1.DepositRequest")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/deposit.proto", fileDescriptor_f25e14b7c6bc855b) }

var fileDescriptor_f25e14b7c6bc855b = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0xb5, 0x93, 0x90, 0x23, 0x0b, 0x67, 0x1d, 0xd6, 0x09, 0x7c, 0x91, 0x70, 0xac, 0x54, 0x2e,
	0xb8, 0x5d, 0x72, 0x50, 0x20, 0x3a, 0x02, 0x05, 0x47, 0x85, 0x7c, 0x1d, 0x4d, 0x64, 0x7b, 0x97,
	0xcd, 0x0a, 0x3b, 0xe3, 0xf3, 0xae, 0x23, 0xf2, 0x15, 0xf0, 0x1d, 0xd4, 0x7c, 0x44, 0xca, 0x13,
	0x15, 0xd5, 0x01, 0xc9, 0x1f, 0xf0, 0x05, 0x68, 0xd7, 0x9b, 0x03, 0x01, 0xa2, 0xa2, 0xb2, 0xdf,
	0xcc, 0x9b, 0xf7, 0x3c, 0xcf, 0x83, 0x46, 0x50, 0x14, 0x40, 0x0a, 0x71, 0xde, 0x08, 0x2a, 0xd4,
	0x8a, 0x2c, 0x27, 0x84, 0xb2, 0x0a, 0xa4, 0x50, 0xb8, 0xaa, 0x41, 0x81, 0x7f, 0x4b, 0x13, 0xf0,
	0x15, 0x01, 0x2f, 0x27, 0xc3, 0x43, 0x0e, 0x1c, 0x4c, 0x97, 0xe8, 0xb7, 0x96, 0x38, 0xfc, 0x8b,
	0x52, 0xcd, 0xce, 0x1b, 0x26, 0xad, 0xd2, 0xf0, 0x28, 0x07, 0x59, 0x82, 0x9c, 0xb5, 0x93, 0x2d,
	0xb0, 0xad, 0xb0, 0x45, 0x24, 0x4b, 0x25, 0x23, 0xcb, 0x49, 0xc6, 0x54, 0x3a, 0x21, 0x39, 0x88,
	0xc5, 0x4e, 0x9b, 0x03, 0xf0, 0x82, 0x11, 0x83, 0xb2, 0xe6, 0x35, 0x51, 0xa2, 0x64, 0x52, 0xa5,
	0x65, 0xb5, 0x13, 0xf8, 0x9d, 0x40, 0x9b, 0x3a, 0x55, 0x02, 0xac, 0xc0, 0xf8, 0x5d, 0x0f, 0x79,
	0xcf, 0xda, 0xbd, 0x92, 0xf6, 0xa3, 0x7c, 0x0f, 0x75, 0x04, 0x0d, 0xdc, 0xc8, 0x8d, 0x7b, 0x49,
	0x47, 0x50, 0xff, 0x0e, 0xda, 0xab, 0x00, 0x8a, 0x99, 0xa0, 0x41, 0xc7, 0x14, 0xfb, 0x1a, 0x9e,
	0x52, 0xff, 0x2e, 0x42, 0xa5, 0xe4, 0xb3, 0x39, 0x13, 0x7c, 0xae, 0x82, 0x6e, 0xe4, 0xc6, 0xdd,
	0x64, 0x50, 0x4a, 0xfe, 0xdc, 0x14, 0xfc, 0x17, 0x68, 0x60, 0x13, 0x83, 0x3a, 0xe8, 0x45, 0x6e,
	0x3c, 0x98, 0xde, 0xfb, 0x7e, 0x39, 0x3a, 0x58, 0xa5, 0x65, 0xf1, 0x78, 0x7c, 0xd5, 0x1a, 0x7f,
	0xfa, 0x78, 0x7c, 0x68, 0x97, 0x7e, 0x42, 0x69, 0xcd, 0xa4, 0x3c, 0x53, 0xb5, 0x58, 0xf0, 0xe4,
	0xe7, 0xb8, 0x5f, 0xa1, 0x7d, 0x0b, 0x66, 0x7a, 0x7b, 0x19, 0x5c, 0x8b, 0xba, 0xf1, 0x8d, 0x93,
	0x23, 0x6c, 0x07, 0x75, 0x3e, 0xd8, 0xe6, 0x83, 0x9f, 0x82, 0x58, 0x4c, 0xef, 0xaf, 0x2f, 0x47,
	0xce, 0x87, 0x2f, 0xa3, 0x98, 0x0b, 0x35, 0x6f, 0x32, 0x9c, 0x43, 0x69, 0xa3, 0xb5, 0x8f, 0x63,
	0x49, 0xdf, 0x10, 0xb5, 0xaa, 0x98, 0x34, 0x03, 0x32, 0xb9, 0x69, 0x1d, 0x0c, 0xf2, 0x6b, 0xe4,
	0xa5, 0x79, 0xce, 0x2a, 0xc5, 0xa8, 0xb5, 0xec, 0xff, 0x7f, 0xcb, 0xfd, 0x9d, 0x45, 0xeb, 0x79,
	0x8a, 0x0e, 0x4a, 0xb1, 0xd0, 0x8e, 0x26, 0x70, 0x6d, 0x1b, 0xec, 0x45, 0xee, 0xbf, 0x5d, 0x7b,
	0xda, 0x35, 0xf1, 0xda, 0xc1, 0x97, 0x00, 0x85, 0xae, 0xfa, 0x8f, 0x50, 0x5f, 0xaa, 0x54, 0x35,
	0x32, 0xb8, 0x1e, 0xb9, 0xb1, 0x77, 0x12, 0xe1, 0x3f, 0xce, 0x15, 0xdb, 0x1f, 0x7e, 0x66, 0x78,
	0x89, 0xe5, 0x4f, 0x1f, 0xae, 0xbf, 0x85, 0xce, 0x7a, 0x13, 0xba, 0x17, 0x9b, 0xd0, 0xfd, 0xba,
	0x09, 0xdd, 0xf7, 0xdb, 0xd0, 0xb9, 0xd8, 0x86, 0xce, 0xe7, 0x6d, 0xe8, 0xbc, 0xba, 0x6d, 0x8e,
	0xf9, 0xed, 0x2f, 0xe7, 0x6c, 0xf6, 0xc9, 0xfa, 0xe6, 0x9c, 0x1e, 0xfc, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x8b, 0xd8, 0x93, 0x5f, 0x37, 0x03, 0x00, 0x00,
}

func (m *DepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.MintedPoolCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.AcceptedCoins) > 0 {
		for iNdEx := len(m.AcceptedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AcceptedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeposit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DepositCoins) > 0 {
		for iNdEx := len(m.DepositCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeposit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0x22
	}
	if m.MsgHeight != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.MsgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.PoolId != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeposit(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeposit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDeposit(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovDeposit(uint64(m.PoolId))
	}
	if m.MsgHeight != 0 {
		n += 1 + sovDeposit(uint64(m.MsgHeight))
	}
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	if len(m.DepositCoins) > 0 {
		for _, e := range m.DepositCoins {
			l = e.Size()
			n += 1 + l + sovDeposit(uint64(l))
		}
	}
	if len(m.AcceptedCoins) > 0 {
		for _, e := range m.AcceptedCoins {
			l = e.Size()
			n += 1 + l + sovDeposit(uint64(l))
		}
	}
	l = m.MintedPoolCoin.Size()
	n += 1 + l + sovDeposit(uint64(l))
	if m.Status != 0 {
		n += 1 + sovDeposit(uint64(m.Status))
	}
	return n
}

func sovDeposit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeposit(x uint64) (n int) {
	return sovDeposit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
			}
			m.MsgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositCoins = append(m.DepositCoins, types.Coin{})
			if err := m.DepositCoins[len(m.DepositCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptedCoins = append(m.AcceptedCoins, types.Coin{})
			if err := m.AcceptedCoins[len(m.AcceptedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedPoolCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintedPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeposit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeposit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeposit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeposit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeposit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeposit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeposit = fmt.Errorf("proto: unexpected end of group")
)
