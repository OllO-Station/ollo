// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/ranged.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RangedPool struct {
}

func (m *RangedPool) Reset()         { *m = RangedPool{} }
func (m *RangedPool) String() string { return proto.CompactTextString(m) }
func (*RangedPool) ProtoMessage()    {}
func (*RangedPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_7961e939ee5a0ee2, []int{0}
}
func (m *RangedPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RangedPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RangedPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RangedPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangedPool.Merge(m, src)
}
func (m *RangedPool) XXX_Size() int {
	return m.Size()
}
func (m *RangedPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RangedPool.DiscardUnknown(m)
}

var xxx_messageInfo_RangedPool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RangedPool)(nil), "ollo.liquidity.v1.RangedPool")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/ranged.proto", fileDescriptor_7961e939ee5a0ee2) }

var fileDescriptor_7961e939ee5a0ee2 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4e, 0xc4, 0x30,
	0x10, 0x45, 0x93, 0x86, 0x22, 0xa2, 0x01, 0xd1, 0xb0, 0xc5, 0x20, 0xd1, 0xe3, 0x91, 0xc5, 0x0d,
	0xa8, 0x29, 0x10, 0x25, 0x0d, 0xb2, 0x13, 0x63, 0x2c, 0xd9, 0x3b, 0x21, 0x1e, 0x47, 0xec, 0x2d,
	0x38, 0xd6, 0x96, 0x5b, 0x52, 0x42, 0x72, 0x11, 0x14, 0x3b, 0x20, 0xb4, 0x9d, 0x9f, 0xde, 0xd7,
	0xf7, 0xcc, 0x34, 0x40, 0xde, 0x13, 0x7a, 0xf7, 0x96, 0x5c, 0xe7, 0x78, 0x87, 0xa3, 0xc4, 0x41,
	0x6d, 0xad, 0xe9, 0x44, 0x3f, 0x10, 0xd3, 0xf9, 0xd9, 0xe2, 0xc5, 0x9f, 0x17, 0xa3, 0xdc, 0x5c,
	0x58, 0xb2, 0x94, 0x2d, 0x2e, 0xaf, 0x12, 0xdc, 0x5c, 0xb6, 0x14, 0x03, 0xc5, 0xe7, 0x22, 0x0a,
	0xac, 0x0a, 0x0a, 0xa1, 0x56, 0xd1, 0xe0, 0x28, 0xb5, 0x61, 0x25, 0xb1, 0x25, 0xb7, 0x5d, 0xfd,
	0x95, 0x25, 0xb2, 0xde, 0x60, 0x26, 0x9d, 0x5e, 0x90, 0x5d, 0x30, 0x91, 0x55, 0xe8, 0x7f, 0x0b,
	0x8e, 0x03, 0x5d, 0x1a, 0x14, 0x3b, 0x5a, 0x0b, 0xae, 0x4f, 0x9b, 0xe6, 0x31, 0x0f, 0xfd, 0x40,
	0xe4, 0xef, 0xee, 0xf7, 0xdf, 0x50, 0xed, 0x27, 0xa8, 0x0f, 0x13, 0xd4, 0x5f, 0x13, 0xd4, 0x1f,
	0x33, 0x54, 0x87, 0x19, 0xaa, 0xcf, 0x19, 0xaa, 0x27, 0x61, 0x1d, 0xbf, 0x26, 0x2d, 0x5a, 0x0a,
	0xb8, 0xec, 0x76, 0x13, 0x39, 0x57, 0x65, 0xc0, 0xf7, 0x7f, 0xa7, 0xe0, 0x5d, 0x6f, 0xa2, 0x3e,
	0xc9, 0x5f, 0xdc, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x20, 0x0b, 0x88, 0x2b, 0x29, 0x01, 0x00,
	0x00,
}

func (m *RangedPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RangedPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RangedPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintRanged(dAtA []byte, offset int, v uint64) int {
	offset -= sovRanged(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RangedPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovRanged(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRanged(x uint64) (n int) {
	return sovRanged(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RangedPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRanged
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RangedPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RangedPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRanged(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRanged
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRanged(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRanged
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRanged
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRanged
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRanged
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRanged
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRanged
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRanged        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRanged          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRanged = fmt.Errorf("proto: unexpected end of group")
)
