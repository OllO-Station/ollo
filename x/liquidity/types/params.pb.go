// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/liquidity/v1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidityParams struct {
	BatchSize                    uint32                                   `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	TickPrecision                uint32                                   `protobuf:"varint,2,opt,name=tick_precision,json=tickPrecision,proto3" json:"tick_precision,omitempty"`
	FeeCollectorAddress          string                                   `protobuf:"bytes,3,opt,name=fee_collector_address,json=feeCollectorAddress,proto3" json:"fee_collector_address,omitempty" yaml:"fee_collector_address"`
	DustCollectorAddress         string                                   `protobuf:"bytes,4,opt,name=dust_collector_address,json=dustCollectorAddress,proto3" json:"dust_collector_address,omitempty" yaml:"dust_collector_address"`
	MinInitialPoolCoinSupply     github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,5,opt,name=min_initial_pool_coin_supply,json=minInitialPoolCoinSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_initial_pool_coin_supply" yaml:"min_initial_pool_coin_supply"`
	PairCreationFee              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=pair_creation_fee,json=pairCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pair_creation_fee"`
	PoolCreationFee              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=pool_creation_fee,json=poolCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pool_creation_fee"`
	MinInitialDepositAmount      github_com_cosmos_cosmos_sdk_types.Int   `protobuf:"bytes,8,opt,name=min_initial_deposit_amount,json=minInitialDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_initial_deposit_amount"`
	MaxPriceLimitRatio           github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,9,opt,name=max_price_limit_ratio,json=maxPriceLimitRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_price_limit_ratio"`
	MaxNumMarketMakingOrderTicks uint32                                   `protobuf:"varint,10,opt,name=max_num_market_making_order_ticks,json=maxNumMarketMakingOrderTicks,proto3" json:"max_num_market_making_order_ticks,omitempty"`
	MaxOrderLifespan             time.Duration                            `protobuf:"bytes,11,opt,name=max_order_lifespan,json=maxOrderLifespan,proto3,stdduration" json:"max_order_lifespan"`
	SwapFeeRate                  github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,12,opt,name=swap_fee_rate,json=swapFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_fee_rate"`
	WithdrawFeeRate              github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,13,opt,name=withdraw_fee_rate,json=withdrawFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"withdraw_fee_rate"`
	DepositExtraGas              github_com_cosmos_cosmos_sdk_types.Gas   `protobuf:"varint,14,opt,name=deposit_extra_gas,json=depositExtraGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Gas" json:"deposit_extra_gas"`
	WithdrawExtraGas             github_com_cosmos_cosmos_sdk_types.Gas   `protobuf:"varint,15,opt,name=withdraw_extra_gas,json=withdrawExtraGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Gas" json:"withdraw_extra_gas"`
	OrderExtraGas                github_com_cosmos_cosmos_sdk_types.Gas   `protobuf:"varint,16,opt,name=order_extra_gas,json=orderExtraGas,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Gas" json:"order_extra_gas"`
	MaxNumActivePoolsPerPair     uint32                                   `protobuf:"varint,17,opt,name=max_num_active_pools_per_pair,json=maxNumActivePoolsPerPair,proto3" json:"max_num_active_pools_per_pair,omitempty"`
}

func (m *LiquidityParams) Reset()         { *m = LiquidityParams{} }
func (m *LiquidityParams) String() string { return proto.CompactTextString(m) }
func (*LiquidityParams) ProtoMessage()    {}
func (*LiquidityParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_91d8ce8253a8329b, []int{0}
}
func (m *LiquidityParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityParams.Merge(m, src)
}
func (m *LiquidityParams) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityParams.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityParams proto.InternalMessageInfo

// Params defines the parameters for the liquidity module.
type Params struct {
	// list of available pool types
	PoolTypes []PoolType `protobuf:"bytes,1,rep,name=pool_types,json=poolTypes,proto3" json:"pool_types" yaml:"pool_types"`
	// Minimum number of coins to be deposited to the liquidity pool on pool
	// creation.
	MinInitDepositAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=min_init_deposit_amount,json=minInitDepositAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_init_deposit_amount" yaml:"min_init_deposit_amount"`
	// Initial mint amount of pool coins upon pool creation.
	InitPoolCoinMintAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=init_pool_coin_mint_amount,json=initPoolCoinMintAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"init_pool_coin_mint_amount" yaml:"init_pool_coin_mint_amount"`
	// Limit the size of each liquidity pool to minimize risk. In development, set
	// to 0 for no limit. In production, set a limit.
	MaxReserveCoinAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=max_reserve_coin_amount,json=maxReserveCoinAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_reserve_coin_amount" yaml:"max_reserve_coin_amount"`
	// Fee paid to create a Liquidity Pool. Set a fee to prevent spamming.
	PoolCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=pool_creation_fee,json=poolCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pool_creation_fee" yaml:"pool_creation_fee"`
	// Swap fee rate for every executed swap.
	SwapFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=swap_fee_rate,json=swapFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_fee_rate" yaml:"swap_fee_rate"`
	// Reserve coin withdrawal with less proportion by withdrawFeeRate.
	WithdrawFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=withdraw_fee_rate,json=withdrawFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"withdraw_fee_rate" yaml:"withdraw_fee_rate"`
	// Maximum ratio of reserve coins that can be ordered at a swap order.
	MaxOrderAmountRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=max_order_amount_ratio,json=maxOrderAmountRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_order_amount_ratio" yaml:"max_order_amount_ratio"`
	// The smallest unit batch height for every liquidity pool.
	UnitBatchHeight uint32 `protobuf:"varint,9,opt,name=unit_batch_height,json=unitBatchHeight,proto3" json:"unit_batch_height,omitempty" yaml:"unit_batch_height"`
	// Circuit breaker enables or disables transaction messages in liquidity
	// module.
	CircuitBreakerEnabled bool `protobuf:"varint,10,opt,name=circuit_breaker_enabled,json=circuitBreakerEnabled,proto3" json:"circuit_breaker_enabled,omitempty" yaml:"circuit_breaker_enabled"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_91d8ce8253a8329b, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LiquidityParams)(nil), "ollo.liquidity.v1.LiquidityParams")
	proto.RegisterType((*Params)(nil), "ollo.liquidity.v1.Params")
}

func init() { proto.RegisterFile("ollo/liquidity/v1/params.proto", fileDescriptor_91d8ce8253a8329b) }

var fileDescriptor_91d8ce8253a8329b = []byte{
	// 1156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x4f, 0x1b, 0xc7,
	0x17, 0xf7, 0x26, 0x84, 0xc0, 0x10, 0xc7, 0x78, 0xc3, 0x8f, 0x85, 0x2f, 0x78, 0x61, 0xbf, 0x6a,
	0xc5, 0x25, 0xeb, 0xd2, 0xf6, 0xd0, 0xe6, 0x52, 0x61, 0x08, 0x24, 0x15, 0x34, 0xee, 0x92, 0xf4,
	0x80, 0x2a, 0x8d, 0xc6, 0xeb, 0xc1, 0x4c, 0xbd, 0xbb, 0xb3, 0xdd, 0x19, 0x1b, 0x93, 0x73, 0xa5,
	0x1e, 0x5b, 0xa9, 0xaa, 0x94, 0x63, 0xce, 0xbd, 0xf4, 0x52, 0xf5, 0x6f, 0xe0, 0x18, 0xf5, 0x54,
	0xf5, 0xe0, 0xb4, 0x70, 0xe9, 0x99, 0xbf, 0xa0, 0x9a, 0x1f, 0xcb, 0x1a, 0x6c, 0xda, 0x9a, 0xa8,
	0x27, 0xf0, 0xbc, 0xf7, 0x3e, 0x9f, 0x37, 0xf3, 0xde, 0xfb, 0xbc, 0x05, 0x25, 0x1a, 0x04, 0xb4,
	0x1c, 0x90, 0x2f, 0x5b, 0xa4, 0x4e, 0xf8, 0x51, 0xb9, 0xbd, 0x5a, 0x8e, 0x51, 0x82, 0x42, 0xe6,
	0xc6, 0x09, 0xe5, 0xd4, 0x2c, 0x0a, 0xbb, 0x7b, 0x6e, 0x77, 0xdb, 0xab, 0xf3, 0xcb, 0xfd, 0x21,
	0x99, 0x5d, 0x46, 0xcd, 0x2f, 0x0c, 0x40, 0xa5, 0x34, 0xd0, 0xd6, 0xa9, 0x06, 0x6d, 0x50, 0xf9,
	0x6f, 0x59, 0xfc, 0xa7, 0x4f, 0xe7, 0x7c, 0xca, 0x42, 0xca, 0xa0, 0x32, 0xa8, 0x1f, 0xda, 0x54,
	0x52, 0xbf, 0xca, 0x35, 0xc4, 0x70, 0xb9, 0xbd, 0x5a, 0xc3, 0x1c, 0xad, 0x96, 0x7d, 0x4a, 0x22,
	0x6d, 0xb7, 0x1b, 0x94, 0x36, 0x02, 0x5c, 0x96, 0xbf, 0x6a, 0xad, 0xfd, 0x32, 0x27, 0x21, 0x66,
	0x1c, 0x85, 0x71, 0x0a, 0x70, 0xd9, 0xa1, 0xde, 0x4a, 0x10, 0x27, 0x54, 0x03, 0x38, 0x3f, 0xde,
	0x01, 0x85, 0xed, 0x34, 0xdb, 0xaa, 0xbc, 0xbf, 0xb9, 0x08, 0x40, 0x0d, 0x71, 0xff, 0x00, 0x32,
	0xf2, 0x1c, 0x5b, 0xc6, 0x92, 0xb1, 0x92, 0xf7, 0xc6, 0xe5, 0xc9, 0x2e, 0x79, 0x8e, 0xcd, 0xb7,
	0xc0, 0x5d, 0x4e, 0xfc, 0x26, 0x8c, 0x13, 0xec, 0x13, 0x46, 0x68, 0x64, 0xdd, 0x90, 0x2e, 0x79,
	0x71, 0x5a, 0x4d, 0x0f, 0xcd, 0x00, 0x4c, 0xef, 0x63, 0x0c, 0x7d, 0x1a, 0x04, 0xd8, 0xe7, 0x34,
	0x81, 0xa8, 0x5e, 0x4f, 0x30, 0x63, 0xd6, 0xcd, 0x25, 0x63, 0x65, 0xbc, 0xf2, 0xc1, 0x59, 0xd7,
	0x5e, 0x38, 0x42, 0x61, 0xf0, 0xc0, 0x19, 0xe8, 0xe6, 0xfc, 0xf2, 0xd3, 0xfd, 0x29, 0xfd, 0x16,
	0x6b, 0xea, 0x68, 0x97, 0x27, 0x24, 0x6a, 0x78, 0xf7, 0xf6, 0x31, 0x5e, 0x4f, 0xdd, 0xb5, 0xc9,
	0xa4, 0x60, 0xa6, 0xde, 0x62, 0x7c, 0x00, 0xdd, 0x88, 0xa4, 0xfb, 0xf0, 0xac, 0x6b, 0x2f, 0x2a,
	0xba, 0xc1, 0x7e, 0x57, 0xf3, 0x4d, 0x89, 0x80, 0x3e, 0xc2, 0xef, 0x0d, 0xb0, 0x10, 0x92, 0x08,
	0x92, 0x88, 0x70, 0x82, 0x02, 0x28, 0xaa, 0x0c, 0x45, 0x65, 0x20, 0x6b, 0xc5, 0x71, 0x70, 0x64,
	0xdd, 0x92, 0xbc, 0xcf, 0x8e, 0xbb, 0x76, 0xee, 0xb7, 0xae, 0xfd, 0x76, 0x83, 0xf0, 0x83, 0x56,
	0xcd, 0xf5, 0x69, 0xa8, 0x2b, 0xac, 0xff, 0xdc, 0x67, 0xf5, 0x66, 0x99, 0x1f, 0xc5, 0x98, 0xb9,
	0x8f, 0x23, 0x7e, 0xd6, 0xb5, 0xff, 0xaf, 0xb2, 0xfc, 0x3b, 0x6c, 0xc7, 0xb3, 0x42, 0x12, 0x3d,
	0x56, 0xd6, 0x2a, 0xa5, 0xc1, 0x3a, 0x25, 0xd1, 0xae, 0x34, 0x99, 0x87, 0xa0, 0x18, 0x23, 0x92,
	0x40, 0x3f, 0xc1, 0xb2, 0xce, 0x70, 0x1f, 0x63, 0x6b, 0x74, 0xe9, 0xe6, 0xca, 0xc4, 0xbb, 0x73,
	0xae, 0xbe, 0x9f, 0xe8, 0x26, 0x57, 0x77, 0x93, 0x2b, 0x62, 0x2b, 0xef, 0x88, 0x34, 0x7f, 0x78,
	0x6d, 0xaf, 0xfc, 0x8b, 0x34, 0x45, 0x00, 0xf3, 0x0a, 0x82, 0x65, 0x5d, 0x93, 0x6c, 0x62, 0x2c,
	0x89, 0x65, 0x9e, 0xbd, 0xc4, 0xb7, 0xff, 0x0b, 0x62, 0x71, 0xe1, 0x1e, 0xe2, 0x26, 0x98, 0xef,
	0x7d, 0xac, 0x3a, 0x8e, 0x29, 0x23, 0x1c, 0xa2, 0x90, 0xb6, 0x22, 0x6e, 0x8d, 0xc9, 0x32, 0xb8,
	0xc3, 0x95, 0xc1, 0x9b, 0xcd, 0xde, 0x77, 0x43, 0xe1, 0xad, 0x49, 0x38, 0x13, 0x81, 0xe9, 0x10,
	0x75, 0x60, 0x9c, 0x10, 0x1f, 0xc3, 0x80, 0x84, 0x84, 0x43, 0x39, 0x4f, 0xd6, 0xf8, 0xd0, 0x3c,
	0x1b, 0xd8, 0xf7, 0xcc, 0x10, 0x75, 0xaa, 0x02, 0x6b, 0x5b, 0x40, 0x79, 0x02, 0xc9, 0xdc, 0x02,
	0xcb, 0x82, 0x22, 0x6a, 0x85, 0x30, 0x44, 0x49, 0x13, 0x73, 0x18, 0xa2, 0x26, 0x89, 0x1a, 0x90,
	0x26, 0x75, 0x9c, 0x40, 0x31, 0x65, 0xcc, 0x02, 0x72, 0xe4, 0x16, 0x42, 0xd4, 0xf9, 0xa4, 0x15,
	0xee, 0x48, 0xb7, 0x1d, 0xe9, 0xf5, 0x44, 0x38, 0x3d, 0x15, 0x3e, 0xe6, 0xa7, 0x40, 0xc0, 0xeb,
	0xb0, 0x80, 0xec, 0x63, 0x16, 0xa3, 0xc8, 0x9a, 0x58, 0x32, 0x64, 0x49, 0x94, 0x30, 0xb8, 0xa9,
	0x30, 0xb8, 0x1b, 0x5a, 0x18, 0x2a, 0x63, 0xe2, 0x0e, 0x2f, 0x5e, 0xdb, 0x86, 0x37, 0x19, 0xa2,
	0x8e, 0xc4, 0xdb, 0xd6, 0xc1, 0xa6, 0x07, 0xf2, 0xec, 0x10, 0xc5, 0xa2, 0xb6, 0xe2, 0xde, 0xd8,
	0xba, 0x73, 0xad, 0x6b, 0x4f, 0x08, 0x90, 0x4d, 0x8c, 0x3d, 0xc4, 0xb1, 0xb9, 0x07, 0x8a, 0x87,
	0x84, 0x1f, 0xd4, 0x13, 0x74, 0x98, 0xe1, 0xe6, 0xaf, 0x85, 0x5b, 0x48, 0x81, 0x7a, 0xb0, 0xd3,
	0x7e, 0xc0, 0x1d, 0x9e, 0x20, 0xd8, 0x40, 0xcc, 0xba, 0xbb, 0x64, 0xac, 0x8c, 0x0c, 0x85, 0xbd,
	0x85, 0x98, 0x57, 0xd0, 0x40, 0x0f, 0x05, 0xce, 0x16, 0x62, 0xe6, 0xe7, 0xc0, 0x3c, 0xcf, 0x3b,
	0x03, 0x2f, 0x5c, 0x0b, 0x7c, 0x32, 0x45, 0x3a, 0x47, 0xff, 0x0c, 0x14, 0x54, 0xe1, 0x32, 0xe8,
	0xc9, 0x6b, 0x41, 0xe7, 0x25, 0xcc, 0x39, 0xee, 0x47, 0x60, 0x31, 0xed, 0x2e, 0xe4, 0x73, 0xd2,
	0xc6, 0x52, 0x5d, 0x18, 0x8c, 0x71, 0x02, 0xc5, 0x48, 0x5b, 0x45, 0xd9, 0x59, 0x96, 0xea, 0xac,
	0x35, 0xe9, 0x22, 0x24, 0x86, 0x55, 0x71, 0x52, 0x45, 0x24, 0x71, 0x7e, 0x1e, 0x07, 0xa3, 0x7a,
	0x51, 0x3c, 0x03, 0x40, 0x8e, 0xbc, 0x24, 0xb3, 0x0c, 0x39, 0xeb, 0xff, 0x73, 0xfb, 0xf6, 0xa6,
	0x2b, 0xe2, 0x9f, 0x1e, 0xc5, 0xb8, 0x32, 0x27, 0x72, 0x3f, 0xeb, 0xda, 0x45, 0xa5, 0x71, 0x59,
	0xb0, 0xe3, 0x8d, 0xc7, 0xda, 0x89, 0x99, 0x5f, 0x1b, 0x60, 0x36, 0x9d, 0xe8, 0xcb, 0xe3, 0x7c,
	0x43, 0xf6, 0x45, 0x75, 0x68, 0x55, 0x2d, 0x5d, 0x54, 0xd5, 0x4b, 0xb0, 0x8e, 0x37, 0xa5, 0x07,
	0xfe, 0xe2, 0xb4, 0x7f, 0x63, 0x80, 0x79, 0xe9, 0x9e, 0x29, 0x70, 0x48, 0xa2, 0xf3, 0x64, 0xd4,
	0x26, 0xdb, 0x1d, 0x3a, 0x99, 0x65, 0x95, 0xcc, 0xd5, 0xc8, 0x8e, 0x37, 0x23, 0x8c, 0xa9, 0xb4,
	0xef, 0x90, 0x28, 0xcd, 0x48, 0xbe, 0x0d, 0xea, 0xc0, 0x04, 0x33, 0x9c, 0xb4, 0xb1, 0x8a, 0xd4,
	0xe9, 0x8c, 0xbc, 0xe1, 0xdb, 0x0c, 0x86, 0x15, 0x6f, 0x83, 0x3a, 0x9e, 0x32, 0x88, 0x6c, 0x74,
	0x26, 0xdf, 0x19, 0x83, 0x04, 0xff, 0xd6, 0x3f, 0x09, 0xfe, 0xb6, 0x6e, 0x01, 0xab, 0xa7, 0x05,
	0x7a, 0x11, 0x9c, 0x37, 0x5b, 0x06, 0x5f, 0x5c, 0x16, 0xa8, 0x51, 0xf9, 0x28, 0x9b, 0xc3, 0x09,
	0xc9, 0x59, 0xd7, 0x9e, 0x52, 0xf9, 0x5d, 0x00, 0x73, 0x2e, 0x0a, 0x57, 0x7b, 0x90, 0x70, 0xdd,
	0x96, 0x7c, 0x1f, 0x0f, 0xcd, 0xa7, 0xdf, 0xa3, 0x0f, 0xd0, 0xe9, 0x17, 0xb5, 0xaf, 0x0c, 0x30,
	0x93, 0x09, 0xbb, 0xaa, 0x92, 0xde, 0x42, 0x6a, 0xdb, 0x3d, 0x19, 0x9a, 0x7d, 0x31, 0x6b, 0x81,
	0x7e, 0x54, 0xc7, 0xbb, 0x97, 0x2e, 0x02, 0x55, 0x7b, 0xb5, 0xa7, 0x1e, 0x81, 0x62, 0x4b, 0x74,
	0xb0, 0xfa, 0x56, 0x3c, 0xc0, 0xa4, 0x71, 0xc0, 0xe5, 0x1a, 0xcc, 0x57, 0x16, 0xb2, 0x0b, 0xf5,
	0xb9, 0x38, 0x5e, 0x41, 0x9c, 0x55, 0xc4, 0xd1, 0x23, 0x79, 0x62, 0xee, 0x81, 0x59, 0x9f, 0x24,
	0x7e, 0x4b, 0x78, 0x26, 0x18, 0x35, 0x85, 0xea, 0x45, 0xa8, 0x16, 0xe0, 0xba, 0xdc, 0x73, 0x63,
	0x15, 0x27, 0xeb, 0xd2, 0x2b, 0x1c, 0x1d, 0x6f, 0x5a, 0x5b, 0x2a, 0xca, 0xf0, 0x50, 0x9d, 0x3f,
	0x18, 0x7b, 0xf1, 0xd2, 0xce, 0xfd, 0xf9, 0xd2, 0x36, 0x2a, 0xef, 0x1f, 0xff, 0x51, 0xca, 0x1d,
	0x9f, 0x94, 0x8c, 0x57, 0x27, 0x25, 0xe3, 0xf7, 0x93, 0x92, 0xf1, 0xed, 0x69, 0x29, 0xf7, 0xea,
	0xb4, 0x94, 0xfb, 0xf5, 0xb4, 0x94, 0xdb, 0x9b, 0x91, 0x1f, 0xee, 0x9d, 0x9e, 0x4f, 0x77, 0xf9,
	0x3e, 0xb5, 0x51, 0xb9, 0x20, 0xdf, 0xfb, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x24, 0x8c, 0x33, 0xe2,
	0x2f, 0x0c, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PoolTypes) != len(that1.PoolTypes) {
		return false
	}
	for i := range this.PoolTypes {
		if !this.PoolTypes[i].Equal(&that1.PoolTypes[i]) {
			return false
		}
	}
	if !this.MinInitDepositAmount.Equal(that1.MinInitDepositAmount) {
		return false
	}
	if !this.InitPoolCoinMintAmount.Equal(that1.InitPoolCoinMintAmount) {
		return false
	}
	if !this.MaxReserveCoinAmount.Equal(that1.MaxReserveCoinAmount) {
		return false
	}
	if len(this.PoolCreationFee) != len(that1.PoolCreationFee) {
		return false
	}
	for i := range this.PoolCreationFee {
		if !this.PoolCreationFee[i].Equal(&that1.PoolCreationFee[i]) {
			return false
		}
	}
	if !this.SwapFeeRate.Equal(that1.SwapFeeRate) {
		return false
	}
	if !this.WithdrawFeeRate.Equal(that1.WithdrawFeeRate) {
		return false
	}
	if !this.MaxOrderAmountRatio.Equal(that1.MaxOrderAmountRatio) {
		return false
	}
	if this.UnitBatchHeight != that1.UnitBatchHeight {
		return false
	}
	if this.CircuitBreakerEnabled != that1.CircuitBreakerEnabled {
		return false
	}
	return true
}
func (m *LiquidityParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxNumActivePoolsPerPair != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxNumActivePoolsPerPair))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.OrderExtraGas != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.OrderExtraGas))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.WithdrawExtraGas != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WithdrawExtraGas))
		i--
		dAtA[i] = 0x78
	}
	if m.DepositExtraGas != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DepositExtraGas))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.WithdrawFeeRate.Size()
		i -= size
		if _, err := m.WithdrawFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.SwapFeeRate.Size()
		i -= size
		if _, err := m.SwapFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxOrderLifespan, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxOrderLifespan):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if m.MaxNumMarketMakingOrderTicks != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxNumMarketMakingOrderTicks))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.MaxPriceLimitRatio.Size()
		i -= size
		if _, err := m.MaxPriceLimitRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.MinInitialDepositAmount.Size()
		i -= size
		if _, err := m.MinInitialDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.PoolCreationFee) > 0 {
		for iNdEx := len(m.PoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PairCreationFee) > 0 {
		for iNdEx := len(m.PairCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PairCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.MinInitialPoolCoinSupply.Size()
		i -= size
		if _, err := m.MinInitialPoolCoinSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.DustCollectorAddress) > 0 {
		i -= len(m.DustCollectorAddress)
		copy(dAtA[i:], m.DustCollectorAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DustCollectorAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FeeCollectorAddress) > 0 {
		i -= len(m.FeeCollectorAddress)
		copy(dAtA[i:], m.FeeCollectorAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.FeeCollectorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TickPrecision != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TickPrecision))
		i--
		dAtA[i] = 0x10
	}
	if m.BatchSize != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.BatchSize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CircuitBreakerEnabled {
		i--
		if m.CircuitBreakerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.UnitBatchHeight != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.UnitBatchHeight))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.MaxOrderAmountRatio.Size()
		i -= size
		if _, err := m.MaxOrderAmountRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.WithdrawFeeRate.Size()
		i -= size
		if _, err := m.WithdrawFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.SwapFeeRate.Size()
		i -= size
		if _, err := m.SwapFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.PoolCreationFee) > 0 {
		for iNdEx := len(m.PoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.MaxReserveCoinAmount.Size()
		i -= size
		if _, err := m.MaxReserveCoinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InitPoolCoinMintAmount.Size()
		i -= size
		if _, err := m.InitPoolCoinMintAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinInitDepositAmount.Size()
		i -= size
		if _, err := m.MinInitDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolTypes) > 0 {
		for iNdEx := len(m.PoolTypes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolTypes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidityParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchSize != 0 {
		n += 1 + sovParams(uint64(m.BatchSize))
	}
	if m.TickPrecision != 0 {
		n += 1 + sovParams(uint64(m.TickPrecision))
	}
	l = len(m.FeeCollectorAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.DustCollectorAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.MinInitialPoolCoinSupply.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.PairCreationFee) > 0 {
		for _, e := range m.PairCreationFee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.PoolCreationFee) > 0 {
		for _, e := range m.PoolCreationFee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.MinInitialDepositAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxPriceLimitRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxNumMarketMakingOrderTicks != 0 {
		n += 1 + sovParams(uint64(m.MaxNumMarketMakingOrderTicks))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxOrderLifespan)
	n += 1 + l + sovParams(uint64(l))
	l = m.SwapFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WithdrawFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.DepositExtraGas != 0 {
		n += 1 + sovParams(uint64(m.DepositExtraGas))
	}
	if m.WithdrawExtraGas != 0 {
		n += 1 + sovParams(uint64(m.WithdrawExtraGas))
	}
	if m.OrderExtraGas != 0 {
		n += 2 + sovParams(uint64(m.OrderExtraGas))
	}
	if m.MaxNumActivePoolsPerPair != 0 {
		n += 2 + sovParams(uint64(m.MaxNumActivePoolsPerPair))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolTypes) > 0 {
		for _, e := range m.PoolTypes {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.MinInitDepositAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.InitPoolCoinMintAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxReserveCoinAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.PoolCreationFee) > 0 {
		for _, e := range m.PoolCreationFee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.SwapFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WithdrawFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MaxOrderAmountRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.UnitBatchHeight != 0 {
		n += 1 + sovParams(uint64(m.UnitBatchHeight))
	}
	if m.CircuitBreakerEnabled {
		n += 2
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidityParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
			}
			m.BatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickPrecision", wireType)
			}
			m.TickPrecision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickPrecision |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCollectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCollectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustCollectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DustCollectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialPoolCoinSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitialPoolCoinSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PairCreationFee = append(m.PairCreationFee, types.Coin{})
			if err := m.PairCreationFee[len(m.PairCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreationFee = append(m.PoolCreationFee, types.Coin{})
			if err := m.PoolCreationFee[len(m.PoolCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitialDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriceLimitRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPriceLimitRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumMarketMakingOrderTicks", wireType)
			}
			m.MaxNumMarketMakingOrderTicks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumMarketMakingOrderTicks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOrderLifespan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxOrderLifespan, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositExtraGas", wireType)
			}
			m.DepositExtraGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositExtraGas |= github_com_cosmos_cosmos_sdk_types.Gas(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawExtraGas", wireType)
			}
			m.WithdrawExtraGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawExtraGas |= github_com_cosmos_cosmos_sdk_types.Gas(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderExtraGas", wireType)
			}
			m.OrderExtraGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderExtraGas |= github_com_cosmos_cosmos_sdk_types.Gas(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumActivePoolsPerPair", wireType)
			}
			m.MaxNumActivePoolsPerPair = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumActivePoolsPerPair |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTypes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolTypes = append(m.PoolTypes, PoolType{})
			if err := m.PoolTypes[len(m.PoolTypes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitPoolCoinMintAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitPoolCoinMintAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReserveCoinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxReserveCoinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreationFee = append(m.PoolCreationFee, types.Coin{})
			if err := m.PoolCreationFee[len(m.PoolCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOrderAmountRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxOrderAmountRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnitBatchHeight", wireType)
			}
			m.UnitBatchHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnitBatchHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreakerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CircuitBreakerEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
