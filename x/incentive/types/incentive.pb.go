// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/incentive/v1/incentive.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Incentive struct {
	//
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	//
	Claimable github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=claimable,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"claimable" yaml:"claimable"`
}

func (m *Incentive) Reset()         { *m = Incentive{} }
func (m *Incentive) String() string { return proto.CompactTextString(m) }
func (*Incentive) ProtoMessage()    {}
func (*Incentive) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc2ca0d558551425, []int{0}
}
func (m *Incentive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Incentive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Incentive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Incentive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Incentive.Merge(m, src)
}
func (m *Incentive) XXX_Size() int {
	return m.Size()
}
func (m *Incentive) XXX_DiscardUnknown() {
	xxx_messageInfo_Incentive.DiscardUnknown(m)
}

var xxx_messageInfo_Incentive proto.InternalMessageInfo

type IncentiveProps struct {
	//
	MinOpenRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=min_open_ratio,json=minOpenRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_open_ratio" yaml:"min_open_ratio"`
	//
	MinOpenDepthRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=min_open_depth_ratio,json=minOpenDepthRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_open_depth_ratio" yaml:"min_open_ratio"`
	//
	MaxDowntime uint32 `protobuf:"varint,3,opt,name=max_downtime,json=maxDowntime,proto3" json:"max_downtime,omitempty" yaml:"max_downtime"`
	//
	MaxTotalDowntime uint32 `protobuf:"varint,4,opt,name=max_total_downtime,json=maxTotalDowntime,proto3" json:"max_total_downtime,omitempty" yaml:"max_total_downtime"`
	//
	MinHours uint32 `protobuf:"varint,5,opt,name=min_hours,json=minHours,proto3" json:"min_hours,omitempty" yaml:"min_hours"`
	//
	MinDays uint32 `protobuf:"varint,6,opt,name=min_days,json=minDays,proto3" json:"min_days,omitempty" yaml:"min_days"`
}

func (m *IncentiveProps) Reset()         { *m = IncentiveProps{} }
func (m *IncentiveProps) String() string { return proto.CompactTextString(m) }
func (*IncentiveProps) ProtoMessage()    {}
func (*IncentiveProps) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc2ca0d558551425, []int{1}
}
func (m *IncentiveProps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveProps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveProps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveProps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveProps.Merge(m, src)
}
func (m *IncentiveProps) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveProps) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveProps.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveProps proto.InternalMessageInfo

type IncentivePair struct {
	//
	PairId uint64 `protobuf:"varint,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	//
	UpdatedAt *time.Time `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty" yaml:"updated_at"`
	//
	IncentiveWeight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=incentive_weight,json=incentiveWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"incentive_weight" yaml:"incentive_weight"`
	//
	MaxSpread github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=max_spread,json=maxSpread,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_spread" yaml:"max_spread"`
	//
	MinSpread github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=min_spread,json=minSpread,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_spread" yaml:"max_spread"`
	//
	MinDepth github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=min_depth,json=minDepth,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_depth" yaml:"max_spread"`
}

func (m *IncentivePair) Reset()         { *m = IncentivePair{} }
func (m *IncentivePair) String() string { return proto.CompactTextString(m) }
func (*IncentivePair) ProtoMessage()    {}
func (*IncentivePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc2ca0d558551425, []int{2}
}
func (m *IncentivePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePair.Merge(m, src)
}
func (m *IncentivePair) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePair) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePair.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePair proto.InternalMessageInfo

type IncentiveDistribution struct {
	//
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	//
	PairId uint64                                   `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
}

func (m *IncentiveDistribution) Reset()         { *m = IncentiveDistribution{} }
func (m *IncentiveDistribution) String() string { return proto.CompactTextString(m) }
func (*IncentiveDistribution) ProtoMessage()    {}
func (*IncentiveDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc2ca0d558551425, []int{3}
}
func (m *IncentiveDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveDistribution.Merge(m, src)
}
func (m *IncentiveDistribution) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveDistribution proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Incentive)(nil), "ollo.incentive.v1.Incentive")
	proto.RegisterType((*IncentiveProps)(nil), "ollo.incentive.v1.IncentiveProps")
	proto.RegisterType((*IncentivePair)(nil), "ollo.incentive.v1.IncentivePair")
	proto.RegisterType((*IncentiveDistribution)(nil), "ollo.incentive.v1.IncentiveDistribution")
}

func init() { proto.RegisterFile("ollo/incentive/v1/incentive.proto", fileDescriptor_cc2ca0d558551425) }

var fileDescriptor_cc2ca0d558551425 = []byte{
	// 787 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x3d, 0x6f, 0xdb, 0x46,
	0x18, 0x16, 0x65, 0x45, 0x0e, 0xcf, 0xb1, 0x63, 0x31, 0x0a, 0x22, 0x09, 0x28, 0xe9, 0x72, 0x28,
	0x84, 0x16, 0x26, 0xa1, 0x74, 0xd3, 0x66, 0x46, 0x40, 0x6b, 0x74, 0x68, 0xc1, 0x08, 0x28, 0xd0,
	0x85, 0x3d, 0x8a, 0xac, 0x74, 0xa8, 0xee, 0x8e, 0xe0, 0x9d, 0x1c, 0x69, 0xe8, 0x5e, 0x74, 0xca,
	0x4f, 0xf0, 0x58, 0x74, 0xee, 0xd0, 0x9f, 0xe0, 0xd1, 0xe8, 0x54, 0x78, 0xa0, 0x6d, 0x79, 0x29,
	0xd0, 0x4d, 0xbf, 0xa0, 0xb8, 0xe3, 0x89, 0x94, 0xdb, 0xc1, 0x31, 0xa0, 0x49, 0xef, 0xe7, 0xf3,
	0xbc, 0xa7, 0xf7, 0x83, 0xe0, 0x63, 0x3a, 0x9d, 0x52, 0x17, 0x91, 0x51, 0x4c, 0x38, 0x3a, 0x8b,
	0xdd, 0xb3, 0x5e, 0xa9, 0x38, 0x49, 0x4a, 0x39, 0x35, 0x1a, 0x22, 0xc4, 0x29, 0xad, 0x67, 0xbd,
	0x4e, 0x7b, 0x44, 0x19, 0xa6, 0x2c, 0x90, 0x01, 0x6e, 0xae, 0xe4, 0xd1, 0x1d, 0x33, 0xd7, 0xdc,
	0x10, 0x32, 0x81, 0x16, 0xc6, 0x1c, 0xf6, 0xdc, 0x11, 0x45, 0x44, 0xf9, 0x9b, 0x63, 0x3a, 0xa6,
	0x79, 0x9e, 0x90, 0x94, 0xd5, 0x1a, 0x53, 0x3a, 0x9e, 0xc6, 0xae, 0xd4, 0xc2, 0xd9, 0x0f, 0x2e,
	0x47, 0x38, 0x66, 0x1c, 0xe2, 0x44, 0x05, 0x74, 0xfe, 0x5f, 0x27, 0xc6, 0xb9, 0xcf, 0xbe, 0xd2,
	0x80, 0x7e, 0xba, 0xf6, 0x18, 0x03, 0xb0, 0x0b, 0xa3, 0x28, 0x8d, 0x19, 0x6b, 0x69, 0x47, 0x5a,
	0x57, 0xf7, 0x3e, 0x5d, 0x65, 0xd6, 0xc1, 0x02, 0xe2, 0x69, 0xdf, 0x56, 0x0e, 0xfb, 0xcf, 0xdf,
	0x8f, 0x9b, 0xaa, 0xea, 0x93, 0xdc, 0xf4, 0x96, 0xa7, 0x88, 0x8c, 0xfd, 0x75, 0xaa, 0xf1, 0x13,
	0xd0, 0x47, 0x53, 0x88, 0x30, 0x0c, 0xa7, 0x71, 0xab, 0x7a, 0xb4, 0xd3, 0xdd, 0x7b, 0xdd, 0x76,
	0x54, 0x8a, 0x78, 0x9a, 0xa3, 0x9e, 0xe6, 0xbc, 0xa1, 0x88, 0x78, 0x83, 0x8b, 0xcc, 0xaa, 0xac,
	0x32, 0xeb, 0x30, 0xa7, 0x29, 0x32, 0xed, 0xdf, 0xae, 0xad, 0xee, 0x18, 0xf1, 0xc9, 0x2c, 0x74,
	0x46, 0x14, 0xab, 0x7f, 0x4a, 0xfd, 0x1c, 0xb3, 0xe8, 0x47, 0x97, 0x2f, 0x92, 0x98, 0x49, 0x10,
	0xe6, 0x97, 0x8c, 0xfd, 0xa7, 0x3f, 0x9f, 0x5b, 0x95, 0xbf, 0xcf, 0xad, 0x8a, 0xfd, 0xcf, 0x0e,
	0x38, 0x28, 0x1e, 0xf7, 0x4d, 0x4a, 0x13, 0x66, 0x60, 0x70, 0x80, 0x11, 0x09, 0x68, 0x12, 0x93,
	0x20, 0x85, 0x1c, 0x51, 0xf5, 0xd0, 0x2f, 0x44, 0x15, 0x57, 0x99, 0xf5, 0xc9, 0x07, 0x30, 0x0e,
	0xe2, 0xd1, 0x2a, 0xb3, 0x5e, 0xe6, 0xf5, 0xde, 0x47, 0xb3, 0xfd, 0x67, 0x18, 0x91, 0xaf, 0x93,
	0x98, 0xf8, 0x42, 0x35, 0xe6, 0xa0, 0x59, 0x04, 0x44, 0x71, 0xc2, 0x27, 0x8a, 0xb4, 0xba, 0x5d,
	0xd2, 0x86, 0x22, 0x1d, 0x08, 0x8a, 0x9c, 0xb9, 0x0f, 0x9e, 0x61, 0x38, 0x0f, 0x22, 0xfa, 0x8e,
	0x88, 0x79, 0x68, 0xed, 0x1c, 0x69, 0xdd, 0x7d, 0xef, 0xd5, 0x2a, 0xb3, 0x5e, 0x28, 0x8c, 0x0d,
	0xaf, 0xed, 0xef, 0x61, 0x38, 0x1f, 0x28, 0xcd, 0xf8, 0x0a, 0x18, 0xc2, 0xcb, 0x29, 0x87, 0xd3,
	0x12, 0xa1, 0x26, 0x11, 0x3e, 0x5a, 0x65, 0x56, 0xbb, 0x44, 0xb8, 0x1f, 0x63, 0xfb, 0x87, 0x18,
	0xce, 0x87, 0xc2, 0x56, 0x80, 0xf5, 0x80, 0x2e, 0xca, 0x9d, 0xd0, 0x59, 0xca, 0x5a, 0x4f, 0x24,
	0x46, 0xb3, 0x6c, 0x77, 0xe1, 0xb2, 0xfd, 0xa7, 0x18, 0x91, 0x2f, 0x85, 0x68, 0x38, 0x40, 0xc8,
	0x41, 0x04, 0x17, 0xac, 0x55, 0x97, 0x19, 0x2f, 0x56, 0x99, 0xf5, 0xbc, 0xcc, 0x10, 0x1e, 0xdb,
	0xdf, 0xc5, 0x88, 0x0c, 0xe0, 0x82, 0xf5, 0x6b, 0xa2, 0xe3, 0xf6, 0x1f, 0x35, 0xb0, 0x5f, 0x76,
	0x1b, 0xa2, 0xd4, 0xf8, 0x0c, 0xec, 0x26, 0x10, 0xa5, 0x01, 0x8a, 0x64, 0x97, 0x6b, 0x9e, 0x51,
	0x8e, 0xb3, 0x72, 0xd8, 0x7e, 0x5d, 0x48, 0xa7, 0x91, 0x31, 0x04, 0x60, 0x96, 0x44, 0x90, 0xc7,
	0x51, 0x00, 0xb9, 0x6c, 0xd0, 0xde, 0xeb, 0x8e, 0x93, 0xef, 0x96, 0xb3, 0xde, 0x2d, 0x67, 0xb8,
	0xde, 0x2d, 0xaf, 0xbd, 0xca, 0xac, 0x46, 0x8e, 0x55, 0xe6, 0xd9, 0xef, 0xaf, 0x2d, 0xcd, 0xd7,
	0x95, 0xe1, 0x84, 0x1b, 0x1c, 0x1c, 0x16, 0x8b, 0x17, 0xbc, 0x8b, 0xd1, 0x78, 0xc2, 0x65, 0x2b,
	0x74, 0xef, 0xf4, 0xd1, 0xcd, 0x7f, 0x95, 0xb3, 0xfd, 0x17, 0xcf, 0xf6, 0x9f, 0x17, 0xa6, 0x6f,
	0xa5, 0xc5, 0x08, 0x01, 0x10, 0xcd, 0x61, 0x49, 0x1a, 0xc3, 0x48, 0x36, 0x4e, 0xf7, 0xde, 0x3c,
	0x9a, 0xaf, 0x51, 0xb6, 0x39, 0x47, 0xb2, 0x7d, 0x1d, 0xc3, 0xf9, 0x5b, 0x29, 0x4b, 0x0e, 0x44,
	0xd6, 0x1c, 0x4f, 0xb6, 0xc9, 0x81, 0x88, 0xe2, 0xf8, 0x3e, 0x9f, 0x1d, 0xb9, 0x39, 0x72, 0x12,
	0xb6, 0x44, 0x21, 0xc6, 0x4b, 0xee, 0x4a, 0xbf, 0x26, 0x0f, 0xc5, 0x2f, 0x55, 0xf0, 0xb2, 0x18,
	0x9d, 0x01, 0x62, 0x3c, 0x45, 0xe1, 0x8c, 0x23, 0x4a, 0xb6, 0x74, 0x11, 0x37, 0x06, 0xb1, 0xfa,
	0xe0, 0x20, 0x72, 0x50, 0x87, 0x98, 0xce, 0x88, 0x18, 0x94, 0x07, 0x6e, 0xe7, 0x89, 0xba, 0x9d,
	0xfb, 0xaa, 0x20, 0x99, 0xf6, 0xb8, 0xc3, 0xa9, 0xb8, 0xca, 0xab, 0xe9, 0x0d, 0x2f, 0x6e, 0xcd,
	0xca, 0xcd, 0xad, 0xa9, 0xfd, 0xba, 0x34, 0xb5, 0x8b, 0xa5, 0xa9, 0x5d, 0x2e, 0x4d, 0xed, 0x66,
	0x69, 0x6a, 0xef, 0xef, 0xcc, 0xca, 0xe5, 0x9d, 0x59, 0xf9, 0xeb, 0xce, 0xac, 0x7c, 0xe7, 0x6c,
	0x30, 0x88, 0xef, 0xcb, 0x31, 0xe3, 0xe2, 0xee, 0x10, 0xa9, 0xb8, 0xf3, 0x8d, 0xcf, 0x8d, 0x64,
	0x0b, 0xeb, 0x72, 0x85, 0x3e, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x35, 0x4f, 0x82, 0xb4, 0x35,
	0x07, 0x00, 0x00,
}

func (this *Incentive) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Incentive)
	if !ok {
		that2, ok := that.(Incentive)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Incentive")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Incentive but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Incentive but is not nil && this == nil")
	}
	if this.Address != that1.Address {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if len(this.Claimable) != len(that1.Claimable) {
		return fmt.Errorf("Claimable this(%v) Not Equal that(%v)", len(this.Claimable), len(that1.Claimable))
	}
	for i := range this.Claimable {
		if !this.Claimable[i].Equal(&that1.Claimable[i]) {
			return fmt.Errorf("Claimable this[%v](%v) Not Equal that[%v](%v)", i, this.Claimable[i], i, that1.Claimable[i])
		}
	}
	return nil
}
func (this *IncentiveProps) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IncentiveProps)
	if !ok {
		that2, ok := that.(IncentiveProps)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IncentiveProps")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IncentiveProps but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IncentiveProps but is not nil && this == nil")
	}
	if !this.MinOpenRatio.Equal(that1.MinOpenRatio) {
		return fmt.Errorf("MinOpenRatio this(%v) Not Equal that(%v)", this.MinOpenRatio, that1.MinOpenRatio)
	}
	if !this.MinOpenDepthRatio.Equal(that1.MinOpenDepthRatio) {
		return fmt.Errorf("MinOpenDepthRatio this(%v) Not Equal that(%v)", this.MinOpenDepthRatio, that1.MinOpenDepthRatio)
	}
	if this.MaxDowntime != that1.MaxDowntime {
		return fmt.Errorf("MaxDowntime this(%v) Not Equal that(%v)", this.MaxDowntime, that1.MaxDowntime)
	}
	if this.MaxTotalDowntime != that1.MaxTotalDowntime {
		return fmt.Errorf("MaxTotalDowntime this(%v) Not Equal that(%v)", this.MaxTotalDowntime, that1.MaxTotalDowntime)
	}
	if this.MinHours != that1.MinHours {
		return fmt.Errorf("MinHours this(%v) Not Equal that(%v)", this.MinHours, that1.MinHours)
	}
	if this.MinDays != that1.MinDays {
		return fmt.Errorf("MinDays this(%v) Not Equal that(%v)", this.MinDays, that1.MinDays)
	}
	return nil
}
func (this *IncentiveProps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IncentiveProps)
	if !ok {
		that2, ok := that.(IncentiveProps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MinOpenRatio.Equal(that1.MinOpenRatio) {
		return false
	}
	if !this.MinOpenDepthRatio.Equal(that1.MinOpenDepthRatio) {
		return false
	}
	if this.MaxDowntime != that1.MaxDowntime {
		return false
	}
	if this.MaxTotalDowntime != that1.MaxTotalDowntime {
		return false
	}
	if this.MinHours != that1.MinHours {
		return false
	}
	if this.MinDays != that1.MinDays {
		return false
	}
	return true
}
func (this *IncentivePair) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IncentivePair)
	if !ok {
		that2, ok := that.(IncentivePair)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IncentivePair")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IncentivePair but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IncentivePair but is not nil && this == nil")
	}
	if this.PairId != that1.PairId {
		return fmt.Errorf("PairId this(%v) Not Equal that(%v)", this.PairId, that1.PairId)
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return fmt.Errorf("this.UpdatedAt != nil && that1.UpdatedAt == nil")
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !this.IncentiveWeight.Equal(that1.IncentiveWeight) {
		return fmt.Errorf("IncentiveWeight this(%v) Not Equal that(%v)", this.IncentiveWeight, that1.IncentiveWeight)
	}
	if !this.MaxSpread.Equal(that1.MaxSpread) {
		return fmt.Errorf("MaxSpread this(%v) Not Equal that(%v)", this.MaxSpread, that1.MaxSpread)
	}
	if !this.MinSpread.Equal(that1.MinSpread) {
		return fmt.Errorf("MinSpread this(%v) Not Equal that(%v)", this.MinSpread, that1.MinSpread)
	}
	if !this.MinDepth.Equal(that1.MinDepth) {
		return fmt.Errorf("MinDepth this(%v) Not Equal that(%v)", this.MinDepth, that1.MinDepth)
	}
	return nil
}
func (this *IncentiveDistribution) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*IncentiveDistribution)
	if !ok {
		that2, ok := that.(IncentiveDistribution)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *IncentiveDistribution")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *IncentiveDistribution but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *IncentiveDistribution but is not nil && this == nil")
	}
	if this.Address != that1.Address {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if this.PairId != that1.PairId {
		return fmt.Errorf("PairId this(%v) Not Equal that(%v)", this.PairId, that1.PairId)
	}
	if len(this.Amount) != len(that1.Amount) {
		return fmt.Errorf("Amount this(%v) Not Equal that(%v)", len(this.Amount), len(that1.Amount))
	}
	for i := range this.Amount {
		if !this.Amount[i].Equal(&that1.Amount[i]) {
			return fmt.Errorf("Amount this[%v](%v) Not Equal that[%v](%v)", i, this.Amount[i], i, that1.Amount[i])
		}
	}
	return nil
}
func (m *Incentive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Incentive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Incentive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claimable) > 0 {
		for iNdEx := len(m.Claimable) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claimable[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveProps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveProps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveProps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinDays != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.MinDays))
		i--
		dAtA[i] = 0x30
	}
	if m.MinHours != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.MinHours))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxTotalDowntime != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.MaxTotalDowntime))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxDowntime != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.MaxDowntime))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.MinOpenDepthRatio.Size()
		i -= size
		if _, err := m.MinOpenDepthRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MinOpenRatio.Size()
		i -= size
		if _, err := m.MinOpenRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IncentivePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinDepth.Size()
		i -= size
		if _, err := m.MinDepth.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MinSpread.Size()
		i -= size
		if _, err := m.MinSpread.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxSpread.Size()
		i -= size
		if _, err := m.MaxSpread.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.IncentiveWeight.Size()
		i -= size
		if _, err := m.IncentiveWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintIncentive(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.PairId != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIncentive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PairId != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIncentive(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIncentive(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Incentive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	if len(m.Claimable) > 0 {
		for _, e := range m.Claimable {
			l = e.Size()
			n += 1 + l + sovIncentive(uint64(l))
		}
	}
	return n
}

func (m *IncentiveProps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MinOpenRatio.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.MinOpenDepthRatio.Size()
	n += 1 + l + sovIncentive(uint64(l))
	if m.MaxDowntime != 0 {
		n += 1 + sovIncentive(uint64(m.MaxDowntime))
	}
	if m.MaxTotalDowntime != 0 {
		n += 1 + sovIncentive(uint64(m.MaxTotalDowntime))
	}
	if m.MinHours != 0 {
		n += 1 + sovIncentive(uint64(m.MinHours))
	}
	if m.MinDays != 0 {
		n += 1 + sovIncentive(uint64(m.MinDays))
	}
	return n
}

func (m *IncentivePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != 0 {
		n += 1 + sovIncentive(uint64(m.PairId))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovIncentive(uint64(l))
	}
	l = m.IncentiveWeight.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.MaxSpread.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.MinSpread.Size()
	n += 1 + l + sovIncentive(uint64(l))
	l = m.MinDepth.Size()
	n += 1 + l + sovIncentive(uint64(l))
	return n
}

func (m *IncentiveDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIncentive(uint64(l))
	}
	if m.PairId != 0 {
		n += 1 + sovIncentive(uint64(m.PairId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovIncentive(uint64(l))
		}
	}
	return n
}

func sovIncentive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentive(x uint64) (n int) {
	return sovIncentive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Incentive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Incentive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Incentive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claimable = append(m.Claimable, types.Coin{})
			if err := m.Claimable[len(m.Claimable)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveProps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveProps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveProps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOpenRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinOpenRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinOpenDepthRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinOpenDepthRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDowntime", wireType)
			}
			m.MaxDowntime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDowntime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTotalDowntime", wireType)
			}
			m.MaxTotalDowntime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTotalDowntime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHours", wireType)
			}
			m.MinHours = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinHours |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDays", wireType)
			}
			m.MinDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentiveWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentiveWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSpread", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSpread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSpread", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSpread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinDepth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentive = fmt.Errorf("proto: unexpected end of group")
)
