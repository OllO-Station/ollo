// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/incentive/v1/proprosal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MarketMakerProposal struct {
	Title         string                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title" yaml:"title"`
	Description   string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description" yaml:"description"`
	Inclusions    []*MarketMakerIncl       `protobuf:"bytes,3,rep,name=inclusions,proto3" json:"inclusions" yaml:"inclusions"`
	Exclusions    []*MarketMakerIncl       `protobuf:"bytes,4,rep,name=exclusions,proto3" json:"exclusions" yaml:"exclusions"`
	Rejections    []*MarketMakerIncl       `protobuf:"bytes,5,rep,name=rejections,proto3" json:"rejections" yaml:"rejections"`
	Distributions []*IncentiveDistribution `protobuf:"bytes,6,rep,name=distributions,proto3" json:"distributions" yaml:"distributions"`
}

func (m *MarketMakerProposal) Reset()      { *m = MarketMakerProposal{} }
func (*MarketMakerProposal) ProtoMessage() {}
func (*MarketMakerProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7f6b4b2a1ac4db1, []int{0}
}
func (m *MarketMakerProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketMakerProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketMakerProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketMakerProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketMakerProposal.Merge(m, src)
}
func (m *MarketMakerProposal) XXX_Size() int {
	return m.Size()
}
func (m *MarketMakerProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketMakerProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MarketMakerProposal proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MarketMakerProposal)(nil), "ollo.incentive.v1.MarketMakerProposal")
}

func init() { proto.RegisterFile("ollo/incentive/v1/proprosal.proto", fileDescriptor_e7f6b4b2a1ac4db1) }

var fileDescriptor_e7f6b4b2a1ac4db1 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x6f, 0xd4, 0x30,
	0x1c, 0x86, 0x13, 0xfa, 0x47, 0x90, 0xc2, 0xd0, 0xd0, 0xe1, 0x7a, 0x83, 0x5d, 0x8c, 0x90, 0x8e,
	0x81, 0x58, 0x07, 0x5b, 0xc7, 0x08, 0x09, 0x55, 0xa2, 0x12, 0xca, 0xc8, 0x82, 0x12, 0xd7, 0x0a,
	0xa6, 0x49, 0x1c, 0xd9, 0xbe, 0x53, 0xef, 0x1b, 0x30, 0x32, 0x32, 0xf6, 0xe3, 0x74, 0xa3, 0x23,
	0x93, 0x05, 0x77, 0x5b, 0xc6, 0x7c, 0x02, 0xe4, 0xf8, 0xa8, 0x5d, 0xf5, 0x96, 0xdb, 0xf2, 0x7b,
	0xfd, 0xbc, 0x7e, 0x9c, 0xc4, 0xd1, 0x0b, 0x5e, 0x55, 0x1c, 0xb3, 0x86, 0xd0, 0x46, 0xb1, 0x39,
	0xc5, 0xf3, 0x29, 0x6e, 0x05, 0x6f, 0x05, 0x97, 0x79, 0x95, 0xb4, 0x82, 0x2b, 0x1e, 0x1f, 0x1a,
	0x24, 0xb9, 0x43, 0x92, 0xf9, 0x74, 0x7c, 0x4c, 0xb8, 0xac, 0xb9, 0xfc, 0x32, 0x00, 0xd8, 0x0e,
	0x96, 0x1e, 0x03, 0x3b, 0xe1, 0x22, 0x97, 0x66, 0xb7, 0x82, 0xaa, 0x7c, 0x8a, 0x09, 0x67, 0xcd,
	0x7a, 0xfd, 0xa8, 0xe4, 0x25, 0xb7, 0x3d, 0xf3, 0xb4, 0x4e, 0x37, 0x1c, 0xc3, 0x09, 0x2d, 0x32,
	0x7e, 0x88, 0xd4, 0xb5, 0x5d, 0x43, 0xbf, 0x76, 0xa3, 0xe7, 0xe7, 0xb9, 0xb8, 0xa4, 0xea, 0x3c,
	0xbf, 0xa4, 0xe2, 0x93, 0xe0, 0xad, 0x79, 0x81, 0x18, 0x47, 0x7b, 0x8a, 0xa9, 0x8a, 0x8e, 0xc2,
	0x93, 0x70, 0xf2, 0x24, 0x3d, 0xee, 0x34, 0xb4, 0x41, 0xaf, 0xe1, 0xd3, 0x45, 0x5e, 0x57, 0xa7,
	0x68, 0x18, 0x51, 0x66, 0xe3, 0xf8, 0x43, 0x74, 0x70, 0x41, 0x25, 0x11, 0xac, 0x55, 0x8c, 0x37,
	0xa3, 0x47, 0x43, 0xed, 0x55, 0xa7, 0xa1, 0x1f, 0xf7, 0x1a, 0xc6, 0xb6, 0xec, 0x85, 0x28, 0xf3,
	0x91, 0xb8, 0x8c, 0x22, 0xd6, 0x90, 0x6a, 0x26, 0x19, 0x6f, 0xe4, 0x68, 0xe7, 0x64, 0x67, 0x72,
	0xf0, 0x16, 0x25, 0x0f, 0xbe, 0x64, 0xe2, 0x9d, 0xfa, 0xac, 0x21, 0x55, 0xfa, 0xb2, 0xd3, 0xd0,
	0x6b, 0xf6, 0x1a, 0x1e, 0x5a, 0x95, 0xcb, 0x50, 0xe6, 0x01, 0x46, 0x44, 0xaf, 0xee, 0x44, 0xbb,
	0xdb, 0x89, 0x5c, 0xd3, 0x89, 0x5c, 0x86, 0x32, 0x0f, 0x30, 0x22, 0x41, 0xbf, 0x51, 0xa2, 0x06,
	0xd1, 0xde, 0x76, 0x22, 0xd7, 0x74, 0x22, 0x97, 0xa1, 0xcc, 0x03, 0xe2, 0x45, 0xf4, 0xec, 0x82,
	0x49, 0x25, 0x58, 0x31, 0xb3, 0xae, 0xfd, 0xc1, 0x35, 0xd9, 0xe0, 0x3a, 0xfb, 0x3f, 0xbc, 0xf7,
	0x0a, 0xe9, 0xeb, 0x4e, 0xc3, 0xfb, 0x5b, 0xf4, 0x1a, 0x1e, 0xad, 0xff, 0x98, 0x1f, 0xa3, 0xec,
	0x3e, 0x76, 0xfa, 0xf8, 0xfb, 0x35, 0x0c, 0x7e, 0x5e, 0xc3, 0x20, 0xfd, 0x78, 0xf3, 0x17, 0x04,
	0x37, 0x4b, 0x10, 0xde, 0x2e, 0x41, 0xf8, 0x67, 0x09, 0xc2, 0x1f, 0x2b, 0x10, 0xdc, 0xae, 0x40,
	0xf0, 0x7b, 0x05, 0x82, 0xcf, 0x49, 0xc9, 0xd4, 0xd7, 0x59, 0x91, 0x10, 0x5e, 0x63, 0x73, 0xaa,
	0x37, 0x52, 0xe5, 0x66, 0x87, 0x61, 0xc0, 0x57, 0xde, 0x2d, 0x55, 0x8b, 0x96, 0xca, 0x62, 0x7f,
	0xb8, 0xa6, 0xef, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xd2, 0x9f, 0x14, 0x6e, 0x03, 0x00,
	0x00,
}

func (m *MarketMakerProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketMakerProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketMakerProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Distributions) > 0 {
		for iNdEx := len(m.Distributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProprosal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Rejections) > 0 {
		for iNdEx := len(m.Rejections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rejections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProprosal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Exclusions) > 0 {
		for iNdEx := len(m.Exclusions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Exclusions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProprosal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Inclusions) > 0 {
		for iNdEx := len(m.Inclusions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Inclusions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProprosal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProprosal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProprosal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProprosal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProprosal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MarketMakerProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProprosal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProprosal(uint64(l))
	}
	if len(m.Inclusions) > 0 {
		for _, e := range m.Inclusions {
			l = e.Size()
			n += 1 + l + sovProprosal(uint64(l))
		}
	}
	if len(m.Exclusions) > 0 {
		for _, e := range m.Exclusions {
			l = e.Size()
			n += 1 + l + sovProprosal(uint64(l))
		}
	}
	if len(m.Rejections) > 0 {
		for _, e := range m.Rejections {
			l = e.Size()
			n += 1 + l + sovProprosal(uint64(l))
		}
	}
	if len(m.Distributions) > 0 {
		for _, e := range m.Distributions {
			l = e.Size()
			n += 1 + l + sovProprosal(uint64(l))
		}
	}
	return n
}

func sovProprosal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProprosal(x uint64) (n int) {
	return sovProprosal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MarketMakerProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProprosal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketMakerProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketMakerProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProprosal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProprosal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProprosal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProprosal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inclusions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProprosal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProprosal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inclusions = append(m.Inclusions, &MarketMakerIncl{})
			if err := m.Inclusions[len(m.Inclusions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclusions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProprosal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProprosal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exclusions = append(m.Exclusions, &MarketMakerIncl{})
			if err := m.Exclusions[len(m.Exclusions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rejections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProprosal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProprosal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rejections = append(m.Rejections, &MarketMakerIncl{})
			if err := m.Rejections[len(m.Rejections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProprosal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProprosal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributions = append(m.Distributions, &IncentiveDistribution{})
			if err := m.Distributions[len(m.Distributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProprosal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProprosal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProprosal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProprosal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProprosal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProprosal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProprosal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProprosal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProprosal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProprosal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProprosal = fmt.Errorf("proto: unexpected end of group")
)
