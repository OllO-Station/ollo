// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1/listing.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NameListing struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Price string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty" yaml:"price"`
}

func (m *NameListing) Reset()         { *m = NameListing{} }
func (m *NameListing) String() string { return proto.CompactTextString(m) }
func (*NameListing) ProtoMessage()    {}
func (*NameListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79faab191df1893, []int{0}
}
func (m *NameListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameListing.Merge(m, src)
}
func (m *NameListing) XXX_Size() int {
	return m.Size()
}
func (m *NameListing) XXX_DiscardUnknown() {
	xxx_messageInfo_NameListing.DiscardUnknown(m)
}

var xxx_messageInfo_NameListing proto.InternalMessageInfo

func (m *NameListing) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameListing) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NameListing) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

type NameListingBid struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	Bidder string `protobuf:"bytes,3,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Price  string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty" yaml:"price"`
}

func (m *NameListingBid) Reset()         { *m = NameListingBid{} }
func (m *NameListingBid) String() string { return proto.CompactTextString(m) }
func (*NameListingBid) ProtoMessage()    {}
func (*NameListingBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_c79faab191df1893, []int{1}
}
func (m *NameListingBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameListingBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameListingBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameListingBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameListingBid.Merge(m, src)
}
func (m *NameListingBid) XXX_Size() int {
	return m.Size()
}
func (m *NameListingBid) XXX_DiscardUnknown() {
	xxx_messageInfo_NameListingBid.DiscardUnknown(m)
}

var xxx_messageInfo_NameListingBid proto.InternalMessageInfo

func (m *NameListingBid) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NameListingBid) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameListingBid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *NameListingBid) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func init() {
	proto.RegisterType((*NameListing)(nil), "ollo.ons.v1.NameListing")
	proto.RegisterType((*NameListingBid)(nil), "ollo.ons.v1.NameListingBid")
}

func init() { proto.RegisterFile("ollo/ons/v1/listing.proto", fileDescriptor_c79faab191df1893) }

var fileDescriptor_c79faab191df1893 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x9b, 0xdc, 0xde, 0x4a, 0x75, 0x6f, 0x2f, 0x10, 0x21, 0x11, 0x2a, 0x91, 0x20, 0x23,
	0xa1, 0x32, 0x10, 0xab, 0x62, 0x63, 0xcc, 0x8c, 0x18, 0x32, 0xb2, 0x39, 0x8d, 0x49, 0x2d, 0xc5,
	0x39, 0x51, 0xec, 0xb6, 0x74, 0xe5, 0x09, 0x78, 0x0b, 0x5e, 0x85, 0xb1, 0x23, 0x53, 0x84, 0xda,
	0x37, 0xc8, 0x13, 0xa0, 0xd8, 0x01, 0x2a, 0x86, 0x6e, 0x39, 0xff, 0xff, 0x1d, 0xe5, 0x93, 0x0f,
	0x3a, 0x85, 0x2c, 0x03, 0x02, 0xb9, 0x24, 0x8b, 0x09, 0xc9, 0xb8, 0x54, 0x3c, 0x4f, 0x83, 0xa2,
	0x04, 0x05, 0xce, 0xa0, 0xa9, 0x02, 0xc8, 0x65, 0xb0, 0x98, 0x8c, 0x8e, 0x53, 0x48, 0x41, 0xe7,
	0xa4, 0xf9, 0x32, 0xc8, 0xc8, 0xdd, 0xdd, 0x2e, 0x68, 0x49, 0x85, 0x6c, 0x9b, 0x93, 0xdd, 0x66,
	0x39, 0x03, 0xfe, 0x55, 0xf8, 0x29, 0x40, 0x9a, 0x31, 0xa2, 0xa7, 0x78, 0xfe, 0x48, 0x14, 0x17,
	0x4c, 0x2a, 0x2a, 0x0a, 0x03, 0xe0, 0x67, 0x0b, 0x0d, 0xee, 0xa9, 0x60, 0x77, 0x46, 0xc6, 0xb9,
	0x40, 0xdd, 0x9c, 0x0a, 0xe6, 0x5a, 0xe7, 0xd6, 0xb8, 0x1f, 0x1e, 0xd4, 0x95, 0x3f, 0x58, 0x51,
	0x91, 0xdd, 0xe2, 0x26, 0xc5, 0x91, 0x2e, 0x9d, 0x4b, 0xf4, 0x17, 0x96, 0x39, 0x2b, 0x5d, 0x5b,
	0x53, 0x87, 0x75, 0xe5, 0xff, 0x33, 0x94, 0x8e, 0x71, 0x64, 0xea, 0x86, 0x2b, 0x4a, 0x3e, 0x65,
	0xee, 0x9f, 0xdf, 0x9c, 0x8e, 0x71, 0x64, 0x6a, 0xfc, 0x6a, 0xa1, 0xff, 0x3b, 0x12, 0x21, 0x4f,
	0x9c, 0x33, 0x64, 0xf3, 0xa4, 0xb5, 0x18, 0xd6, 0x95, 0xdf, 0x37, 0x7b, 0x3c, 0xc1, 0x91, 0xcd,
	0x93, 0x6f, 0x4d, 0x7b, 0x9f, 0xe6, 0x15, 0xea, 0xc5, 0x3c, 0x49, 0x58, 0xd9, 0xfe, 0xff, 0xa8,
	0xae, 0xfc, 0xa1, 0xc1, 0x4c, 0x8e, 0xa3, 0x16, 0xf8, 0x31, 0xed, 0xee, 0x35, 0x0d, 0xc3, 0xb7,
	0x8d, 0x67, 0xad, 0x37, 0x9e, 0xf5, 0xb1, 0xf1, 0xac, 0x97, 0xad, 0xd7, 0x59, 0x6f, 0xbd, 0xce,
	0xfb, 0xd6, 0xeb, 0x3c, 0x8c, 0x53, 0xae, 0x66, 0xf3, 0x38, 0x98, 0x82, 0x20, 0xcd, 0x35, 0xae,
	0xa5, 0xa2, 0x8a, 0x43, 0xae, 0x07, 0xf2, 0xa4, 0x8f, 0xa3, 0x56, 0x05, 0x93, 0x71, 0x4f, 0xbf,
	0xfc, 0xcd, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x1a, 0xec, 0x73, 0x0d, 0x02, 0x00, 0x00,
}

func (m *NameListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintListing(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintListing(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintListing(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameListingBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameListingBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameListingBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintListing(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintListing(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintListing(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintListing(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintListing(dAtA []byte, offset int, v uint64) int {
	offset -= sovListing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NameListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovListing(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovListing(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovListing(uint64(l))
	}
	return n
}

func (m *NameListingBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovListing(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovListing(uint64(l))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovListing(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovListing(uint64(l))
	}
	return n
}

func sovListing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozListing(x uint64) (n int) {
	return sovListing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NameListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthListing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameListingBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowListing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameListingBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameListingBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowListing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthListing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthListing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipListing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthListing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipListing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowListing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowListing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowListing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthListing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupListing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthListing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthListing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowListing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupListing = fmt.Errorf("proto: unexpected end of group")
)
