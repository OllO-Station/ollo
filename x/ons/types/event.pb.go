// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventNameExpired struct {
}

func (m *EventNameExpired) Reset()         { *m = EventNameExpired{} }
func (m *EventNameExpired) String() string { return proto.CompactTextString(m) }
func (*EventNameExpired) ProtoMessage()    {}
func (*EventNameExpired) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{0}
}
func (m *EventNameExpired) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameExpired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameExpired.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameExpired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameExpired.Merge(m, src)
}
func (m *EventNameExpired) XXX_Size() int {
	return m.Size()
}
func (m *EventNameExpired) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameExpired.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameExpired proto.InternalMessageInfo

type EventNameListed struct {
}

func (m *EventNameListed) Reset()         { *m = EventNameListed{} }
func (m *EventNameListed) String() string { return proto.CompactTextString(m) }
func (*EventNameListed) ProtoMessage()    {}
func (*EventNameListed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{1}
}
func (m *EventNameListed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameListed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameListed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameListed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameListed.Merge(m, src)
}
func (m *EventNameListed) XXX_Size() int {
	return m.Size()
}
func (m *EventNameListed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameListed.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameListed proto.InternalMessageInfo

type EventNameListingCanceled struct {
}

func (m *EventNameListingCanceled) Reset()         { *m = EventNameListingCanceled{} }
func (m *EventNameListingCanceled) String() string { return proto.CompactTextString(m) }
func (*EventNameListingCanceled) ProtoMessage()    {}
func (*EventNameListingCanceled) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{2}
}
func (m *EventNameListingCanceled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameListingCanceled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameListingCanceled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameListingCanceled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameListingCanceled.Merge(m, src)
}
func (m *EventNameListingCanceled) XXX_Size() int {
	return m.Size()
}
func (m *EventNameListingCanceled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameListingCanceled.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameListingCanceled proto.InternalMessageInfo

type EventNameUnlisted struct {
}

func (m *EventNameUnlisted) Reset()         { *m = EventNameUnlisted{} }
func (m *EventNameUnlisted) String() string { return proto.CompactTextString(m) }
func (*EventNameUnlisted) ProtoMessage()    {}
func (*EventNameUnlisted) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{3}
}
func (m *EventNameUnlisted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameUnlisted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameUnlisted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameUnlisted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameUnlisted.Merge(m, src)
}
func (m *EventNameUnlisted) XXX_Size() int {
	return m.Size()
}
func (m *EventNameUnlisted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameUnlisted.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameUnlisted proto.InternalMessageInfo

type EventNamePurchased struct {
}

func (m *EventNamePurchased) Reset()         { *m = EventNamePurchased{} }
func (m *EventNamePurchased) String() string { return proto.CompactTextString(m) }
func (*EventNamePurchased) ProtoMessage()    {}
func (*EventNamePurchased) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{4}
}
func (m *EventNamePurchased) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNamePurchased) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNamePurchased.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNamePurchased) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNamePurchased.Merge(m, src)
}
func (m *EventNamePurchased) XXX_Size() int {
	return m.Size()
}
func (m *EventNamePurchased) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNamePurchased.DiscardUnknown(m)
}

var xxx_messageInfo_EventNamePurchased proto.InternalMessageInfo

type EventNameTransferred struct {
}

func (m *EventNameTransferred) Reset()         { *m = EventNameTransferred{} }
func (m *EventNameTransferred) String() string { return proto.CompactTextString(m) }
func (*EventNameTransferred) ProtoMessage()    {}
func (*EventNameTransferred) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{5}
}
func (m *EventNameTransferred) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameTransferred) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameTransferred.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameTransferred) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameTransferred.Merge(m, src)
}
func (m *EventNameTransferred) XXX_Size() int {
	return m.Size()
}
func (m *EventNameTransferred) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameTransferred.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameTransferred proto.InternalMessageInfo

type EventNameRenewed struct {
}

func (m *EventNameRenewed) Reset()         { *m = EventNameRenewed{} }
func (m *EventNameRenewed) String() string { return proto.CompactTextString(m) }
func (*EventNameRenewed) ProtoMessage()    {}
func (*EventNameRenewed) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{6}
}
func (m *EventNameRenewed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameRenewed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameRenewed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameRenewed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameRenewed.Merge(m, src)
}
func (m *EventNameRenewed) XXX_Size() int {
	return m.Size()
}
func (m *EventNameRenewed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameRenewed.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameRenewed proto.InternalMessageInfo

type EventNameAddThread struct {
}

func (m *EventNameAddThread) Reset()         { *m = EventNameAddThread{} }
func (m *EventNameAddThread) String() string { return proto.CompactTextString(m) }
func (*EventNameAddThread) ProtoMessage()    {}
func (*EventNameAddThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{7}
}
func (m *EventNameAddThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameAddThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameAddThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameAddThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameAddThread.Merge(m, src)
}
func (m *EventNameAddThread) XXX_Size() int {
	return m.Size()
}
func (m *EventNameAddThread) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameAddThread.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameAddThread proto.InternalMessageInfo

type EventNameRemoveThread struct {
}

func (m *EventNameRemoveThread) Reset()         { *m = EventNameRemoveThread{} }
func (m *EventNameRemoveThread) String() string { return proto.CompactTextString(m) }
func (*EventNameRemoveThread) ProtoMessage()    {}
func (*EventNameRemoveThread) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8b2a8965fac86bd, []int{8}
}
func (m *EventNameRemoveThread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNameRemoveThread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNameRemoveThread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNameRemoveThread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNameRemoveThread.Merge(m, src)
}
func (m *EventNameRemoveThread) XXX_Size() int {
	return m.Size()
}
func (m *EventNameRemoveThread) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNameRemoveThread.DiscardUnknown(m)
}

var xxx_messageInfo_EventNameRemoveThread proto.InternalMessageInfo

func init() {
	proto.RegisterType((*EventNameExpired)(nil), "ollo.ons.v1.EventNameExpired")
	proto.RegisterType((*EventNameListed)(nil), "ollo.ons.v1.EventNameListed")
	proto.RegisterType((*EventNameListingCanceled)(nil), "ollo.ons.v1.EventNameListingCanceled")
	proto.RegisterType((*EventNameUnlisted)(nil), "ollo.ons.v1.EventNameUnlisted")
	proto.RegisterType((*EventNamePurchased)(nil), "ollo.ons.v1.EventNamePurchased")
	proto.RegisterType((*EventNameTransferred)(nil), "ollo.ons.v1.EventNameTransferred")
	proto.RegisterType((*EventNameRenewed)(nil), "ollo.ons.v1.EventNameRenewed")
	proto.RegisterType((*EventNameAddThread)(nil), "ollo.ons.v1.EventNameAddThread")
	proto.RegisterType((*EventNameRemoveThread)(nil), "ollo.ons.v1.EventNameRemoveThread")
}

func init() { proto.RegisterFile("ollo/ons/v1/event.proto", fileDescriptor_d8b2a8965fac86bd) }

var fileDescriptor_d8b2a8965fac86bd = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xdb, 0x85, 0xc1, 0x0c, 0xd0, 0x52, 0x68, 0xd5, 0xc1, 0x48, 0x9e, 0x58, 0x88, 0x55,
	0xf1, 0x04, 0x14, 0x75, 0x43, 0x08, 0xa1, 0xb2, 0xb0, 0xb9, 0xf1, 0xd5, 0xb1, 0x14, 0xfb, 0x22,
	0xdb, 0x49, 0xcb, 0x5b, 0xf0, 0x58, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0x28, 0x09, 0x44, 0x29,
	0x9b, 0xef, 0xfb, 0xee, 0xce, 0xa7, 0x9f, 0x4c, 0x31, 0x4d, 0x91, 0xa3, 0xf5, 0xbc, 0x58, 0x70,
	0x28, 0xc0, 0x86, 0x28, 0x73, 0x18, 0x70, 0x7c, 0x5a, 0x8b, 0x08, 0xad, 0x8f, 0x8a, 0xc5, 0x7c,
	0xa2, 0x50, 0x61, 0xc3, 0x79, 0xfd, 0x6a, 0x5b, 0xe6, 0xb3, 0xfe, 0x6c, 0x26, 0x9c, 0x30, 0xfe,
	0xd7, 0x1c, 0x6d, 0xdd, 0x25, 0xa8, 0xff, 0xc4, 0xb5, 0x42, 0x54, 0x29, 0xf0, 0xa6, 0xda, 0xe4,
	0x5b, 0x1e, 0xb4, 0x01, 0x1f, 0x84, 0xc9, 0xda, 0x06, 0x36, 0x26, 0xe7, 0xab, 0xfa, 0x8a, 0x27,
	0x61, 0x60, 0xb5, 0xcf, 0xb4, 0x03, 0xc9, 0x46, 0xe4, 0xac, 0x63, 0x8f, 0xda, 0x07, 0x90, 0x6c,
	0x4e, 0x66, 0x47, 0x48, 0x5b, 0xf5, 0x20, 0x6c, 0x0c, 0x29, 0x48, 0x76, 0x41, 0x46, 0x9d, 0x7b,
	0xb5, 0x69, 0x3b, 0x30, 0x21, 0xe3, 0x0e, 0x3e, 0xe7, 0x2e, 0x4e, 0x84, 0x07, 0xc9, 0xae, 0xc8,
	0xa4, 0xa3, 0x6b, 0x27, 0xac, 0xdf, 0x82, 0xab, 0x7f, 0xec, 0x5f, 0xf1, 0x02, 0x16, 0x76, 0xff,
	0x36, 0xdc, 0x4b, 0xb9, 0x4e, 0x1c, 0x08, 0xc9, 0xa6, 0xe4, 0xb2, 0xd7, 0x69, 0xb0, 0x80, 0x56,
	0x2c, 0x97, 0x9f, 0x25, 0x1d, 0x1e, 0x4a, 0x3a, 0xfc, 0x2e, 0xe9, 0xf0, 0xa3, 0xa2, 0x83, 0x43,
	0x45, 0x07, 0x5f, 0x15, 0x1d, 0xbc, 0xdd, 0x28, 0x1d, 0x92, 0x7c, 0x13, 0xc5, 0x68, 0x78, 0x9d,
	0xd3, 0xad, 0x0f, 0x22, 0x68, 0xb4, 0x4d, 0xc1, 0xf7, 0x4d, 0x6c, 0xe1, 0x3d, 0x03, 0xbf, 0x39,
	0x69, 0x32, 0xb9, 0xfb, 0x09, 0x00, 0x00, 0xff, 0xff, 0xab, 0xba, 0x60, 0xf2, 0xa5, 0x01, 0x00,
	0x00,
}

func (m *EventNameExpired) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameExpired) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameExpired) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNameListed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameListed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameListed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNameListingCanceled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameListingCanceled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameListingCanceled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNameUnlisted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameUnlisted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameUnlisted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNamePurchased) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNamePurchased) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNamePurchased) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNameTransferred) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameTransferred) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameTransferred) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNameRenewed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameRenewed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameRenewed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNameAddThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameAddThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameAddThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventNameRemoveThread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNameRemoveThread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNameRemoveThread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventNameExpired) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNameListed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNameListingCanceled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNameUnlisted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNamePurchased) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNameTransferred) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNameRenewed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNameAddThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventNameRemoveThread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventNameExpired) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameExpired: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameExpired: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNameListed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameListed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameListed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNameListingCanceled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameListingCanceled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameListingCanceled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNameUnlisted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameUnlisted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameUnlisted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNamePurchased) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNamePurchased: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNamePurchased: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNameTransferred) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameTransferred: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameTransferred: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNameRenewed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameRenewed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameRenewed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNameAddThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameAddThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameAddThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNameRemoveThread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNameRemoveThread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNameRemoveThread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
