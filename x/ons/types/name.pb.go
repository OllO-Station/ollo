// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1beta1/name.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NameStatus int32

const (
	NAME_STATUS_UNSPECIFIED    NameStatus = 0
	NAME_STATUS_ARCHIVED       NameStatus = 1
	NAME_STATUS_OWNED          NameStatus = 2
	NAME_STATUS_ACTIVE         NameStatus = 3
	NAME_STATUS_ACTIVE_AND_SET NameStatus = 4
	NAME_STATUS_ON_AUCTION     NameStatus = 5
	NAME_STATUS_DISABLED       NameStatus = 6
	NAME_STATUS_SUSPENDED      NameStatus = 7
)

var NameStatus_name = map[int32]string{
	0: "NAME_STATUS_UNSPECIFIED",
	1: "NAME_STATUS_ARCHIVED",
	2: "NAME_STATUS_OWNED",
	3: "NAME_STATUS_ACTIVE",
	4: "NAME_STATUS_ACTIVE_AND_SET",
	5: "NAME_STATUS_ON_AUCTION",
	6: "NAME_STATUS_DISABLED",
	7: "NAME_STATUS_SUSPENDED",
}

var NameStatus_value = map[string]int32{
	"NAME_STATUS_UNSPECIFIED":    0,
	"NAME_STATUS_ARCHIVED":       1,
	"NAME_STATUS_OWNED":          2,
	"NAME_STATUS_ACTIVE":         3,
	"NAME_STATUS_ACTIVE_AND_SET": 4,
	"NAME_STATUS_ON_AUCTION":     5,
	"NAME_STATUS_DISABLED":       6,
	"NAME_STATUS_SUSPENDED":      7,
}

func (x NameStatus) String() string {
	return proto.EnumName(NameStatus_name, int32(x))
}

func (NameStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_620b090776ac2c4c, []int{0}
}

type NameType int32

const (
	NAME_TYPE_UNSPECIFIED       NameType = 0
	NAME_TYPE_NAME              NameType = 1
	NAME_TYPE_EVENT             NameType = 2
	NAME_TYPE_OTHER             NameType = 3
	NAME_TYPE_USERNAME          NameType = 4
	NAME_TYPE_OLLO_NAME         NameType = 5
	NAME_TYPE_GROUP_NAME        NameType = 6
	NAME_TYPE_GROUP_MEMBER_NAME NameType = 7
)

var NameType_name = map[int32]string{
	0: "NAME_TYPE_UNSPECIFIED",
	1: "NAME_TYPE_NAME",
	2: "NAME_TYPE_EVENT",
	3: "NAME_TYPE_OTHER",
	4: "NAME_TYPE_USERNAME",
	5: "NAME_TYPE_OLLO_NAME",
	6: "NAME_TYPE_GROUP_NAME",
	7: "NAME_TYPE_GROUP_MEMBER_NAME",
}

var NameType_value = map[string]int32{
	"NAME_TYPE_UNSPECIFIED":       0,
	"NAME_TYPE_NAME":              1,
	"NAME_TYPE_EVENT":             2,
	"NAME_TYPE_OTHER":             3,
	"NAME_TYPE_USERNAME":          4,
	"NAME_TYPE_OLLO_NAME":         5,
	"NAME_TYPE_GROUP_NAME":        6,
	"NAME_TYPE_GROUP_MEMBER_NAME": 7,
}

func (x NameType) String() string {
	return proto.EnumName(NameType_name, int32(x))
}

func (NameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_620b090776ac2c4c, []int{1}
}

// General name, that is, putting a name to something. Not for naming people
type Name struct {
	Id        uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameType  NameType   `protobuf:"varint,3,opt,name=name_type,json=nameType,proto3,enum=ollo.ons.v1beta1.NameType" json:"name_type,omitempty"`
	Value     string     `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	OwnerAddr string     `protobuf:"bytes,5,opt,name=owner_addr,json=ownerAddr,proto3" json:"owner_addr,omitempty"`
	Status    NameStatus `protobuf:"varint,6,opt,name=status,proto3,enum=ollo.ons.v1beta1.NameStatus" json:"status,omitempty"`
	PricePaid string     `protobuf:"bytes,7,opt,name=price_paid,json=pricePaid,proto3" json:"price_paid,omitempty"`
	ColorHint string     `protobuf:"bytes,8,opt,name=color_hint,json=colorHint,proto3" json:"color_hint,omitempty"`
	// Optional
	Prefix *NameEnd `protobuf:"bytes,9,opt,name=prefix,proto3" json:"prefix,omitempty"`
	//Optional
	Suffix   *NameEnd `protobuf:"bytes,10,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Tag      []string `protobuf:"bytes,11,rep,name=tag,proto3" json:"tag,omitempty"`
	BoughtAt string   `protobuf:"bytes,12,opt,name=bought_at,json=boughtAt,proto3" json:"bought_at,omitempty"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_620b090776ac2c4c, []int{0}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Name.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return m.Size()
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Name) GetNameType() NameType {
	if m != nil {
		return m.NameType
	}
	return NAME_TYPE_UNSPECIFIED
}

func (m *Name) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Name) GetOwnerAddr() string {
	if m != nil {
		return m.OwnerAddr
	}
	return ""
}

func (m *Name) GetStatus() NameStatus {
	if m != nil {
		return m.Status
	}
	return NAME_STATUS_UNSPECIFIED
}

func (m *Name) GetPricePaid() string {
	if m != nil {
		return m.PricePaid
	}
	return ""
}

func (m *Name) GetColorHint() string {
	if m != nil {
		return m.ColorHint
	}
	return ""
}

func (m *Name) GetPrefix() *NameEnd {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *Name) GetSuffix() *NameEnd {
	if m != nil {
		return m.Suffix
	}
	return nil
}

func (m *Name) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *Name) GetBoughtAt() string {
	if m != nil {
		return m.BoughtAt
	}
	return ""
}

type NameEndCharacterFormat struct {
	Letter     string `protobuf:"bytes,1,opt,name=letter,proto3" json:"letter,omitempty"`
	ColorHint  string `protobuf:"bytes,2,opt,name=color_hint,json=colorHint,proto3" json:"color_hint,omitempty"`
	FormatHint string `protobuf:"bytes,3,opt,name=format_hint,json=formatHint,proto3" json:"format_hint,omitempty"`
}

func (m *NameEndCharacterFormat) Reset()         { *m = NameEndCharacterFormat{} }
func (m *NameEndCharacterFormat) String() string { return proto.CompactTextString(m) }
func (*NameEndCharacterFormat) ProtoMessage()    {}
func (*NameEndCharacterFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_620b090776ac2c4c, []int{1}
}
func (m *NameEndCharacterFormat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameEndCharacterFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameEndCharacterFormat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameEndCharacterFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameEndCharacterFormat.Merge(m, src)
}
func (m *NameEndCharacterFormat) XXX_Size() int {
	return m.Size()
}
func (m *NameEndCharacterFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_NameEndCharacterFormat.DiscardUnknown(m)
}

var xxx_messageInfo_NameEndCharacterFormat proto.InternalMessageInfo

func (m *NameEndCharacterFormat) GetLetter() string {
	if m != nil {
		return m.Letter
	}
	return ""
}

func (m *NameEndCharacterFormat) GetColorHint() string {
	if m != nil {
		return m.ColorHint
	}
	return ""
}

func (m *NameEndCharacterFormat) GetFormatHint() string {
	if m != nil {
		return m.FormatHint
	}
	return ""
}

type NameEnd struct {
	Id     string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Letter []*NameEndCharacterFormat `protobuf:"bytes,2,rep,name=letter,proto3" json:"letter,omitempty"`
}

func (m *NameEnd) Reset()         { *m = NameEnd{} }
func (m *NameEnd) String() string { return proto.CompactTextString(m) }
func (*NameEnd) ProtoMessage()    {}
func (*NameEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_620b090776ac2c4c, []int{2}
}
func (m *NameEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameEnd.Merge(m, src)
}
func (m *NameEnd) XXX_Size() int {
	return m.Size()
}
func (m *NameEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_NameEnd.DiscardUnknown(m)
}

var xxx_messageInfo_NameEnd proto.InternalMessageInfo

func (m *NameEnd) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NameEnd) GetLetter() []*NameEndCharacterFormat {
	if m != nil {
		return m.Letter
	}
	return nil
}

type NameTag struct {
	Tag         string    `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatorAddr string    `protobuf:"bytes,3,opt,name=creator_addr,json=creatorAddr,proto3" json:"creator_addr,omitempty"`
	Magnitude   uint32    `protobuf:"varint,4,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	TaggedAt    time.Time `protobuf:"bytes,5,opt,name=tagged_at,json=taggedAt,proto3,stdtime" json:"tagged_at"`
}

func (m *NameTag) Reset()         { *m = NameTag{} }
func (m *NameTag) String() string { return proto.CompactTextString(m) }
func (*NameTag) ProtoMessage()    {}
func (*NameTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_620b090776ac2c4c, []int{3}
}
func (m *NameTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameTag.Merge(m, src)
}
func (m *NameTag) XXX_Size() int {
	return m.Size()
}
func (m *NameTag) XXX_DiscardUnknown() {
	xxx_messageInfo_NameTag.DiscardUnknown(m)
}

var xxx_messageInfo_NameTag proto.InternalMessageInfo

func (m *NameTag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *NameTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameTag) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

func (m *NameTag) GetMagnitude() uint32 {
	if m != nil {
		return m.Magnitude
	}
	return 0
}

func (m *NameTag) GetTaggedAt() time.Time {
	if m != nil {
		return m.TaggedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("ollo.ons.v1beta1.NameStatus", NameStatus_name, NameStatus_value)
	proto.RegisterEnum("ollo.ons.v1beta1.NameType", NameType_name, NameType_value)
	proto.RegisterType((*Name)(nil), "ollo.ons.v1beta1.Name")
	proto.RegisterType((*NameEndCharacterFormat)(nil), "ollo.ons.v1beta1.NameEndCharacterFormat")
	proto.RegisterType((*NameEnd)(nil), "ollo.ons.v1beta1.NameEnd")
	proto.RegisterType((*NameTag)(nil), "ollo.ons.v1beta1.NameTag")
}

func init() { proto.RegisterFile("ollo/ons/v1beta1/name.proto", fileDescriptor_620b090776ac2c4c) }

var fileDescriptor_620b090776ac2c4c = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0x24, 0x69, 0x1a, 0xbf, 0x2e, 0xc5, 0xcc, 0x76, 0xbb, 0xde, 0x74, 0x71, 0xc2, 0x9e,
	0xa2, 0x1e, 0x12, 0xb5, 0x20, 0x21, 0x71, 0xc2, 0x4d, 0x66, 0x69, 0xa4, 0xd6, 0x89, 0x6c, 0xa7,
	0x08, 0x2e, 0xd6, 0x24, 0x9e, 0xba, 0x96, 0x12, 0x4f, 0x64, 0x4f, 0x96, 0x5d, 0x7e, 0x01, 0xc7,
	0x3d, 0x72, 0x5c, 0x09, 0x0e, 0x48, 0xfc, 0x06, 0xee, 0x7b, 0xdc, 0x23, 0x5c, 0x00, 0xb5, 0x17,
	0x2e, 0xfc, 0x07, 0xe4, 0x19, 0xa7, 0x71, 0x43, 0x11, 0x27, 0x8f, 0xbf, 0xef, 0xbd, 0xef, 0x7b,
	0x6f, 0xe6, 0xcd, 0xc0, 0x01, 0x9f, 0xcd, 0x78, 0x97, 0xc7, 0x69, 0xf7, 0xc5, 0xd1, 0x84, 0x09,
	0x7a, 0xd4, 0x8d, 0xe9, 0x9c, 0x75, 0x16, 0x09, 0x17, 0x1c, 0xeb, 0x19, 0xd9, 0xe1, 0x71, 0xda,
	0xc9, 0xc9, 0xc6, 0x5e, 0xc8, 0x43, 0x2e, 0xc9, 0x6e, 0xb6, 0x52, 0x71, 0x0d, 0x73, 0xca, 0xd3,
	0x39, 0x4f, 0xbb, 0x13, 0x9a, 0xb2, 0x5b, 0x9d, 0x29, 0x8f, 0xe2, 0x9c, 0x6f, 0x86, 0x9c, 0x87,
	0x33, 0xd6, 0x95, 0x7f, 0x93, 0xe5, 0x65, 0x57, 0x44, 0x73, 0x96, 0x0a, 0x3a, 0x5f, 0xa8, 0x80,
	0x67, 0x3f, 0x57, 0xa0, 0x6a, 0xd3, 0x39, 0xc3, 0xbb, 0x50, 0x8e, 0x02, 0x03, 0xb5, 0x50, 0xbb,
	0xea, 0x94, 0xa3, 0x00, 0x63, 0xa8, 0x66, 0xf5, 0x18, 0xe5, 0x16, 0x6a, 0x6b, 0x8e, 0x5c, 0xe3,
	0x4f, 0x41, 0xcb, 0xbe, 0xbe, 0x78, 0xb5, 0x60, 0x46, 0xa5, 0x85, 0xda, 0xbb, 0xc7, 0x8d, 0xce,
	0x66, 0xa5, 0x9d, 0x4c, 0xce, 0x7b, 0xb5, 0x60, 0x4e, 0x3d, 0xce, 0x57, 0x78, 0x0f, 0xb6, 0x5e,
	0xd0, 0xd9, 0x92, 0x19, 0x55, 0xa9, 0xa6, 0x7e, 0xf0, 0x87, 0x00, 0xfc, 0x9b, 0x98, 0x25, 0x3e,
	0x0d, 0x82, 0xc4, 0xd8, 0x92, 0x94, 0x26, 0x11, 0x2b, 0x08, 0x12, 0xfc, 0x09, 0xd4, 0x52, 0x41,
	0xc5, 0x32, 0x35, 0x6a, 0xd2, 0xea, 0xe9, 0xfd, 0x56, 0xae, 0x8c, 0x71, 0xf2, 0xd8, 0x4c, 0x74,
	0x91, 0x44, 0x53, 0xe6, 0x2f, 0x68, 0x14, 0x18, 0xdb, 0x4a, 0x54, 0x22, 0x23, 0x1a, 0x05, 0x19,
	0x3d, 0xe5, 0x33, 0x9e, 0xf8, 0x57, 0x51, 0x2c, 0x8c, 0xba, 0xa2, 0x25, 0x72, 0x1a, 0xc5, 0x02,
	0x1f, 0x41, 0x6d, 0x91, 0xb0, 0xcb, 0xe8, 0xa5, 0xa1, 0xb5, 0x50, 0x7b, 0xe7, 0xf8, 0xc9, 0xfd,
	0x9e, 0x24, 0x0e, 0x9c, 0x3c, 0x30, 0x4b, 0x49, 0x97, 0x97, 0x59, 0x0a, 0xfc, 0x6f, 0x8a, 0x0a,
	0xc4, 0x3a, 0x54, 0x04, 0x0d, 0x8d, 0x9d, 0x56, 0xa5, 0xad, 0x39, 0xd9, 0x12, 0x1f, 0x80, 0x36,
	0xe1, 0xcb, 0xf0, 0x4a, 0xf8, 0x54, 0x18, 0x0f, 0x64, 0x55, 0x75, 0x05, 0x58, 0xe2, 0xb3, 0xfa,
	0xf7, 0x6f, 0x9a, 0xe8, 0xaf, 0x37, 0x4d, 0xf4, 0xec, 0x5b, 0xd8, 0xcf, 0xb5, 0x7a, 0x57, 0x34,
	0xa1, 0x53, 0xc1, 0x92, 0xe7, 0x3c, 0x99, 0x53, 0x81, 0xf7, 0xa1, 0x36, 0x63, 0x42, 0xb0, 0x44,
	0x1e, 0xa1, 0xe6, 0xe4, 0x7f, 0x1b, 0xfd, 0x96, 0x37, 0xfb, 0x6d, 0xc2, 0xce, 0xa5, 0x14, 0x50,
	0x7c, 0x45, 0xf2, 0xa0, 0xa0, 0x2c, 0xa0, 0xe0, 0xcd, 0x60, 0x3b, 0xf7, 0x2e, 0xcc, 0x8a, 0x26,
	0x67, 0xe5, 0xf3, 0x5b, 0xf3, 0x72, 0xab, 0xd2, 0xde, 0x39, 0x6e, 0xff, 0xe7, 0x16, 0x6c, 0x94,
	0xbd, 0x2a, 0xb3, 0x60, 0xf3, 0x0b, 0x52, 0x3e, 0x1e, 0x0d, 0x57, 0xfb, 0xa4, 0x8c, 0xe4, 0x3e,
	0xdd, 0x37, 0x95, 0x1f, 0xc1, 0x83, 0x69, 0xc2, 0xa8, 0xe0, 0xf9, 0x20, 0xa9, 0x26, 0x76, 0x72,
	0x4c, 0x8e, 0xd2, 0x53, 0xd0, 0xe6, 0x34, 0x8c, 0x23, 0xb1, 0x0c, 0xd4, 0x0c, 0xbe, 0xe7, 0xac,
	0x01, 0x6c, 0x81, 0x26, 0x68, 0x18, 0xb2, 0x20, 0xdb, 0xfc, 0x2d, 0x79, 0x88, 0x8d, 0x8e, 0xba,
	0x38, 0x9d, 0xd5, 0xc5, 0xe9, 0x78, 0xab, 0x8b, 0x73, 0x52, 0x7f, 0xfb, 0x7b, 0xb3, 0xf4, 0xfa,
	0x8f, 0x26, 0x72, 0xea, 0x2a, 0xad, 0x78, 0x44, 0x87, 0x7f, 0x23, 0x80, 0xf5, 0x58, 0xe2, 0x03,
	0x78, 0x6c, 0x5b, 0xe7, 0xc4, 0x77, 0x3d, 0xcb, 0x1b, 0xbb, 0xfe, 0xd8, 0x76, 0x47, 0xa4, 0x37,
	0x78, 0x3e, 0x20, 0x7d, 0xbd, 0x84, 0x0d, 0xd8, 0x2b, 0x92, 0x96, 0xd3, 0x3b, 0x1d, 0x5c, 0x90,
	0xbe, 0x8e, 0xf0, 0x23, 0xf8, 0xa0, 0xc8, 0x0c, 0xbf, 0xb4, 0x49, 0x5f, 0x2f, 0xe3, 0x7d, 0xc0,
	0x77, 0x12, 0x7a, 0xde, 0xe0, 0x82, 0xe8, 0x15, 0x6c, 0x42, 0xe3, 0xdf, 0xb8, 0x6f, 0xd9, 0x7d,
	0xdf, 0x25, 0x9e, 0x5e, 0xc5, 0x0d, 0xd8, 0xbf, 0x23, 0x67, 0xfb, 0xd6, 0xb8, 0xe7, 0x0d, 0x86,
	0xb6, 0xbe, 0xb5, 0x59, 0x44, 0x7f, 0xe0, 0x5a, 0x27, 0x67, 0xa4, 0xaf, 0xd7, 0xf0, 0x13, 0x78,
	0x54, 0x64, 0xdc, 0xb1, 0x3b, 0x22, 0x76, 0x9f, 0xf4, 0xf5, 0xed, 0x46, 0xfd, 0xbb, 0x1f, 0xcc,
	0xd2, 0x4f, 0x3f, 0x9a, 0xe8, 0xf0, 0x37, 0x04, 0xf5, 0xd5, 0x8d, 0xbf, 0xcd, 0xf0, 0xbe, 0x1a,
	0x91, 0x8d, 0x5e, 0x31, 0xec, 0xae, 0xa9, 0x6c, 0xa5, 0x23, 0xfc, 0x10, 0xde, 0x5f, 0x63, 0xe4,
	0x82, 0xd8, 0x9e, 0x5e, 0xbe, 0x0b, 0x0e, 0xbd, 0x53, 0xe2, 0xe8, 0x95, 0xdb, 0xc6, 0x95, 0xb0,
	0x4b, 0x1c, 0xa9, 0x50, 0xc5, 0x8f, 0xe1, 0x61, 0x21, 0xf8, 0xec, 0x6c, 0xa8, 0xa4, 0xd7, 0x5d,
	0x49, 0xe2, 0x0b, 0x67, 0x38, 0x1e, 0x29, 0xa6, 0x86, 0x9b, 0x70, 0xb0, 0xc9, 0x9c, 0x93, 0xf3,
	0x13, 0xe2, 0xa8, 0x80, 0x42, 0x6f, 0x27, 0x87, 0x6f, 0xaf, 0x4d, 0xf4, 0xee, 0xda, 0x44, 0x7f,
	0x5e, 0x9b, 0xe8, 0xf5, 0x8d, 0x59, 0x7a, 0x77, 0x63, 0x96, 0x7e, 0xbd, 0x31, 0x4b, 0x5f, 0xcb,
	0xf7, 0xb9, 0xfb, 0x52, 0x3e, 0xdf, 0xd9, 0x6b, 0x98, 0x4e, 0x6a, 0x72, 0x52, 0x3e, 0xfe, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x2e, 0x71, 0x18, 0x90, 0xd7, 0x05, 0x00, 0x00,
}

func (this *Name) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Name)
	if !ok {
		that2, ok := that.(Name)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.NameType != that1.NameType {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.OwnerAddr != that1.OwnerAddr {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.PricePaid != that1.PricePaid {
		return false
	}
	if this.ColorHint != that1.ColorHint {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	if !this.Suffix.Equal(that1.Suffix) {
		return false
	}
	if len(this.Tag) != len(that1.Tag) {
		return false
	}
	for i := range this.Tag {
		if this.Tag[i] != that1.Tag[i] {
			return false
		}
	}
	if this.BoughtAt != that1.BoughtAt {
		return false
	}
	return true
}
func (this *NameEndCharacterFormat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameEndCharacterFormat)
	if !ok {
		that2, ok := that.(NameEndCharacterFormat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Letter != that1.Letter {
		return false
	}
	if this.ColorHint != that1.ColorHint {
		return false
	}
	if this.FormatHint != that1.FormatHint {
		return false
	}
	return true
}
func (this *NameEnd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameEnd)
	if !ok {
		that2, ok := that.(NameEnd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Letter) != len(that1.Letter) {
		return false
	}
	for i := range this.Letter {
		if !this.Letter[i].Equal(that1.Letter[i]) {
			return false
		}
	}
	return true
}
func (this *NameTag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NameTag)
	if !ok {
		that2, ok := that.(NameTag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CreatorAddr != that1.CreatorAddr {
		return false
	}
	if this.Magnitude != that1.Magnitude {
		return false
	}
	if !this.TaggedAt.Equal(that1.TaggedAt) {
		return false
	}
	return true
}
func (m *Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BoughtAt) > 0 {
		i -= len(m.BoughtAt)
		copy(dAtA[i:], m.BoughtAt)
		i = encodeVarintName(dAtA, i, uint64(len(m.BoughtAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Tag) > 0 {
		for iNdEx := len(m.Tag) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tag[iNdEx])
			copy(dAtA[i:], m.Tag[iNdEx])
			i = encodeVarintName(dAtA, i, uint64(len(m.Tag[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Suffix != nil {
		{
			size, err := m.Suffix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintName(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintName(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ColorHint) > 0 {
		i -= len(m.ColorHint)
		copy(dAtA[i:], m.ColorHint)
		i = encodeVarintName(dAtA, i, uint64(len(m.ColorHint)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PricePaid) > 0 {
		i -= len(m.PricePaid)
		copy(dAtA[i:], m.PricePaid)
		i = encodeVarintName(dAtA, i, uint64(len(m.PricePaid)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintName(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OwnerAddr) > 0 {
		i -= len(m.OwnerAddr)
		copy(dAtA[i:], m.OwnerAddr)
		i = encodeVarintName(dAtA, i, uint64(len(m.OwnerAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintName(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.NameType != 0 {
		i = encodeVarintName(dAtA, i, uint64(m.NameType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintName(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintName(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NameEndCharacterFormat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameEndCharacterFormat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameEndCharacterFormat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FormatHint) > 0 {
		i -= len(m.FormatHint)
		copy(dAtA[i:], m.FormatHint)
		i = encodeVarintName(dAtA, i, uint64(len(m.FormatHint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ColorHint) > 0 {
		i -= len(m.ColorHint)
		copy(dAtA[i:], m.ColorHint)
		i = encodeVarintName(dAtA, i, uint64(len(m.ColorHint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Letter) > 0 {
		i -= len(m.Letter)
		copy(dAtA[i:], m.Letter)
		i = encodeVarintName(dAtA, i, uint64(len(m.Letter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameEnd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameEnd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Letter) > 0 {
		for iNdEx := len(m.Letter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Letter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintName(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintName(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TaggedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TaggedAt):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintName(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if m.Magnitude != 0 {
		i = encodeVarintName(dAtA, i, uint64(m.Magnitude))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CreatorAddr) > 0 {
		i -= len(m.CreatorAddr)
		copy(dAtA[i:], m.CreatorAddr)
		i = encodeVarintName(dAtA, i, uint64(len(m.CreatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintName(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintName(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintName(dAtA []byte, offset int, v uint64) int {
	offset -= sovName(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovName(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	if m.NameType != 0 {
		n += 1 + sovName(uint64(m.NameType))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.OwnerAddr)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovName(uint64(m.Status))
	}
	l = len(m.PricePaid)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.ColorHint)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovName(uint64(l))
	}
	if m.Suffix != nil {
		l = m.Suffix.Size()
		n += 1 + l + sovName(uint64(l))
	}
	if len(m.Tag) > 0 {
		for _, s := range m.Tag {
			l = len(s)
			n += 1 + l + sovName(uint64(l))
		}
	}
	l = len(m.BoughtAt)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	return n
}

func (m *NameEndCharacterFormat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Letter)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.ColorHint)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.FormatHint)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	return n
}

func (m *NameEnd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	if len(m.Letter) > 0 {
		for _, e := range m.Letter {
			l = e.Size()
			n += 1 + l + sovName(uint64(l))
		}
	}
	return n
}

func (m *NameTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.CreatorAddr)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	if m.Magnitude != 0 {
		n += 1 + sovName(uint64(m.Magnitude))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TaggedAt)
	n += 1 + l + sovName(uint64(l))
	return n
}

func sovName(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozName(x uint64) (n int) {
	return sovName(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowName
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameType", wireType)
			}
			m.NameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameType |= NameType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NameStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PricePaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorHint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorHint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &NameEnd{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Suffix == nil {
				m.Suffix = &NameEnd{}
			}
			if err := m.Suffix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = append(m.Tag, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoughtAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoughtAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipName(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthName
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameEndCharacterFormat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowName
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameEndCharacterFormat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameEndCharacterFormat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Letter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Letter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorHint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorHint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormatHint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormatHint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipName(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthName
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowName
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Letter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Letter = append(m.Letter, &NameEndCharacterFormat{})
			if err := m.Letter[len(m.Letter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipName(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthName
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowName
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Magnitude", wireType)
			}
			m.Magnitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Magnitude |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaggedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TaggedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipName(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthName
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipName(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowName
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowName
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowName
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthName
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupName
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthName
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthName        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowName          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupName = fmt.Errorf("proto: unexpected end of group")
)
