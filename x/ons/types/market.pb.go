// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1beta1/market.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OrderInfo struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrderId     uint64 `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatorAddr string `protobuf:"bytes,4,opt,name=creator_addr,json=creatorAddr,proto3" json:"creator_addr,omitempty"`
	// OrderType type = 5;
	Status OrderStatus `protobuf:"varint,5,opt,name=status,proto3,enum=ollo.ons.v1beta1.OrderStatus" json:"status,omitempty"`
	// repeated ActionTag tags = 6;
	CreatedAt time.Time `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *OrderInfo) Reset()         { *m = OrderInfo{} }
func (m *OrderInfo) String() string { return proto.CompactTextString(m) }
func (*OrderInfo) ProtoMessage()    {}
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca725bdbe67f9da, []int{0}
}
func (m *OrderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderInfo.Merge(m, src)
}
func (m *OrderInfo) XXX_Size() int {
	return m.Size()
}
func (m *OrderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrderInfo proto.InternalMessageInfo

func (m *OrderInfo) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OrderInfo) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *OrderInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OrderInfo) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

func (m *OrderInfo) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return ORDER_STATUS_UNKNOWN
}

func (m *OrderInfo) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type BuyNameOffer struct {
	Id       uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OfferAmt github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=offer_amt,json=offerAmt,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"offer_amt"`
	Info     *OrderInfo                               `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *BuyNameOffer) Reset()         { *m = BuyNameOffer{} }
func (m *BuyNameOffer) String() string { return proto.CompactTextString(m) }
func (*BuyNameOffer) ProtoMessage()    {}
func (*BuyNameOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca725bdbe67f9da, []int{1}
}
func (m *BuyNameOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyNameOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyNameOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuyNameOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyNameOffer.Merge(m, src)
}
func (m *BuyNameOffer) XXX_Size() int {
	return m.Size()
}
func (m *BuyNameOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyNameOffer.DiscardUnknown(m)
}

var xxx_messageInfo_BuyNameOffer proto.InternalMessageInfo

func (m *BuyNameOffer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuyNameOffer) GetOfferAmt() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.OfferAmt
	}
	return nil
}

func (m *BuyNameOffer) GetInfo() *OrderInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type GiveName struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RecipientAddr string     `protobuf:"bytes,2,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`
	Info          *OrderInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *GiveName) Reset()         { *m = GiveName{} }
func (m *GiveName) String() string { return proto.CompactTextString(m) }
func (*GiveName) ProtoMessage()    {}
func (*GiveName) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca725bdbe67f9da, []int{2}
}
func (m *GiveName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveName.Merge(m, src)
}
func (m *GiveName) XXX_Size() int {
	return m.Size()
}
func (m *GiveName) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveName.DiscardUnknown(m)
}

var xxx_messageInfo_GiveName proto.InternalMessageInfo

func (m *GiveName) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GiveName) GetRecipientAddr() string {
	if m != nil {
		return m.RecipientAddr
	}
	return ""
}

func (m *GiveName) GetInfo() *OrderInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type LoanName struct {
	Id            uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RecipientAddr string        `protobuf:"bytes,2,opt,name=recipient_addr,json=recipientAddr,proto3" json:"recipient_addr,omitempty"`
	PeriodStart   time.Time     `protobuf:"bytes,3,opt,name=period_start,json=periodStart,proto3,stdtime" json:"period_start"`
	LoanDuration  time.Duration `protobuf:"bytes,4,opt,name=loan_duration,json=loanDuration,proto3,stdduration" json:"loan_duration"`
	Info          *OrderInfo    `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *LoanName) Reset()         { *m = LoanName{} }
func (m *LoanName) String() string { return proto.CompactTextString(m) }
func (*LoanName) ProtoMessage()    {}
func (*LoanName) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca725bdbe67f9da, []int{3}
}
func (m *LoanName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoanName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoanName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoanName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoanName.Merge(m, src)
}
func (m *LoanName) XXX_Size() int {
	return m.Size()
}
func (m *LoanName) XXX_DiscardUnknown() {
	xxx_messageInfo_LoanName.DiscardUnknown(m)
}

var xxx_messageInfo_LoanName proto.InternalMessageInfo

func (m *LoanName) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LoanName) GetRecipientAddr() string {
	if m != nil {
		return m.RecipientAddr
	}
	return ""
}

func (m *LoanName) GetPeriodStart() time.Time {
	if m != nil {
		return m.PeriodStart
	}
	return time.Time{}
}

func (m *LoanName) GetLoanDuration() time.Duration {
	if m != nil {
		return m.LoanDuration
	}
	return 0
}

func (m *LoanName) GetInfo() *OrderInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type SellNameOffer struct {
	Id         uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SellerAddr string                                   `protobuf:"bytes,2,opt,name=seller_addr,json=sellerAddr,proto3" json:"seller_addr,omitempty"`
	OfferAmt   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=offer_amt,json=offerAmt,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"offer_amt"`
	Info       *OrderInfo                               `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *SellNameOffer) Reset()         { *m = SellNameOffer{} }
func (m *SellNameOffer) String() string { return proto.CompactTextString(m) }
func (*SellNameOffer) ProtoMessage()    {}
func (*SellNameOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ca725bdbe67f9da, []int{4}
}
func (m *SellNameOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SellNameOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SellNameOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SellNameOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellNameOffer.Merge(m, src)
}
func (m *SellNameOffer) XXX_Size() int {
	return m.Size()
}
func (m *SellNameOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_SellNameOffer.DiscardUnknown(m)
}

var xxx_messageInfo_SellNameOffer proto.InternalMessageInfo

func (m *SellNameOffer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SellNameOffer) GetSellerAddr() string {
	if m != nil {
		return m.SellerAddr
	}
	return ""
}

func (m *SellNameOffer) GetOfferAmt() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.OfferAmt
	}
	return nil
}

func (m *SellNameOffer) GetInfo() *OrderInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterType((*OrderInfo)(nil), "ollo.ons.v1beta1.OrderInfo")
	proto.RegisterType((*BuyNameOffer)(nil), "ollo.ons.v1beta1.BuyNameOffer")
	proto.RegisterType((*GiveName)(nil), "ollo.ons.v1beta1.GiveName")
	proto.RegisterType((*LoanName)(nil), "ollo.ons.v1beta1.LoanName")
	proto.RegisterType((*SellNameOffer)(nil), "ollo.ons.v1beta1.SellNameOffer")
}

func init() { proto.RegisterFile("ollo/ons/v1beta1/market.proto", fileDescriptor_6ca725bdbe67f9da) }

var fileDescriptor_6ca725bdbe67f9da = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x4b, 0xdc, 0x4e,
	0x14, 0xde, 0x89, 0xab, 0xbf, 0xec, 0x64, 0x95, 0x1f, 0xa1, 0x87, 0x68, 0x31, 0xd9, 0x0a, 0x85,
	0x50, 0x68, 0x52, 0xb7, 0xf4, 0xd2, 0x9b, 0x6b, 0xc1, 0x0a, 0xa5, 0x42, 0xec, 0xa9, 0x97, 0x30,
	0x9b, 0x99, 0x5d, 0x07, 0x93, 0xbc, 0x65, 0x66, 0x56, 0x2a, 0xf4, 0x7f, 0xa8, 0x47, 0x8f, 0x9e,
	0xfb, 0x6f, 0xf4, 0xe2, 0xd1, 0x63, 0x4f, 0xb5, 0x28, 0x85, 0xde, 0xfb, 0x0f, 0x94, 0x99, 0x24,
	0x8b, 0x55, 0x84, 0x8a, 0xd0, 0x53, 0x92, 0xf7, 0xbd, 0xf7, 0xbd, 0xf7, 0xbe, 0xef, 0x11, 0xbc,
	0x0a, 0x79, 0x0e, 0x31, 0x94, 0x32, 0x3e, 0x58, 0x1f, 0x32, 0x45, 0xd6, 0xe3, 0x82, 0x88, 0x7d,
	0xa6, 0xa2, 0x89, 0x00, 0x05, 0xee, 0xff, 0x1a, 0x8e, 0xa0, 0x94, 0x51, 0x0d, 0xaf, 0x3c, 0x18,
	0xc3, 0x18, 0x0c, 0x18, 0xeb, 0xb7, 0x2a, 0x6f, 0xc5, 0xcf, 0x40, 0x16, 0x20, 0xe3, 0x21, 0x91,
	0x6c, 0xc6, 0x94, 0x01, 0x2f, 0x6b, 0x3c, 0x18, 0x03, 0x8c, 0x73, 0x16, 0x9b, 0xaf, 0xe1, 0x74,
	0x14, 0x2b, 0x5e, 0x30, 0xa9, 0x48, 0x31, 0x69, 0x08, 0xae, 0x27, 0xd0, 0xa9, 0x20, 0x8a, 0x43,
	0x43, 0xe0, 0xdf, 0x98, 0x93, 0x64, 0x1a, 0x96, 0x15, 0xbe, 0xf6, 0x0b, 0xe1, 0xce, 0x8e, 0xa0,
	0x4c, 0x6c, 0x97, 0x23, 0x70, 0x97, 0xb0, 0xc5, 0xa9, 0x87, 0x7a, 0x28, 0x6c, 0x27, 0x16, 0xa7,
	0xee, 0x32, 0xb6, 0x41, 0x83, 0x29, 0xa7, 0x9e, 0x65, 0xa2, 0xff, 0x99, 0xef, 0x6d, 0xea, 0xba,
	0xb8, 0x5d, 0x92, 0x82, 0x79, 0x73, 0x3d, 0x14, 0x76, 0x12, 0xf3, 0xee, 0x3e, 0xc2, 0xdd, 0x4c,
	0x30, 0xa2, 0x40, 0xa4, 0x84, 0x52, 0xe1, 0xb5, 0x0d, 0xe6, 0xd4, 0xb1, 0x0d, 0x4a, 0x85, 0xfb,
	0x02, 0x2f, 0x48, 0x45, 0xd4, 0x54, 0x7a, 0xf3, 0x3d, 0x14, 0x2e, 0xf5, 0x57, 0xa3, 0xeb, 0x4a,
	0x45, 0x66, 0x9c, 0x5d, 0x93, 0x94, 0xd4, 0xc9, 0xee, 0x26, 0xc6, 0x86, 0x85, 0xd1, 0x94, 0x28,
	0x6f, 0xa1, 0x87, 0x42, 0xa7, 0xbf, 0x12, 0x55, 0xbb, 0x47, 0xcd, 0xee, 0xd1, 0xbb, 0x46, 0x9c,
	0x81, 0x7d, 0xfa, 0x2d, 0x68, 0x1d, 0x9d, 0x07, 0x28, 0xe9, 0xd4, 0x75, 0x1b, 0xea, 0xa5, 0x7d,
	0x7c, 0x12, 0xa0, 0x9f, 0x27, 0x01, 0x5a, 0xfb, 0x82, 0x70, 0x77, 0x30, 0x3d, 0x7c, 0x4b, 0x0a,
	0xb6, 0x33, 0x1a, 0x31, 0x71, 0x63, 0xf1, 0x3d, 0xdc, 0x01, 0x0d, 0xa4, 0xa4, 0x50, 0x9e, 0xd5,
	0x9b, 0x0b, 0x9d, 0xfe, 0x72, 0x54, 0x79, 0x15, 0x69, 0xaf, 0x66, 0xc3, 0x6e, 0x02, 0x2f, 0x07,
	0xcf, 0x74, 0xb7, 0xcf, 0xe7, 0x41, 0x38, 0xe6, 0x6a, 0x6f, 0x3a, 0x8c, 0x32, 0x28, 0xe2, 0xda,
	0xd8, 0xea, 0xf1, 0x54, 0xd2, 0xfd, 0x58, 0x1d, 0x4e, 0x98, 0x34, 0x05, 0x32, 0xb1, 0x0d, 0xfb,
	0x46, 0xa1, 0xdc, 0x18, 0xb7, 0x79, 0x39, 0x02, 0xa3, 0xa3, 0xd3, 0x7f, 0x78, 0x8b, 0x1c, 0xda,
	0x9d, 0xc4, 0x24, 0x5e, 0xd9, 0xe2, 0x23, 0xb6, 0xb7, 0xf8, 0x01, 0xd3, 0x5b, 0xdc, 0x58, 0xe0,
	0x31, 0x5e, 0x12, 0x2c, 0xe3, 0x13, 0xce, 0x4a, 0x55, 0x99, 0x61, 0x19, 0x33, 0x16, 0x67, 0x51,
	0x63, 0xc7, 0x3d, 0xba, 0x7f, 0xb2, 0xb0, 0xfd, 0x06, 0x48, 0x79, 0x9f, 0xf6, 0x5b, 0xb8, 0x3b,
	0x61, 0x82, 0x03, 0x4d, 0xa5, 0x22, 0x42, 0xd5, 0x63, 0xfc, 0x9d, 0xb1, 0x4e, 0x55, 0xb9, 0xab,
	0x0b, 0xdd, 0xd7, 0x78, 0x31, 0x07, 0x52, 0xa6, 0xcd, 0xf5, 0x9b, 0xd3, 0xd3, 0x9e, 0x5d, 0x67,
	0x7a, 0x55, 0x27, 0x54, 0x44, 0xc7, 0x9a, 0xa8, 0xab, 0x2b, 0x9b, 0xf8, 0x4c, 0x91, 0xf9, 0xbb,
	0x2b, 0xf2, 0x03, 0xe1, 0xc5, 0x5d, 0x96, 0xe7, 0xb7, 0x9f, 0x55, 0x80, 0x1d, 0xc9, 0xf2, 0x9c,
	0x89, 0xab, 0x9a, 0xe0, 0x2a, 0x64, 0x04, 0xf9, 0xe3, 0xee, 0xe6, 0xfe, 0xc5, 0xdd, 0xb5, 0xef,
	0xbc, 0xe7, 0xe0, 0xc9, 0xe9, 0x85, 0x8f, 0xce, 0x2e, 0x7c, 0xf4, 0xfd, 0xc2, 0x47, 0x47, 0x97,
	0x7e, 0xeb, 0xec, 0xd2, 0x6f, 0x7d, 0xbd, 0xf4, 0x5b, 0xef, 0xcd, 0x6f, 0x2f, 0xfe, 0x60, 0xfe,
	0x37, 0xa6, 0xed, 0x70, 0xc1, 0x28, 0xff, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x52,
	0x3a, 0xad, 0x30, 0x05, 0x00, 0x00,
}

func (this *OrderInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OrderInfo)
	if !ok {
		that2, ok := that.(OrderInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.OrderId != that1.OrderId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CreatorAddr != that1.CreatorAddr {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *BuyNameOffer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BuyNameOffer)
	if !ok {
		that2, ok := that.(BuyNameOffer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.OfferAmt) != len(that1.OfferAmt) {
		return false
	}
	for i := range this.OfferAmt {
		if !this.OfferAmt[i].Equal(&that1.OfferAmt[i]) {
			return false
		}
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *GiveName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GiveName)
	if !ok {
		that2, ok := that.(GiveName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RecipientAddr != that1.RecipientAddr {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *LoanName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoanName)
	if !ok {
		that2, ok := that.(LoanName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.RecipientAddr != that1.RecipientAddr {
		return false
	}
	if !this.PeriodStart.Equal(that1.PeriodStart) {
		return false
	}
	if this.LoanDuration != that1.LoanDuration {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *SellNameOffer) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SellNameOffer)
	if !ok {
		that2, ok := that.(SellNameOffer)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SellerAddr != that1.SellerAddr {
		return false
	}
	if len(this.OfferAmt) != len(that1.OfferAmt) {
		return false
	}
	for i := range this.OfferAmt {
		if !this.OfferAmt[i].Equal(&that1.OfferAmt[i]) {
			return false
		}
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (m *OrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMarket(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if m.Status != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CreatorAddr) > 0 {
		i -= len(m.CreatorAddr)
		copy(dAtA[i:], m.CreatorAddr)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.CreatorAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OrderId != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuyNameOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyNameOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuyNameOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OfferAmt) > 0 {
		for iNdEx := len(m.OfferAmt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OfferAmt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiveName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiveName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipientAddr) > 0 {
		i -= len(m.RecipientAddr)
		copy(dAtA[i:], m.RecipientAddr)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.RecipientAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoanName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoanName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoanName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	n5, err5 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LoanDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LoanDuration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintMarket(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x22
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PeriodStart, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PeriodStart):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintMarket(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x1a
	if len(m.RecipientAddr) > 0 {
		i -= len(m.RecipientAddr)
		copy(dAtA[i:], m.RecipientAddr)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.RecipientAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SellNameOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SellNameOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SellNameOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMarket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.OfferAmt) > 0 {
		for iNdEx := len(m.OfferAmt) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OfferAmt[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMarket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SellerAddr) > 0 {
		i -= len(m.SellerAddr)
		copy(dAtA[i:], m.SellerAddr)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.SellerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	if m.OrderId != 0 {
		n += 1 + sovMarket(uint64(m.OrderId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.CreatorAddr)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMarket(uint64(m.Status))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func (m *BuyNameOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	if len(m.OfferAmt) > 0 {
		for _, e := range m.OfferAmt {
			l = e.Size()
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *GiveName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	l = len(m.RecipientAddr)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *LoanName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	l = len(m.RecipientAddr)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PeriodStart)
	n += 1 + l + sovMarket(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LoanDuration)
	n += 1 + l + sovMarket(uint64(l))
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func (m *SellNameOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	l = len(m.SellerAddr)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	if len(m.OfferAmt) > 0 {
		for _, e := range m.OfferAmt {
			l = e.Size()
			n += 1 + l + sovMarket(uint64(l))
		}
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMarket(uint64(l))
	}
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyNameOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyNameOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyNameOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferAmt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferAmt = append(m.OfferAmt, types.Coin{})
			if err := m.OfferAmt[len(m.OfferAmt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OrderInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiveName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OrderInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoanName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoanName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoanName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PeriodStart, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoanDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LoanDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OrderInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SellNameOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SellNameOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SellNameOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfferAmt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfferAmt = append(m.OfferAmt, types.Coin{})
			if err := m.OfferAmt[len(m.OfferAmt)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OrderInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
