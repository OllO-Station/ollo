// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1beta1/thread.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// import "google/protobuf/duration.proto";
type ThreadVisibility int32

const (
	THREAD_VISIBILITY_PUBLIC            ThreadVisibility = 0
	THREAD_VISIBILITY_ONLY_CREATOR      ThreadVisibility = 1
	THREAD_VISIBILITY_ONLY_PARTICIPANTS ThreadVisibility = 2
	THREAD_VISIBILITY_DIRECT_MESSAGE    ThreadVisibility = 3
	THREAD_VISIBILITY_ONLY_GROUPS       ThreadVisibility = 4
	THREAD_VISIBILITY_ONLY_GROUP_ROLES  ThreadVisibility = 5
	THREAD_VISIBILITY_ONLY_MUTUALS      ThreadVisibility = 6
)

var ThreadVisibility_name = map[int32]string{
	0: "THREAD_VISIBILITY_PUBLIC",
	1: "THREAD_VISIBILITY_ONLY_CREATOR",
	2: "THREAD_VISIBILITY_ONLY_PARTICIPANTS",
	3: "THREAD_VISIBILITY_DIRECT_MESSAGE",
	4: "THREAD_VISIBILITY_ONLY_GROUPS",
	5: "THREAD_VISIBILITY_ONLY_GROUP_ROLES",
	6: "THREAD_VISIBILITY_ONLY_MUTUALS",
}

var ThreadVisibility_value = map[string]int32{
	"THREAD_VISIBILITY_PUBLIC":            0,
	"THREAD_VISIBILITY_ONLY_CREATOR":      1,
	"THREAD_VISIBILITY_ONLY_PARTICIPANTS": 2,
	"THREAD_VISIBILITY_DIRECT_MESSAGE":    3,
	"THREAD_VISIBILITY_ONLY_GROUPS":       4,
	"THREAD_VISIBILITY_ONLY_GROUP_ROLES":  5,
	"THREAD_VISIBILITY_ONLY_MUTUALS":      6,
}

func (x ThreadVisibility) String() string {
	return proto.EnumName(ThreadVisibility_name, int32(x))
}

func (ThreadVisibility) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1c73ed2c27c0cc9, []int{0}
}

type ThreadStatus int32

const (
	THREAD_STATUS_UNSPECIFIED   ThreadStatus = 0
	THREAD_STATUS_LOCKED        ThreadStatus = 1
	THREAD_STATUS_OPEN          ThreadStatus = 2
	THREAD_STATUS_ARCHIVED      ThreadStatus = 3
	THREAD_STATUS_DISABLED      ThreadStatus = 4
	THREAD_STATUS_OPEN_IN_GROUP ThreadStatus = 5
)

var ThreadStatus_name = map[int32]string{
	0: "THREAD_STATUS_UNSPECIFIED",
	1: "THREAD_STATUS_LOCKED",
	2: "THREAD_STATUS_OPEN",
	3: "THREAD_STATUS_ARCHIVED",
	4: "THREAD_STATUS_DISABLED",
	5: "THREAD_STATUS_OPEN_IN_GROUP",
}

var ThreadStatus_value = map[string]int32{
	"THREAD_STATUS_UNSPECIFIED":   0,
	"THREAD_STATUS_LOCKED":        1,
	"THREAD_STATUS_OPEN":          2,
	"THREAD_STATUS_ARCHIVED":      3,
	"THREAD_STATUS_DISABLED":      4,
	"THREAD_STATUS_OPEN_IN_GROUP": 5,
}

func (x ThreadStatus) String() string {
	return proto.EnumName(ThreadStatus_name, int32(x))
}

func (ThreadStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1c73ed2c27c0cc9, []int{1}
}

type Thread struct {
	Id             uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string           `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	FirstMessageId uint64           `protobuf:"varint,4,opt,name=first_message_id,json=firstMessageId,proto3" json:"first_message_id,omitempty"`
	Status         ThreadStatus     `protobuf:"varint,5,opt,name=status,proto3,enum=ollo.ons.v1beta1.ThreadStatus" json:"status,omitempty"`
	Visibility     ThreadVisibility `protobuf:"varint,6,opt,name=visibility,proto3,enum=ollo.ons.v1beta1.ThreadVisibility" json:"visibility,omitempty"`
	// If empty,
	ParticipantAddrs    []string     `protobuf:"bytes,7,rep,name=participant_addrs,json=participantAddrs,proto3" json:"participant_addrs,omitempty"`
	ParticipantGroupIds []uint64     `protobuf:"varint,8,rep,packed,name=participant_group_ids,json=participantGroupIds,proto3" json:"participant_group_ids,omitempty"`
	ParticipantRoles    []string     `protobuf:"bytes,9,rep,name=participant_roles,json=participantRoles,proto3" json:"participant_roles,omitempty"`
	Tags                []*ThreadTag `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	CreatedAt           time.Time    `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *Thread) Reset()         { *m = Thread{} }
func (m *Thread) String() string { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()    {}
func (*Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1c73ed2c27c0cc9, []int{0}
}
func (m *Thread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Thread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thread.Merge(m, src)
}
func (m *Thread) XXX_Size() int {
	return m.Size()
}
func (m *Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_Thread proto.InternalMessageInfo

func (m *Thread) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Thread) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Thread) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Thread) GetFirstMessageId() uint64 {
	if m != nil {
		return m.FirstMessageId
	}
	return 0
}

func (m *Thread) GetStatus() ThreadStatus {
	if m != nil {
		return m.Status
	}
	return THREAD_STATUS_UNSPECIFIED
}

func (m *Thread) GetVisibility() ThreadVisibility {
	if m != nil {
		return m.Visibility
	}
	return THREAD_VISIBILITY_PUBLIC
}

func (m *Thread) GetParticipantAddrs() []string {
	if m != nil {
		return m.ParticipantAddrs
	}
	return nil
}

func (m *Thread) GetParticipantGroupIds() []uint64 {
	if m != nil {
		return m.ParticipantGroupIds
	}
	return nil
}

func (m *Thread) GetParticipantRoles() []string {
	if m != nil {
		return m.ParticipantRoles
	}
	return nil
}

func (m *Thread) GetTags() []*ThreadTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Thread) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type ThreadMessageIndex struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	InThreadId uint64 `protobuf:"varint,2,opt,name=in_thread_id,json=inThreadId,proto3" json:"in_thread_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ThreadMessageIndex) Reset()         { *m = ThreadMessageIndex{} }
func (m *ThreadMessageIndex) String() string { return proto.CompactTextString(m) }
func (*ThreadMessageIndex) ProtoMessage()    {}
func (*ThreadMessageIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1c73ed2c27c0cc9, []int{1}
}
func (m *ThreadMessageIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadMessageIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadMessageIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadMessageIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadMessageIndex.Merge(m, src)
}
func (m *ThreadMessageIndex) XXX_Size() int {
	return m.Size()
}
func (m *ThreadMessageIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadMessageIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadMessageIndex proto.InternalMessageInfo

func (m *ThreadMessageIndex) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ThreadMessageIndex) GetInThreadId() uint64 {
	if m != nil {
		return m.InThreadId
	}
	return 0
}

func (m *ThreadMessageIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ThreadMessage struct {
	Index       *ThreadMessageIndex `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Content     string              `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	CreatorAddr string              `protobuf:"bytes,3,opt,name=creator_addr,json=creatorAddr,proto3" json:"creator_addr,omitempty"`
	Status      ThreadStatus        `protobuf:"varint,4,opt,name=status,proto3,enum=ollo.ons.v1beta1.ThreadStatus" json:"status,omitempty"`
	Tags        []*ThreadMessageTag `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	PostedAt    time.Time           `protobuf:"bytes,6,opt,name=posted_at,json=postedAt,proto3,stdtime" json:"posted_at"`
}

func (m *ThreadMessage) Reset()         { *m = ThreadMessage{} }
func (m *ThreadMessage) String() string { return proto.CompactTextString(m) }
func (*ThreadMessage) ProtoMessage()    {}
func (*ThreadMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1c73ed2c27c0cc9, []int{2}
}
func (m *ThreadMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadMessage.Merge(m, src)
}
func (m *ThreadMessage) XXX_Size() int {
	return m.Size()
}
func (m *ThreadMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadMessage proto.InternalMessageInfo

func (m *ThreadMessage) GetIndex() *ThreadMessageIndex {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *ThreadMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ThreadMessage) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

func (m *ThreadMessage) GetStatus() ThreadStatus {
	if m != nil {
		return m.Status
	}
	return THREAD_STATUS_UNSPECIFIED
}

func (m *ThreadMessage) GetTags() []*ThreadMessageTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ThreadMessage) GetPostedAt() time.Time {
	if m != nil {
		return m.PostedAt
	}
	return time.Time{}
}

type ThreadTag struct {
	Tag         string    `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	ThreadId    uint64    `protobuf:"varint,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	CreatorAddr string    `protobuf:"bytes,3,opt,name=creator_addr,json=creatorAddr,proto3" json:"creator_addr,omitempty"`
	Magnitude   uint32    `protobuf:"varint,4,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	TaggedAt    time.Time `protobuf:"bytes,5,opt,name=tagged_at,json=taggedAt,proto3,stdtime" json:"tagged_at"`
}

func (m *ThreadTag) Reset()         { *m = ThreadTag{} }
func (m *ThreadTag) String() string { return proto.CompactTextString(m) }
func (*ThreadTag) ProtoMessage()    {}
func (*ThreadTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1c73ed2c27c0cc9, []int{3}
}
func (m *ThreadTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadTag.Merge(m, src)
}
func (m *ThreadTag) XXX_Size() int {
	return m.Size()
}
func (m *ThreadTag) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadTag.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadTag proto.InternalMessageInfo

func (m *ThreadTag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ThreadTag) GetThreadId() uint64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *ThreadTag) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

func (m *ThreadTag) GetMagnitude() uint32 {
	if m != nil {
		return m.Magnitude
	}
	return 0
}

func (m *ThreadTag) GetTaggedAt() time.Time {
	if m != nil {
		return m.TaggedAt
	}
	return time.Time{}
}

type ThreadMessageTag struct {
	Tag             string    `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	ThreadMessageId uint64    `protobuf:"varint,2,opt,name=thread_message_id,json=threadMessageId,proto3" json:"thread_message_id,omitempty"`
	CreatorAddr     string    `protobuf:"bytes,3,opt,name=creator_addr,json=creatorAddr,proto3" json:"creator_addr,omitempty"`
	Magnitude       uint32    `protobuf:"varint,4,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	TaggedAt        time.Time `protobuf:"bytes,5,opt,name=tagged_at,json=taggedAt,proto3,stdtime" json:"tagged_at"`
}

func (m *ThreadMessageTag) Reset()         { *m = ThreadMessageTag{} }
func (m *ThreadMessageTag) String() string { return proto.CompactTextString(m) }
func (*ThreadMessageTag) ProtoMessage()    {}
func (*ThreadMessageTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1c73ed2c27c0cc9, []int{4}
}
func (m *ThreadMessageTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ThreadMessageTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ThreadMessageTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ThreadMessageTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThreadMessageTag.Merge(m, src)
}
func (m *ThreadMessageTag) XXX_Size() int {
	return m.Size()
}
func (m *ThreadMessageTag) XXX_DiscardUnknown() {
	xxx_messageInfo_ThreadMessageTag.DiscardUnknown(m)
}

var xxx_messageInfo_ThreadMessageTag proto.InternalMessageInfo

func (m *ThreadMessageTag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *ThreadMessageTag) GetThreadMessageId() uint64 {
	if m != nil {
		return m.ThreadMessageId
	}
	return 0
}

func (m *ThreadMessageTag) GetCreatorAddr() string {
	if m != nil {
		return m.CreatorAddr
	}
	return ""
}

func (m *ThreadMessageTag) GetMagnitude() uint32 {
	if m != nil {
		return m.Magnitude
	}
	return 0
}

func (m *ThreadMessageTag) GetTaggedAt() time.Time {
	if m != nil {
		return m.TaggedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("ollo.ons.v1beta1.ThreadVisibility", ThreadVisibility_name, ThreadVisibility_value)
	proto.RegisterEnum("ollo.ons.v1beta1.ThreadStatus", ThreadStatus_name, ThreadStatus_value)
	proto.RegisterType((*Thread)(nil), "ollo.ons.v1beta1.Thread")
	proto.RegisterType((*ThreadMessageIndex)(nil), "ollo.ons.v1beta1.ThreadMessageIndex")
	proto.RegisterType((*ThreadMessage)(nil), "ollo.ons.v1beta1.ThreadMessage")
	proto.RegisterType((*ThreadTag)(nil), "ollo.ons.v1beta1.ThreadTag")
	proto.RegisterType((*ThreadMessageTag)(nil), "ollo.ons.v1beta1.ThreadMessageTag")
}

func init() { proto.RegisterFile("ollo/ons/v1beta1/thread.proto", fileDescriptor_a1c73ed2c27c0cc9) }

var fileDescriptor_a1c73ed2c27c0cc9 = []byte{
	// 882 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x31, 0x6f, 0xdb, 0x46,
	0x18, 0x15, 0x25, 0x4a, 0x11, 0x3f, 0x39, 0xee, 0xe5, 0x9a, 0x06, 0xac, 0x1c, 0x53, 0x8c, 0x1a,
	0xb4, 0x82, 0x0b, 0x48, 0x88, 0x0a, 0x64, 0xc8, 0x46, 0x49, 0xac, 0x43, 0x54, 0x96, 0x84, 0x23,
	0x65, 0x20, 0x5d, 0x08, 0xda, 0x64, 0xd8, 0x03, 0x24, 0x52, 0x20, 0xcf, 0x41, 0xb2, 0x76, 0xea,
	0x98, 0xb1, 0x43, 0x87, 0x00, 0xed, 0xd0, 0xdf, 0x51, 0xa0, 0x80, 0xc7, 0x8c, 0x9d, 0xd2, 0xc2,
	0x5e, 0xfa, 0x33, 0x0a, 0x1e, 0xa9, 0x88, 0xb2, 0x2a, 0xb7, 0xde, 0xb2, 0x1d, 0xbf, 0xf7, 0xbe,
	0xfb, 0xee, 0xdd, 0x7b, 0x24, 0x61, 0x3f, 0x9c, 0xcd, 0xc2, 0x4e, 0x18, 0xc4, 0x9d, 0x17, 0x8f,
	0x4e, 0x3c, 0xe6, 0x3c, 0xea, 0xb0, 0xef, 0x22, 0xcf, 0x71, 0xdb, 0x8b, 0x28, 0x64, 0x21, 0x46,
	0x09, 0xdc, 0x0e, 0x83, 0xb8, 0x9d, 0xc1, 0xf5, 0xbb, 0x7e, 0xe8, 0x87, 0x1c, 0xec, 0x24, 0xab,
	0x94, 0x57, 0x6f, 0xf8, 0x61, 0xe8, 0xcf, 0xbc, 0x0e, 0x7f, 0x3a, 0x39, 0x7b, 0xde, 0x61, 0x74,
	0xee, 0xc5, 0xcc, 0x99, 0x2f, 0x52, 0x42, 0xf3, 0x7b, 0x11, 0x2a, 0x16, 0xdf, 0x19, 0xef, 0x42,
	0x91, 0xba, 0xb2, 0xa0, 0x0a, 0x2d, 0x91, 0x14, 0xa9, 0x8b, 0x31, 0x88, 0x81, 0x33, 0xf7, 0xe4,
	0xa2, 0x2a, 0xb4, 0x24, 0xc2, 0xd7, 0x58, 0x85, 0x9a, 0xeb, 0xc5, 0xa7, 0x11, 0x5d, 0x30, 0x1a,
	0x06, 0x72, 0x89, 0x43, 0xf9, 0x12, 0x6e, 0x01, 0x7a, 0x4e, 0xa3, 0x98, 0xd9, 0x73, 0x2f, 0x8e,
	0x1d, 0xdf, 0xb3, 0xa9, 0x2b, 0x8b, 0x7c, 0xcf, 0x5d, 0x5e, 0x3f, 0x4a, 0xcb, 0x86, 0x8b, 0x1f,
	0x43, 0x25, 0x66, 0x0e, 0x3b, 0x8b, 0xe5, 0xb2, 0x2a, 0xb4, 0x76, 0xbb, 0x4a, 0xfb, 0xaa, 0xa8,
	0x76, 0x7a, 0x32, 0x93, 0xb3, 0x48, 0xc6, 0xc6, 0x3d, 0x80, 0x17, 0x34, 0xa6, 0x27, 0x74, 0x46,
	0xd9, 0x2b, 0xb9, 0xc2, 0x7b, 0x9b, 0xdb, 0x7a, 0x8f, 0xdf, 0x33, 0x49, 0xae, 0x0b, 0x7f, 0x09,
	0x77, 0x16, 0x4e, 0xc4, 0xe8, 0x29, 0x5d, 0x38, 0x01, 0xb3, 0x1d, 0xd7, 0x8d, 0x62, 0xf9, 0x96,
	0x5a, 0x6a, 0x49, 0x04, 0xe5, 0x00, 0x2d, 0xa9, 0xe3, 0x2e, 0x7c, 0x92, 0x27, 0xfb, 0x51, 0x78,
	0xb6, 0xb0, 0xa9, 0x1b, 0xcb, 0x55, 0xb5, 0xd4, 0x12, 0xc9, 0xc7, 0x39, 0xf0, 0x30, 0xc1, 0x0c,
	0x37, 0xbe, 0x3a, 0x20, 0x0a, 0x67, 0x5e, 0x2c, 0x4b, 0x1b, 0x03, 0x48, 0x52, 0xc7, 0x1d, 0x10,
	0x99, 0xe3, 0xc7, 0x32, 0xa8, 0xa5, 0x56, 0xad, 0xbb, 0xb7, 0x4d, 0x8b, 0xe5, 0xf8, 0x84, 0x13,
	0x71, 0x1f, 0xe0, 0x34, 0xf2, 0x1c, 0xe6, 0xb9, 0xb6, 0xc3, 0xe4, 0x9a, 0x2a, 0xb4, 0x6a, 0xdd,
	0x7a, 0x3b, 0xf5, 0xba, 0xbd, 0xf4, 0xba, 0x6d, 0x2d, 0xbd, 0xee, 0x55, 0xcf, 0xdf, 0x35, 0x0a,
	0xaf, 0xff, 0x6c, 0x08, 0x44, 0xca, 0xfa, 0x34, 0xf6, 0xa4, 0xfa, 0xe3, 0x9b, 0x86, 0xf0, 0xf7,
	0x9b, 0x86, 0xd0, 0x74, 0x01, 0xa7, 0x13, 0x96, 0xe6, 0x04, 0xae, 0xf7, 0x72, 0x23, 0x0f, 0x2a,
	0xec, 0xd0, 0xc0, 0x4e, 0x63, 0x98, 0xb8, 0x5a, 0xe4, 0x08, 0xd0, 0x20, 0xed, 0x35, 0x56, 0x89,
	0x29, 0xad, 0x12, 0x93, 0x9b, 0xf2, 0x7b, 0x11, 0x6e, 0xaf, 0x8d, 0xc1, 0x4f, 0xa0, 0x4c, 0x93,
	0x51, 0x7c, 0x48, 0xad, 0xfb, 0x70, 0x9b, 0xf0, 0xfc, 0xb1, 0x48, 0xda, 0x82, 0x65, 0xb8, 0x75,
	0x1a, 0x06, 0xcc, 0x0b, 0x58, 0x16, 0xd0, 0xe5, 0x23, 0x7e, 0x00, 0x3b, 0x5c, 0x64, 0x18, 0x71,
	0x5f, 0x97, 0x21, 0xcd, 0x6a, 0x89, 0xa5, 0xb9, 0xe8, 0x89, 0x37, 0x8a, 0xde, 0xe3, 0xcc, 0xa8,
	0x32, 0x37, 0xaa, 0xf9, 0x1f, 0xe7, 0x5d, 0xf9, 0xa5, 0x81, 0xb4, 0x08, 0xe3, 0xcc, 0xae, 0xca,
	0x0d, 0xec, 0xaa, 0xa6, 0x6d, 0x6b, 0x6e, 0x9d, 0x0b, 0x20, 0xbd, 0x0f, 0x04, 0x46, 0x50, 0x62,
	0x8e, 0xcf, 0x6f, 0x50, 0x22, 0xc9, 0x12, 0xef, 0x81, 0x74, 0xd5, 0xa4, 0x2a, 0x5b, 0x5a, 0xf4,
	0x3f, 0x2e, 0xe7, 0x3e, 0x48, 0x73, 0xc7, 0x0f, 0x28, 0x3b, 0x73, 0x3d, 0x7e, 0x3f, 0xb7, 0xc9,
	0xaa, 0x90, 0x48, 0x61, 0x8e, 0xef, 0xa7, 0x52, 0xca, 0x37, 0x91, 0x92, 0xb6, 0xad, 0x49, 0x79,
	0x27, 0x00, 0xba, 0x7a, 0x65, 0xff, 0xa2, 0xe8, 0x00, 0xee, 0x64, 0x8a, 0x72, 0x1f, 0x95, 0x54,
	0xd9, 0x47, 0x6c, 0x2d, 0x21, 0x1f, 0x98, 0xc0, 0x83, 0x9f, 0x8a, 0x4b, 0x81, 0xab, 0x0f, 0x11,
	0xbe, 0x0f, 0xb2, 0xf5, 0x94, 0xe8, 0xda, 0xc0, 0x3e, 0x36, 0x4c, 0xa3, 0x67, 0x0c, 0x0d, 0xeb,
	0x99, 0x3d, 0x99, 0xf6, 0x86, 0x46, 0x1f, 0x15, 0x70, 0x13, 0x94, 0x4d, 0x74, 0x3c, 0x1a, 0x3e,
	0xb3, 0xfb, 0x44, 0xd7, 0xac, 0x31, 0x41, 0x02, 0xfe, 0x02, 0x3e, 0xdb, 0xc2, 0x99, 0x68, 0xc4,
	0x32, 0xfa, 0xc6, 0x44, 0x1b, 0x59, 0x26, 0x2a, 0xe2, 0x87, 0xa0, 0x6e, 0x12, 0x07, 0x06, 0xd1,
	0xfb, 0x96, 0x7d, 0xa4, 0x9b, 0xa6, 0x76, 0xa8, 0xa3, 0x12, 0x7e, 0x00, 0xfb, 0x5b, 0xb6, 0x3b,
	0x24, 0xe3, 0xe9, 0xc4, 0x44, 0x22, 0xfe, 0x1c, 0x9a, 0xd7, 0x51, 0x6c, 0x32, 0x1e, 0xea, 0x26,
	0x2a, 0x5f, 0x73, 0xfa, 0xa3, 0xa9, 0x35, 0xd5, 0x86, 0x26, 0xaa, 0xd4, 0xab, 0x3f, 0xfc, 0xac,
	0x14, 0x7e, 0xfd, 0x45, 0x11, 0x0e, 0x7e, 0x13, 0x60, 0x27, 0xff, 0xa2, 0xe1, 0x7d, 0xf8, 0x34,
	0x6b, 0x37, 0x2d, 0xcd, 0x9a, 0x9a, 0xf6, 0x74, 0x64, 0x4e, 0xf4, 0xbe, 0xf1, 0xb5, 0xa1, 0x0f,
	0x50, 0x01, 0xcb, 0x70, 0x77, 0x1d, 0x1e, 0x8e, 0xfb, 0xdf, 0xe8, 0x03, 0x24, 0xe0, 0x7b, 0x80,
	0xd7, 0x91, 0xf1, 0x44, 0x1f, 0xa1, 0x22, 0xae, 0xc3, 0xbd, 0xf5, 0xba, 0x46, 0xfa, 0x4f, 0x8d,
	0x63, 0x7d, 0x80, 0x4a, 0x9b, 0xd8, 0xc0, 0x30, 0xb5, 0xde, 0x50, 0x1f, 0x20, 0x11, 0x37, 0x60,
	0x6f, 0x73, 0x3f, 0xdb, 0x18, 0xa5, 0x72, 0x51, 0x79, 0x25, 0xa2, 0x77, 0x70, 0x7e, 0xa1, 0x08,
	0x6f, 0x2f, 0x14, 0xe1, 0xaf, 0x0b, 0x45, 0x78, 0x7d, 0xa9, 0x14, 0xde, 0x5e, 0x2a, 0x85, 0x3f,
	0x2e, 0x95, 0xc2, 0xb7, 0xfc, 0x2f, 0xdd, 0x79, 0xc9, 0x7f, 0xe3, 0xec, 0xd5, 0xc2, 0x8b, 0x4f,
	0x2a, 0x3c, 0x41, 0x5f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x91, 0xc6, 0x72, 0xba, 0xdf, 0x07,
	0x00, 0x00,
}

func (this *Thread) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Thread)
	if !ok {
		that2, ok := that.(Thread)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.FirstMessageId != that1.FirstMessageId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Visibility != that1.Visibility {
		return false
	}
	if len(this.ParticipantAddrs) != len(that1.ParticipantAddrs) {
		return false
	}
	for i := range this.ParticipantAddrs {
		if this.ParticipantAddrs[i] != that1.ParticipantAddrs[i] {
			return false
		}
	}
	if len(this.ParticipantGroupIds) != len(that1.ParticipantGroupIds) {
		return false
	}
	for i := range this.ParticipantGroupIds {
		if this.ParticipantGroupIds[i] != that1.ParticipantGroupIds[i] {
			return false
		}
	}
	if len(this.ParticipantRoles) != len(that1.ParticipantRoles) {
		return false
	}
	for i := range this.ParticipantRoles {
		if this.ParticipantRoles[i] != that1.ParticipantRoles[i] {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *ThreadMessageIndex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreadMessageIndex)
	if !ok {
		that2, ok := that.(ThreadMessageIndex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.InThreadId != that1.InThreadId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ThreadMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreadMessage)
	if !ok {
		that2, ok := that.(ThreadMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Index.Equal(that1.Index) {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.CreatorAddr != that1.CreatorAddr {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if !this.Tags[i].Equal(that1.Tags[i]) {
			return false
		}
	}
	if !this.PostedAt.Equal(that1.PostedAt) {
		return false
	}
	return true
}
func (this *ThreadTag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreadTag)
	if !ok {
		that2, ok := that.(ThreadTag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.ThreadId != that1.ThreadId {
		return false
	}
	if this.CreatorAddr != that1.CreatorAddr {
		return false
	}
	if this.Magnitude != that1.Magnitude {
		return false
	}
	if !this.TaggedAt.Equal(that1.TaggedAt) {
		return false
	}
	return true
}
func (this *ThreadMessageTag) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ThreadMessageTag)
	if !ok {
		that2, ok := that.(ThreadMessageTag)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Tag != that1.Tag {
		return false
	}
	if this.ThreadMessageId != that1.ThreadMessageId {
		return false
	}
	if this.CreatorAddr != that1.CreatorAddr {
		return false
	}
	if this.Magnitude != that1.Magnitude {
		return false
	}
	if !this.TaggedAt.Equal(that1.TaggedAt) {
		return false
	}
	return true
}
func (m *Thread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Thread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Thread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintThread(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x5a
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThread(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ParticipantRoles) > 0 {
		for iNdEx := len(m.ParticipantRoles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ParticipantRoles[iNdEx])
			copy(dAtA[i:], m.ParticipantRoles[iNdEx])
			i = encodeVarintThread(dAtA, i, uint64(len(m.ParticipantRoles[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.ParticipantGroupIds) > 0 {
		dAtA3 := make([]byte, len(m.ParticipantGroupIds)*10)
		var j2 int
		for _, num := range m.ParticipantGroupIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintThread(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParticipantAddrs) > 0 {
		for iNdEx := len(m.ParticipantAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ParticipantAddrs[iNdEx])
			copy(dAtA[i:], m.ParticipantAddrs[iNdEx])
			i = encodeVarintThread(dAtA, i, uint64(len(m.ParticipantAddrs[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Visibility != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.FirstMessageId != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.FirstMessageId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintThread(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintThread(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreadMessageIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadMessageIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadMessageIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintThread(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.InThreadId != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.InThreadId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ThreadMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PostedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PostedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintThread(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintThread(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Status != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CreatorAddr) > 0 {
		i -= len(m.CreatorAddr)
		copy(dAtA[i:], m.CreatorAddr)
		i = encodeVarintThread(dAtA, i, uint64(len(m.CreatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintThread(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != nil {
		{
			size, err := m.Index.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintThread(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreadTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TaggedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TaggedAt):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintThread(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x2a
	if m.Magnitude != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.Magnitude))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CreatorAddr) > 0 {
		i -= len(m.CreatorAddr)
		copy(dAtA[i:], m.CreatorAddr)
		i = encodeVarintThread(dAtA, i, uint64(len(m.CreatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ThreadId != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.ThreadId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintThread(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ThreadMessageTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ThreadMessageTag) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ThreadMessageTag) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.TaggedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.TaggedAt):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintThread(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	if m.Magnitude != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.Magnitude))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CreatorAddr) > 0 {
		i -= len(m.CreatorAddr)
		copy(dAtA[i:], m.CreatorAddr)
		i = encodeVarintThread(dAtA, i, uint64(len(m.CreatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ThreadMessageId != 0 {
		i = encodeVarintThread(dAtA, i, uint64(m.ThreadMessageId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintThread(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintThread(dAtA []byte, offset int, v uint64) int {
	offset -= sovThread(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Thread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovThread(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	if m.FirstMessageId != 0 {
		n += 1 + sovThread(uint64(m.FirstMessageId))
	}
	if m.Status != 0 {
		n += 1 + sovThread(uint64(m.Status))
	}
	if m.Visibility != 0 {
		n += 1 + sovThread(uint64(m.Visibility))
	}
	if len(m.ParticipantAddrs) > 0 {
		for _, s := range m.ParticipantAddrs {
			l = len(s)
			n += 1 + l + sovThread(uint64(l))
		}
	}
	if len(m.ParticipantGroupIds) > 0 {
		l = 0
		for _, e := range m.ParticipantGroupIds {
			l += sovThread(uint64(e))
		}
		n += 1 + sovThread(uint64(l)) + l
	}
	if len(m.ParticipantRoles) > 0 {
		for _, s := range m.ParticipantRoles {
			l = len(s)
			n += 1 + l + sovThread(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovThread(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovThread(uint64(l))
	return n
}

func (m *ThreadMessageIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovThread(uint64(m.Id))
	}
	if m.InThreadId != 0 {
		n += 1 + sovThread(uint64(m.InThreadId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	return n
}

func (m *ThreadMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != nil {
		l = m.Index.Size()
		n += 1 + l + sovThread(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	l = len(m.CreatorAddr)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovThread(uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovThread(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PostedAt)
	n += 1 + l + sovThread(uint64(l))
	return n
}

func (m *ThreadTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	if m.ThreadId != 0 {
		n += 1 + sovThread(uint64(m.ThreadId))
	}
	l = len(m.CreatorAddr)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	if m.Magnitude != 0 {
		n += 1 + sovThread(uint64(m.Magnitude))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TaggedAt)
	n += 1 + l + sovThread(uint64(l))
	return n
}

func (m *ThreadMessageTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	if m.ThreadMessageId != 0 {
		n += 1 + sovThread(uint64(m.ThreadMessageId))
	}
	l = len(m.CreatorAddr)
	if l > 0 {
		n += 1 + l + sovThread(uint64(l))
	}
	if m.Magnitude != 0 {
		n += 1 + sovThread(uint64(m.Magnitude))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.TaggedAt)
	n += 1 + l + sovThread(uint64(l))
	return n
}

func sovThread(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozThread(x uint64) (n int) {
	return sovThread(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Thread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThread
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Thread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Thread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstMessageId", wireType)
			}
			m.FirstMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstMessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ThreadStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= ThreadVisibility(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantAddrs = append(m.ParticipantAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThread
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ParticipantGroupIds = append(m.ParticipantGroupIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowThread
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthThread
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthThread
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ParticipantGroupIds) == 0 {
					m.ParticipantGroupIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowThread
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ParticipantGroupIds = append(m.ParticipantGroupIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantGroupIds", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantRoles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantRoles = append(m.ParticipantRoles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &ThreadTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThread(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThread
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadMessageIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThread
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadMessageIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadMessageIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InThreadId", wireType)
			}
			m.InThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InThreadId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThread(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThread
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThread
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Index == nil {
				m.Index = &ThreadMessageIndex{}
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ThreadStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &ThreadMessageTag{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PostedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThread(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThread
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThread
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Magnitude", wireType)
			}
			m.Magnitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Magnitude |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaggedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TaggedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThread(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThread
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ThreadMessageTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowThread
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ThreadMessageTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ThreadMessageTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadMessageId", wireType)
			}
			m.ThreadMessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadMessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Magnitude", wireType)
			}
			m.Magnitude = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Magnitude |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaggedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowThread
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthThread
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthThread
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.TaggedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipThread(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthThread
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipThread(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowThread
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThread
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowThread
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthThread
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupThread
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthThread
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthThread        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowThread          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupThread = fmt.Errorf("proto: unexpected end of group")
)
