// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1beta1/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	NameParams     NameParams     `protobuf:"bytes,1,opt,name=name_params,json=nameParams,proto3" json:"name_params"`
	OlloNameParams OlloNameParams `protobuf:"bytes,2,opt,name=ollo_name_params,json=olloNameParams,proto3" json:"ollo_name_params"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_91028037420e2f1c, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetNameParams() NameParams {
	if m != nil {
		return m.NameParams
	}
	return NameParams{}
}

func (m *Params) GetOlloNameParams() OlloNameParams {
	if m != nil {
		return m.OlloNameParams
	}
	return OlloNameParams{}
}

type NameParams struct {
	MinPrice   string `protobuf:"bytes,1,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MinLength  string `protobuf:"bytes,2,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength  string `protobuf:"bytes,3,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	BuyFeePct  string `protobuf:"bytes,4,opt,name=buy_fee_pct,json=buyFeePct,proto3" json:"buy_fee_pct,omitempty"`
	SellFeePct string `protobuf:"bytes,5,opt,name=sell_fee_pct,json=sellFeePct,proto3" json:"sell_fee_pct,omitempty"`
}

func (m *NameParams) Reset()         { *m = NameParams{} }
func (m *NameParams) String() string { return proto.CompactTextString(m) }
func (*NameParams) ProtoMessage()    {}
func (*NameParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_91028037420e2f1c, []int{1}
}
func (m *NameParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameParams.Merge(m, src)
}
func (m *NameParams) XXX_Size() int {
	return m.Size()
}
func (m *NameParams) XXX_DiscardUnknown() {
	xxx_messageInfo_NameParams.DiscardUnknown(m)
}

var xxx_messageInfo_NameParams proto.InternalMessageInfo

func (m *NameParams) GetMinPrice() string {
	if m != nil {
		return m.MinPrice
	}
	return ""
}

func (m *NameParams) GetMinLength() string {
	if m != nil {
		return m.MinLength
	}
	return ""
}

func (m *NameParams) GetMaxLength() string {
	if m != nil {
		return m.MaxLength
	}
	return ""
}

func (m *NameParams) GetBuyFeePct() string {
	if m != nil {
		return m.BuyFeePct
	}
	return ""
}

func (m *NameParams) GetSellFeePct() string {
	if m != nil {
		return m.SellFeePct
	}
	return ""
}

type OlloNameParams struct {
	MinPrice      string  `protobuf:"bytes,1,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MinLength     string  `protobuf:"bytes,2,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	MaxLength     string  `protobuf:"bytes,3,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	BuyFeePct     string  `protobuf:"bytes,4,opt,name=buy_fee_pct,json=buyFeePct,proto3" json:"buy_fee_pct,omitempty"`
	SellFeePct    string  `protobuf:"bytes,5,opt,name=sell_fee_pct,json=sellFeePct,proto3" json:"sell_fee_pct,omitempty"`
	Prefix        NameEnd `protobuf:"bytes,7,opt,name=prefix,proto3" json:"prefix"`
	Suffix        NameEnd `protobuf:"bytes,8,opt,name=suffix,proto3" json:"suffix"`
	MaxPerAddress uint32  `protobuf:"varint,9,opt,name=max_per_address,json=maxPerAddress,proto3" json:"max_per_address,omitempty"`
}

func (m *OlloNameParams) Reset()         { *m = OlloNameParams{} }
func (m *OlloNameParams) String() string { return proto.CompactTextString(m) }
func (*OlloNameParams) ProtoMessage()    {}
func (*OlloNameParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_91028037420e2f1c, []int{2}
}
func (m *OlloNameParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OlloNameParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OlloNameParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OlloNameParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OlloNameParams.Merge(m, src)
}
func (m *OlloNameParams) XXX_Size() int {
	return m.Size()
}
func (m *OlloNameParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OlloNameParams.DiscardUnknown(m)
}

var xxx_messageInfo_OlloNameParams proto.InternalMessageInfo

func (m *OlloNameParams) GetMinPrice() string {
	if m != nil {
		return m.MinPrice
	}
	return ""
}

func (m *OlloNameParams) GetMinLength() string {
	if m != nil {
		return m.MinLength
	}
	return ""
}

func (m *OlloNameParams) GetMaxLength() string {
	if m != nil {
		return m.MaxLength
	}
	return ""
}

func (m *OlloNameParams) GetBuyFeePct() string {
	if m != nil {
		return m.BuyFeePct
	}
	return ""
}

func (m *OlloNameParams) GetSellFeePct() string {
	if m != nil {
		return m.SellFeePct
	}
	return ""
}

func (m *OlloNameParams) GetPrefix() NameEnd {
	if m != nil {
		return m.Prefix
	}
	return NameEnd{}
}

func (m *OlloNameParams) GetSuffix() NameEnd {
	if m != nil {
		return m.Suffix
	}
	return NameEnd{}
}

func (m *OlloNameParams) GetMaxPerAddress() uint32 {
	if m != nil {
		return m.MaxPerAddress
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "ollo.ons.v1beta1.Params")
	proto.RegisterType((*NameParams)(nil), "ollo.ons.v1beta1.NameParams")
	proto.RegisterType((*OlloNameParams)(nil), "ollo.ons.v1beta1.OlloNameParams")
}

func init() { proto.RegisterFile("ollo/ons/v1beta1/params.proto", fileDescriptor_91028037420e2f1c) }

var fileDescriptor_91028037420e2f1c = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0xa5, 0x84, 0xe6, 0xa5, 0x2d, 0xe8, 0xc4, 0x10, 0x5a, 0xea, 0x58, 0x19, 0x50,
	0xc5, 0x60, 0xab, 0x30, 0x20, 0xb1, 0x51, 0x04, 0x13, 0x02, 0xcb, 0x23, 0x8b, 0x75, 0x8e, 0x5f,
	0x52, 0x0b, 0xfb, 0xce, 0xba, 0xbb, 0x20, 0xe7, 0x1b, 0x30, 0x32, 0x32, 0x66, 0x65, 0xe0, 0x73,
	0xd0, 0xb1, 0x23, 0x13, 0x42, 0xc9, 0xc2, 0xc7, 0x40, 0x77, 0x67, 0x0a, 0xc1, 0x20, 0x31, 0x76,
	0xb3, 0xdf, 0xef, 0xff, 0xfe, 0xf7, 0x7f, 0x7a, 0x0f, 0x8e, 0x44, 0x59, 0x8a, 0x48, 0x70, 0x15,
	0xbd, 0x3d, 0xc9, 0x50, 0xb3, 0x93, 0xa8, 0x66, 0x92, 0x55, 0x2a, 0xac, 0xa5, 0xd0, 0x82, 0xde,
	0x32, 0x38, 0x14, 0x5c, 0x85, 0x2d, 0x3e, 0xb8, 0x3d, 0x13, 0x33, 0x61, 0x61, 0x64, 0xbe, 0x9c,
	0xee, 0xe0, 0xb0, 0x63, 0xc3, 0x59, 0x85, 0x2d, 0xec, 0xbe, 0xa1, 0xcf, 0x24, 0xb2, 0xfc, 0x9f,
	0xb8, 0x62, 0xf2, 0x0d, 0x6a, 0x87, 0xc7, 0x9f, 0x08, 0xf4, 0x62, 0x9b, 0x89, 0x3e, 0x85, 0x81,
	0xb1, 0x4d, 0x5d, 0xc4, 0x21, 0x09, 0xc8, 0xf1, 0xe0, 0xc1, 0xdd, 0xf0, 0xcf, 0x8c, 0xe1, 0x4b,
	0x56, 0xa1, 0x6b, 0x39, 0xdd, 0x3e, 0xff, 0x3a, 0xf2, 0x12, 0xe0, 0x97, 0x15, 0x1a, 0x83, 0x1d,
	0x2a, 0xfd, 0xdd, 0x69, 0xcb, 0x3a, 0x05, 0x5d, 0xa7, 0x57, 0x65, 0x29, 0x3a, 0x6e, 0xfb, 0x62,
	0xa3, 0xfa, 0x78, 0xf7, 0xdd, 0x72, 0x44, 0x3e, 0x2c, 0x47, 0xde, 0xf7, 0xe5, 0xc8, 0x1b, 0x7f,
	0x24, 0x00, 0xbf, 0x20, 0x3d, 0x84, 0x7e, 0x55, 0xf0, 0xb4, 0x96, 0xc5, 0x04, 0x6d, 0xe2, 0x7e,
	0xb2, 0x53, 0x15, 0x3c, 0x36, 0xff, 0xf4, 0x08, 0xc0, 0xc0, 0x12, 0xf9, 0x4c, 0x9f, 0xd9, 0x14,
	0xfd, 0xc4, 0xc8, 0x5f, 0xd8, 0x82, 0xc5, 0xac, 0xf9, 0x89, 0xaf, 0xb5, 0x98, 0x35, 0x2d, 0xf6,
	0x61, 0x90, 0xcd, 0x17, 0xe9, 0x14, 0x31, 0xad, 0x27, 0x7a, 0xb8, 0xed, 0x78, 0x36, 0x5f, 0x3c,
	0x47, 0x8c, 0x27, 0x9a, 0x06, 0xb0, 0xab, 0xb0, 0x2c, 0x2f, 0x05, 0xd7, 0xad, 0x00, 0x4c, 0xcd,
	0x29, 0xc6, 0x9f, 0xb7, 0x60, 0x7f, 0x73, 0xc4, 0x2b, 0x9d, 0x97, 0x3e, 0x82, 0x5e, 0x2d, 0x71,
	0x5a, 0x34, 0xc3, 0x1b, 0x76, 0x63, 0x77, 0xfe, 0xbe, 0xfb, 0x67, 0x3c, 0x6f, 0x57, 0xd5, 0xca,
	0x4d, 0xa3, 0x9a, 0x4f, 0x4d, 0xe3, 0xce, 0x7f, 0x36, 0x3a, 0x39, 0xbd, 0x07, 0x37, 0xcd, 0x48,
	0x35, 0xca, 0x94, 0xe5, 0xb9, 0x44, 0xa5, 0x86, 0xfd, 0x80, 0x1c, 0xef, 0x25, 0x7b, 0x15, 0x6b,
	0x62, 0x94, 0x4f, 0x5c, 0xf1, 0xf4, 0xfe, 0xf9, 0xca, 0x27, 0x17, 0x2b, 0x9f, 0x7c, 0x5b, 0xf9,
	0xe4, 0xfd, 0xda, 0xf7, 0x2e, 0xd6, 0xbe, 0xf7, 0x65, 0xed, 0x7b, 0xaf, 0xed, 0xb5, 0x45, 0x8d,
	0x3d, 0x70, 0xbd, 0xa8, 0x51, 0x65, 0x3d, 0x7b, 0xd8, 0x0f, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x05, 0x3f, 0xb1, 0xe1, 0x7c, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OlloNameParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.NameParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NameParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellFeePct) > 0 {
		i -= len(m.SellFeePct)
		copy(dAtA[i:], m.SellFeePct)
		i = encodeVarintParams(dAtA, i, uint64(len(m.SellFeePct)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyFeePct) > 0 {
		i -= len(m.BuyFeePct)
		copy(dAtA[i:], m.BuyFeePct)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BuyFeePct)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MaxLength) > 0 {
		i -= len(m.MaxLength)
		copy(dAtA[i:], m.MaxLength)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MaxLength)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinLength) > 0 {
		i -= len(m.MinLength)
		copy(dAtA[i:], m.MinLength)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MinLength)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinPrice) > 0 {
		i -= len(m.MinPrice)
		copy(dAtA[i:], m.MinPrice)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MinPrice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OlloNameParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OlloNameParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OlloNameParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPerAddress != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxPerAddress))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.Suffix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.SellFeePct) > 0 {
		i -= len(m.SellFeePct)
		copy(dAtA[i:], m.SellFeePct)
		i = encodeVarintParams(dAtA, i, uint64(len(m.SellFeePct)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BuyFeePct) > 0 {
		i -= len(m.BuyFeePct)
		copy(dAtA[i:], m.BuyFeePct)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BuyFeePct)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MaxLength) > 0 {
		i -= len(m.MaxLength)
		copy(dAtA[i:], m.MaxLength)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MaxLength)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MinLength) > 0 {
		i -= len(m.MinLength)
		copy(dAtA[i:], m.MinLength)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MinLength)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MinPrice) > 0 {
		i -= len(m.MinPrice)
		copy(dAtA[i:], m.MinPrice)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MinPrice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NameParams.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.OlloNameParams.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *NameParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinPrice)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MinLength)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MaxLength)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BuyFeePct)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.SellFeePct)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *OlloNameParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MinPrice)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MinLength)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MaxLength)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BuyFeePct)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.SellFeePct)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.Prefix.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.Suffix.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxPerAddress != 0 {
		n += 1 + sovParams(uint64(m.MaxPerAddress))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NameParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OlloNameParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OlloNameParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyFeePct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyFeePct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellFeePct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellFeePct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OlloNameParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OlloNameParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OlloNameParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLength", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxLength = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyFeePct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyFeePct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellFeePct", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellFeePct = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Suffix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPerAddress", wireType)
			}
			m.MaxPerAddress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPerAddress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
