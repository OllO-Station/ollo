// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryAllNames struct {
}

func (m *QueryAllNames) Reset()         { *m = QueryAllNames{} }
func (m *QueryAllNames) String() string { return proto.CompactTextString(m) }
func (*QueryAllNames) ProtoMessage()    {}
func (*QueryAllNames) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{1}
}
func (m *QueryAllNames) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNames) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNames.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNames) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNames.Merge(m, src)
}
func (m *QueryAllNames) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNames) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNames.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNames proto.InternalMessageInfo

type QueryIbcNamesRequest struct {
}

func (m *QueryIbcNamesRequest) Reset()         { *m = QueryIbcNamesRequest{} }
func (m *QueryIbcNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIbcNamesRequest) ProtoMessage()    {}
func (*QueryIbcNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{2}
}
func (m *QueryIbcNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIbcNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIbcNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIbcNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIbcNamesRequest.Merge(m, src)
}
func (m *QueryIbcNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIbcNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIbcNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIbcNamesRequest proto.InternalMessageInfo

type QueryIbcNamesResponse struct {
}

func (m *QueryIbcNamesResponse) Reset()         { *m = QueryIbcNamesResponse{} }
func (m *QueryIbcNamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIbcNamesResponse) ProtoMessage()    {}
func (*QueryIbcNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{3}
}
func (m *QueryIbcNamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIbcNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIbcNamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIbcNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIbcNamesResponse.Merge(m, src)
}
func (m *QueryIbcNamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIbcNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIbcNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIbcNamesResponse proto.InternalMessageInfo

type QueryOlloNameRequest struct {
}

func (m *QueryOlloNameRequest) Reset()         { *m = QueryOlloNameRequest{} }
func (m *QueryOlloNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOlloNameRequest) ProtoMessage()    {}
func (*QueryOlloNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{4}
}
func (m *QueryOlloNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOlloNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOlloNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOlloNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOlloNameRequest.Merge(m, src)
}
func (m *QueryOlloNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOlloNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOlloNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOlloNameRequest proto.InternalMessageInfo

type QueryOlloNameResponse struct {
}

func (m *QueryOlloNameResponse) Reset()         { *m = QueryOlloNameResponse{} }
func (m *QueryOlloNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOlloNameResponse) ProtoMessage()    {}
func (*QueryOlloNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{5}
}
func (m *QueryOlloNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOlloNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOlloNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOlloNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOlloNameResponse.Merge(m, src)
}
func (m *QueryOlloNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOlloNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOlloNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOlloNameResponse proto.InternalMessageInfo

type QueryThreadResponse struct {
}

func (m *QueryThreadResponse) Reset()         { *m = QueryThreadResponse{} }
func (m *QueryThreadResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThreadResponse) ProtoMessage()    {}
func (*QueryThreadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{6}
}
func (m *QueryThreadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryThreadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThreadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryThreadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThreadResponse.Merge(m, src)
}
func (m *QueryThreadResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryThreadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThreadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThreadResponse proto.InternalMessageInfo

type QueryThreadRequest struct {
	ThreadId uint64 `protobuf:"varint,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (m *QueryThreadRequest) Reset()         { *m = QueryThreadRequest{} }
func (m *QueryThreadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryThreadRequest) ProtoMessage()    {}
func (*QueryThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{7}
}
func (m *QueryThreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThreadRequest.Merge(m, src)
}
func (m *QueryThreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThreadRequest proto.InternalMessageInfo

func (m *QueryThreadRequest) GetThreadId() uint64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

type QueryThreadsResponse struct {
}

func (m *QueryThreadsResponse) Reset()         { *m = QueryThreadsResponse{} }
func (m *QueryThreadsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryThreadsResponse) ProtoMessage()    {}
func (*QueryThreadsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{8}
}
func (m *QueryThreadsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryThreadsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThreadsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryThreadsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThreadsResponse.Merge(m, src)
}
func (m *QueryThreadsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryThreadsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThreadsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThreadsResponse proto.InternalMessageInfo

type QueryThreadsRequest struct {
}

func (m *QueryThreadsRequest) Reset()         { *m = QueryThreadsRequest{} }
func (m *QueryThreadsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryThreadsRequest) ProtoMessage()    {}
func (*QueryThreadsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{9}
}
func (m *QueryThreadsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryThreadsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryThreadsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryThreadsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryThreadsRequest.Merge(m, src)
}
func (m *QueryThreadsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryThreadsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryThreadsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryThreadsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{10}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetAddressNamesResponse struct {
}

func (m *QueryGetAddressNamesResponse) Reset()         { *m = QueryGetAddressNamesResponse{} }
func (m *QueryGetAddressNamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressNamesResponse) ProtoMessage()    {}
func (*QueryGetAddressNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{11}
}
func (m *QueryGetAddressNamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressNamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressNamesResponse.Merge(m, src)
}
func (m *QueryGetAddressNamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressNamesResponse proto.InternalMessageInfo

type QueryGetAddressNamesRequest struct {
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetAddressNamesRequest) Reset()         { *m = QueryGetAddressNamesRequest{} }
func (m *QueryGetAddressNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAddressNamesRequest) ProtoMessage()    {}
func (*QueryGetAddressNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{12}
}
func (m *QueryGetAddressNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAddressNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAddressNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAddressNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAddressNamesRequest.Merge(m, src)
}
func (m *QueryGetAddressNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAddressNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAddressNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAddressNamesRequest proto.InternalMessageInfo

func (m *QueryGetAddressNamesRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetTagsResponse struct {
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *QueryGetTagsResponse) Reset()         { *m = QueryGetTagsResponse{} }
func (m *QueryGetTagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTagsResponse) ProtoMessage()    {}
func (*QueryGetTagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{13}
}
func (m *QueryGetTagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTagsResponse.Merge(m, src)
}
func (m *QueryGetTagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTagsResponse proto.InternalMessageInfo

func (m *QueryGetTagsResponse) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type QueryGetTagsRequest struct {
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *QueryGetTagsRequest) Reset()         { *m = QueryGetTagsRequest{} }
func (m *QueryGetTagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTagsRequest) ProtoMessage()    {}
func (*QueryGetTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{14}
}
func (m *QueryGetTagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTagsRequest.Merge(m, src)
}
func (m *QueryGetTagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTagsRequest proto.InternalMessageInfo

func (m *QueryGetTagsRequest) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type QueryGetGroupRequest struct {
	GroupId uint64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *QueryGetGroupRequest) Reset()         { *m = QueryGetGroupRequest{} }
func (m *QueryGetGroupRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGroupRequest) ProtoMessage()    {}
func (*QueryGetGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{15}
}
func (m *QueryGetGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGroupRequest.Merge(m, src)
}
func (m *QueryGetGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGroupRequest proto.InternalMessageInfo

func (m *QueryGetGroupRequest) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type QueryGetNameThreadRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ThreadId uint64 `protobuf:"varint,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (m *QueryGetNameThreadRequest) Reset()         { *m = QueryGetNameThreadRequest{} }
func (m *QueryGetNameThreadRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNameThreadRequest) ProtoMessage()    {}
func (*QueryGetNameThreadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{16}
}
func (m *QueryGetNameThreadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNameThreadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNameThreadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNameThreadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNameThreadRequest.Merge(m, src)
}
func (m *QueryGetNameThreadRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNameThreadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNameThreadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNameThreadRequest proto.InternalMessageInfo

func (m *QueryGetNameThreadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryGetNameThreadRequest) GetThreadId() uint64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

type QueryGetNameThreadReplyRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ThreadId  uint64 `protobuf:"varint,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *QueryGetNameThreadReplyRequest) Reset()         { *m = QueryGetNameThreadReplyRequest{} }
func (m *QueryGetNameThreadReplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNameThreadReplyRequest) ProtoMessage()    {}
func (*QueryGetNameThreadReplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{17}
}
func (m *QueryGetNameThreadReplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNameThreadReplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNameThreadReplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNameThreadReplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNameThreadReplyRequest.Merge(m, src)
}
func (m *QueryGetNameThreadReplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNameThreadReplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNameThreadReplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNameThreadReplyRequest proto.InternalMessageInfo

func (m *QueryGetNameThreadReplyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryGetNameThreadReplyRequest) GetThreadId() uint64 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *QueryGetNameThreadReplyRequest) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

type QueryGetNameThreadReplyResponse struct {
}

func (m *QueryGetNameThreadReplyResponse) Reset()         { *m = QueryGetNameThreadReplyResponse{} }
func (m *QueryGetNameThreadReplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNameThreadReplyResponse) ProtoMessage()    {}
func (*QueryGetNameThreadReplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{18}
}
func (m *QueryGetNameThreadReplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNameThreadReplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNameThreadReplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNameThreadReplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNameThreadReplyResponse.Merge(m, src)
}
func (m *QueryGetNameThreadReplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNameThreadReplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNameThreadReplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNameThreadReplyResponse proto.InternalMessageInfo

type QueryGetGroupTagsRequest struct {
	GroupId uint64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *QueryGetGroupTagsRequest) Reset()         { *m = QueryGetGroupTagsRequest{} }
func (m *QueryGetGroupTagsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGroupTagsRequest) ProtoMessage()    {}
func (*QueryGetGroupTagsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{19}
}
func (m *QueryGetGroupTagsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGroupTagsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGroupTagsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGroupTagsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGroupTagsRequest.Merge(m, src)
}
func (m *QueryGetGroupTagsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGroupTagsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGroupTagsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGroupTagsRequest proto.InternalMessageInfo

func (m *QueryGetGroupTagsRequest) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type QueryGetGroupTagsResponse struct {
}

func (m *QueryGetGroupTagsResponse) Reset()         { *m = QueryGetGroupTagsResponse{} }
func (m *QueryGetGroupTagsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGroupTagsResponse) ProtoMessage()    {}
func (*QueryGetGroupTagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{20}
}
func (m *QueryGetGroupTagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGroupTagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGroupTagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGroupTagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGroupTagsResponse.Merge(m, src)
}
func (m *QueryGetGroupTagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGroupTagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGroupTagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGroupTagsResponse proto.InternalMessageInfo

type QueryGetTagRequest struct {
	Tag string `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *QueryGetTagRequest) Reset()         { *m = QueryGetTagRequest{} }
func (m *QueryGetTagRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTagRequest) ProtoMessage()    {}
func (*QueryGetTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{21}
}
func (m *QueryGetTagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTagRequest.Merge(m, src)
}
func (m *QueryGetTagRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTagRequest proto.InternalMessageInfo

func (m *QueryGetTagRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type QueryGetNameIdRequest struct {
	NameId uint64 `protobuf:"varint,2,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
}

func (m *QueryGetNameIdRequest) Reset()         { *m = QueryGetNameIdRequest{} }
func (m *QueryGetNameIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNameIdRequest) ProtoMessage()    {}
func (*QueryGetNameIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{22}
}
func (m *QueryGetNameIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNameIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNameIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNameIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNameIdRequest.Merge(m, src)
}
func (m *QueryGetNameIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNameIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNameIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNameIdRequest proto.InternalMessageInfo

func (m *QueryGetNameIdRequest) GetNameId() uint64 {
	if m != nil {
		return m.NameId
	}
	return 0
}

type QueryGetNameRequest struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryGetNameRequest) Reset()         { *m = QueryGetNameRequest{} }
func (m *QueryGetNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNameRequest) ProtoMessage()    {}
func (*QueryGetNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{23}
}
func (m *QueryGetNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNameRequest.Merge(m, src)
}
func (m *QueryGetNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNameRequest proto.InternalMessageInfo

func (m *QueryGetNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryGetNameIdResponse struct {
	Name Name `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
}

func (m *QueryGetNameIdResponse) Reset()         { *m = QueryGetNameIdResponse{} }
func (m *QueryGetNameIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNameIdResponse) ProtoMessage()    {}
func (*QueryGetNameIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{24}
}
func (m *QueryGetNameIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNameIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNameIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNameIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNameIdResponse.Merge(m, src)
}
func (m *QueryGetNameIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNameIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNameIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNameIdResponse proto.InternalMessageInfo

func (m *QueryGetNameIdResponse) GetName() Name {
	if m != nil {
		return m.Name
	}
	return Name{}
}

type QueryGetNameResponse struct {
	Name Name `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
}

func (m *QueryGetNameResponse) Reset()         { *m = QueryGetNameResponse{} }
func (m *QueryGetNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNameResponse) ProtoMessage()    {}
func (*QueryGetNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{25}
}
func (m *QueryGetNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNameResponse.Merge(m, src)
}
func (m *QueryGetNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNameResponse proto.InternalMessageInfo

func (m *QueryGetNameResponse) GetName() Name {
	if m != nil {
		return m.Name
	}
	return Name{}
}

type QueryGetNamesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetNamesRequest) Reset()         { *m = QueryGetNamesRequest{} }
func (m *QueryGetNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNamesRequest) ProtoMessage()    {}
func (*QueryGetNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{26}
}
func (m *QueryGetNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNamesRequest.Merge(m, src)
}
func (m *QueryGetNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNamesRequest proto.InternalMessageInfo

func (m *QueryGetNamesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNamesResponse struct {
	Names      []Name              `protobuf:"bytes,1,rep,name=names,proto3" json:"names"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetNamesResponse) Reset()         { *m = QueryGetNamesResponse{} }
func (m *QueryGetNamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNamesResponse) ProtoMessage()    {}
func (*QueryGetNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd74cca317eca575, []int{27}
}
func (m *QueryGetNamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNamesResponse.Merge(m, src)
}
func (m *QueryGetNamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNamesResponse proto.InternalMessageInfo

func (m *QueryGetNamesResponse) GetNames() []Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *QueryGetNamesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "ollo.ons.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryAllNames)(nil), "ollo.ons.v1beta1.QueryAllNames")
	proto.RegisterType((*QueryIbcNamesRequest)(nil), "ollo.ons.v1beta1.QueryIbcNamesRequest")
	proto.RegisterType((*QueryIbcNamesResponse)(nil), "ollo.ons.v1beta1.QueryIbcNamesResponse")
	proto.RegisterType((*QueryOlloNameRequest)(nil), "ollo.ons.v1beta1.QueryOlloNameRequest")
	proto.RegisterType((*QueryOlloNameResponse)(nil), "ollo.ons.v1beta1.QueryOlloNameResponse")
	proto.RegisterType((*QueryThreadResponse)(nil), "ollo.ons.v1beta1.QueryThreadResponse")
	proto.RegisterType((*QueryThreadRequest)(nil), "ollo.ons.v1beta1.QueryThreadRequest")
	proto.RegisterType((*QueryThreadsResponse)(nil), "ollo.ons.v1beta1.QueryThreadsResponse")
	proto.RegisterType((*QueryThreadsRequest)(nil), "ollo.ons.v1beta1.QueryThreadsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "ollo.ons.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryGetAddressNamesResponse)(nil), "ollo.ons.v1beta1.QueryGetAddressNamesResponse")
	proto.RegisterType((*QueryGetAddressNamesRequest)(nil), "ollo.ons.v1beta1.QueryGetAddressNamesRequest")
	proto.RegisterType((*QueryGetTagsResponse)(nil), "ollo.ons.v1beta1.QueryGetTagsResponse")
	proto.RegisterType((*QueryGetTagsRequest)(nil), "ollo.ons.v1beta1.QueryGetTagsRequest")
	proto.RegisterType((*QueryGetGroupRequest)(nil), "ollo.ons.v1beta1.QueryGetGroupRequest")
	proto.RegisterType((*QueryGetNameThreadRequest)(nil), "ollo.ons.v1beta1.QueryGetNameThreadRequest")
	proto.RegisterType((*QueryGetNameThreadReplyRequest)(nil), "ollo.ons.v1beta1.QueryGetNameThreadReplyRequest")
	proto.RegisterType((*QueryGetNameThreadReplyResponse)(nil), "ollo.ons.v1beta1.QueryGetNameThreadReplyResponse")
	proto.RegisterType((*QueryGetGroupTagsRequest)(nil), "ollo.ons.v1beta1.QueryGetGroupTagsRequest")
	proto.RegisterType((*QueryGetGroupTagsResponse)(nil), "ollo.ons.v1beta1.QueryGetGroupTagsResponse")
	proto.RegisterType((*QueryGetTagRequest)(nil), "ollo.ons.v1beta1.QueryGetTagRequest")
	proto.RegisterType((*QueryGetNameIdRequest)(nil), "ollo.ons.v1beta1.QueryGetNameIdRequest")
	proto.RegisterType((*QueryGetNameRequest)(nil), "ollo.ons.v1beta1.QueryGetNameRequest")
	proto.RegisterType((*QueryGetNameIdResponse)(nil), "ollo.ons.v1beta1.QueryGetNameIdResponse")
	proto.RegisterType((*QueryGetNameResponse)(nil), "ollo.ons.v1beta1.QueryGetNameResponse")
	proto.RegisterType((*QueryGetNamesRequest)(nil), "ollo.ons.v1beta1.QueryGetNamesRequest")
	proto.RegisterType((*QueryGetNamesResponse)(nil), "ollo.ons.v1beta1.QueryGetNamesResponse")
}

func init() { proto.RegisterFile("ollo/ons/v1beta1/query.proto", fileDescriptor_dd74cca317eca575) }

var fileDescriptor_dd74cca317eca575 = []byte{
	// 1159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcd, 0x6f, 0xe3, 0x54,
	0x10, 0xaf, 0xd3, 0x6e, 0xda, 0x4c, 0x41, 0xbb, 0x1a, 0xfa, 0x91, 0xba, 0xad, 0xdb, 0x35, 0x6d,
	0xd2, 0x6d, 0x59, 0xbb, 0x2d, 0x5f, 0x12, 0x17, 0xd4, 0x3d, 0x50, 0x82, 0x16, 0x16, 0xa2, 0x9e,
	0x38, 0x80, 0x9c, 0xc6, 0x35, 0x91, 0x12, 0x3b, 0x1b, 0xbb, 0x40, 0x08, 0x39, 0x2c, 0x42, 0x20,
	0x10, 0x07, 0x24, 0xe0, 0x82, 0xc4, 0xdf, 0x82, 0xc4, 0x69, 0x8f, 0x2b, 0x71, 0xe1, 0x84, 0x50,
	0xcb, 0x1f, 0x82, 0xde, 0xbc, 0xe7, 0xef, 0x38, 0xce, 0xae, 0xc2, 0xa9, 0xee, 0x7c, 0xfd, 0x7e,
	0x6f, 0xde, 0xcc, 0xbc, 0x51, 0x60, 0xc3, 0x69, 0xb7, 0x1d, 0xdd, 0xb1, 0x5d, 0xfd, 0xd3, 0xa3,
	0x86, 0xe9, 0x19, 0x47, 0xfa, 0xc3, 0x4b, 0xb3, 0xd7, 0xd7, 0xba, 0x3d, 0xc7, 0x73, 0xf0, 0x16,
	0xd3, 0x6a, 0x8e, 0xed, 0x6a, 0x42, 0x2b, 0x2f, 0x59, 0x8e, 0xe5, 0x90, 0x52, 0x67, 0x5f, 0xdc,
	0x4e, 0xde, 0xb0, 0x1c, 0xc7, 0x6a, 0x9b, 0xba, 0xd1, 0x6d, 0xe9, 0x86, 0x6d, 0x3b, 0x9e, 0xe1,
	0xb5, 0x98, 0x17, 0xd7, 0xee, 0x9f, 0x3b, 0x6e, 0xc7, 0x71, 0xf5, 0x86, 0xe1, 0x9a, 0x3c, 0x7c,
	0x00, 0xd6, 0x35, 0xac, 0x96, 0x4d, 0xc6, 0xc2, 0x76, 0x33, 0xc5, 0xa7, 0x6b, 0xf4, 0x8c, 0x8e,
	0x1f, 0x6a, 0x3d, 0xa5, 0xb6, 0x8d, 0x8e, 0xc9, 0x95, 0xea, 0x12, 0xe0, 0x07, 0x2c, 0xfa, 0xfb,
	0xe4, 0x51, 0x37, 0x1f, 0x5e, 0x9a, 0xae, 0xa7, 0xde, 0x84, 0xe7, 0x49, 0x7a, 0xd2, 0x6e, 0xbf,
	0x67, 0x74, 0x4c, 0x57, 0x5d, 0x81, 0x25, 0x12, 0xd4, 0x1a, 0xe7, 0x24, 0xf0, 0x0d, 0x57, 0x61,
	0x39, 0x21, 0x77, 0xbb, 0x8e, 0xed, 0x9a, 0x81, 0xc3, 0x83, 0x76, 0xdb, 0x61, 0x9a, 0xa4, 0x43,
	0x28, 0x17, 0x0e, 0xcb, 0xf0, 0x02, 0x29, 0xce, 0x3e, 0xe9, 0x99, 0x46, 0x33, 0x10, 0x1f, 0x09,
	0x7e, 0xbe, 0x98, 0xa2, 0xe0, 0x3a, 0x94, 0x3c, 0x12, 0x7c, 0xdc, 0x6a, 0x96, 0xa5, 0x6d, 0x69,
	0x6f, 0xae, 0xbe, 0xc0, 0x05, 0xb5, 0x66, 0x00, 0xcd, 0x5d, 0xdc, 0x0c, 0x84, 0xe0, 0x08, 0xef,
	0x0a, 0xb1, 0x9f, 0x01, 0x6e, 0x8d, 0xaf, 0x41, 0x91, 0x67, 0x91, 0xe2, 0x2f, 0x1e, 0x97, 0xb5,
	0xe4, 0xbd, 0x6a, 0xdc, 0xe3, 0xde, 0xdc, 0xe3, 0xbf, 0xb7, 0x66, 0xea, 0xc2, 0x5a, 0x55, 0x60,
	0x83, 0xc2, 0x9d, 0x9a, 0xde, 0x49, 0xb3, 0xd9, 0x33, 0x5d, 0x37, 0x9e, 0x98, 0xd7, 0x61, 0x7d,
	0xb4, 0x9e, 0x9f, 0xac, 0x0c, 0xf3, 0x06, 0x17, 0x97, 0x0b, 0xdb, 0xd2, 0x5e, 0xa9, 0xee, 0xff,
	0xab, 0x1e, 0x89, 0x63, 0x9d, 0x9a, 0xde, 0x99, 0x61, 0x85, 0x44, 0xd7, 0x60, 0xc1, 0xea, 0x39,
	0x97, 0x5d, 0x96, 0x8a, 0x02, 0xa5, 0x62, 0x9e, 0xfe, 0xaf, 0x35, 0xd5, 0x43, 0x71, 0xb4, 0xc0,
	0x85, 0x63, 0x8c, 0xf1, 0x88, 0x80, 0x9c, 0x32, 0xd1, 0x04, 0x2e, 0xf7, 0x61, 0xcd, 0x77, 0x61,
	0x27, 0x89, 0x5f, 0x14, 0xc2, 0x1c, 0x2b, 0x36, 0xca, 0x61, 0xa9, 0x4e, 0xdf, 0xf1, 0xcb, 0x2b,
	0x24, 0x2e, 0xaf, 0x0b, 0xca, 0xa8, 0x68, 0xdd, 0x76, 0xff, 0x59, 0x43, 0xe2, 0x26, 0x40, 0xc7,
	0x74, 0x5d, 0xc3, 0x32, 0x99, 0x76, 0x96, 0xb4, 0x25, 0x21, 0xa9, 0x35, 0xd5, 0xdb, 0xb0, 0x95,
	0x89, 0x28, 0xee, 0xec, 0x55, 0x28, 0xc7, 0xb2, 0x92, 0x95, 0x4c, 0x29, 0x9e, 0x99, 0xf5, 0x30,
	0x33, 0x11, 0x37, 0x11, 0xb3, 0x22, 0x0a, 0x9b, 0xdf, 0x8d, 0x1f, 0xed, 0x16, 0xcc, 0x7a, 0x86,
	0x25, 0xae, 0x9e, 0x7d, 0xaa, 0x87, 0xa2, 0x61, 0x04, 0xbd, 0x5a, 0x90, 0xda, 0x55, 0x98, 0x67,
	0x67, 0x0f, 0x4f, 0x5c, 0xb4, 0x49, 0xaf, 0xde, 0x09, 0x6f, 0x3d, 0xd2, 0x79, 0x41, 0xde, 0x0a,
	0x61, 0xde, 0xd4, 0x77, 0x60, 0x25, 0x19, 0x5c, 0x54, 0xd5, 0x61, 0x24, 0xcb, 0x8b, 0xc7, 0x2b,
	0xe9, 0xe2, 0x67, 0xf6, 0xa2, 0xf4, 0x79, 0xac, 0xb7, 0xc3, 0xd2, 0x89, 0x36, 0xf6, 0x33, 0x44,
	0xfa, 0x28, 0x1e, 0x29, 0x48, 0xf5, 0x5b, 0x00, 0xe1, 0xec, 0x13, 0xf1, 0x2a, 0x1a, 0x1f, 0x94,
	0x1a, 0x1b, 0x94, 0x1a, 0x9f, 0xc3, 0x61, 0x7f, 0x5a, 0xfe, 0xe9, 0xeb, 0x11, 0x4f, 0xf5, 0x67,
	0x29, 0x9e, 0xd3, 0xb0, 0x97, 0x8e, 0xe1, 0x06, 0x63, 0xc0, 0x7a, 0x7e, 0x36, 0x97, 0x2c, 0x37,
	0xc5, 0xd3, 0x18, 0xab, 0x02, 0xb1, 0xaa, 0xe6, 0xb2, 0xe2, 0x80, 0x51, 0x5a, 0xc7, 0x7f, 0x2c,
	0xc3, 0x0d, 0xa2, 0x85, 0x9f, 0x41, 0x91, 0xcf, 0x16, 0xdc, 0x49, 0x33, 0x48, 0x8f, 0x6b, 0x79,
	0x37, 0xc7, 0x4a, 0x94, 0xdc, 0xf6, 0x57, 0x7f, 0xfe, 0xfb, 0x53, 0x41, 0xc6, 0xb2, 0x9e, 0xf1,
	0x60, 0xe0, 0x00, 0xe6, 0xc5, 0x74, 0xc4, 0xac, 0x98, 0xf1, 0xe9, 0x29, 0x57, 0xf2, 0xcc, 0x04,
	0xf6, 0x6d, 0xc2, 0x5e, 0xc7, 0xb5, 0x34, 0xb6, 0x27, 0x10, 0xbf, 0x96, 0xa0, 0xc8, 0xdd, 0x32,
	0x8f, 0x1d, 0x1b, 0x2e, 0xf2, 0x6e, 0x8e, 0x95, 0x80, 0xbe, 0x4b, 0xd0, 0x55, 0xdc, 0xcd, 0x84,
	0xd6, 0x07, 0xc1, 0xf4, 0x18, 0xe2, 0xaf, 0x12, 0x3c, 0x17, 0x9d, 0xcc, 0x78, 0x37, 0x03, 0x66,
	0xf4, 0x04, 0x97, 0xb5, 0x49, 0xcd, 0x05, 0xbd, 0x03, 0xa2, 0xb7, 0x8b, 0x2f, 0xa6, 0xe9, 0x89,
	0xd1, 0xaf, 0x0f, 0xc4, 0xc7, 0x10, 0x07, 0xb0, 0xe0, 0xbf, 0x9c, 0x98, 0x95, 0xfa, 0xc4, 0x93,
	0x2b, 0x57, 0x73, 0xed, 0x04, 0x13, 0x85, 0x98, 0x94, 0x71, 0x25, 0xcd, 0x84, 0x09, 0xf0, 0x0b,
	0x58, 0xf0, 0xdf, 0xf9, 0x4c, 0xf0, 0xc4, 0x82, 0x90, 0x09, 0x9e, 0x5a, 0x18, 0x36, 0x09, 0x7c,
	0x15, 0x97, 0xd3, 0xe0, 0xad, 0xc6, 0x39, 0x3e, 0x92, 0x60, 0x81, 0x46, 0x94, 0x7d, 0xe1, 0x64,
	0xd6, 0x66, 0x7c, 0xe2, 0x65, 0xd6, 0x66, 0x62, 0x42, 0xa9, 0x15, 0x82, 0xde, 0x46, 0x45, 0x1f,
	0xb9, 0x29, 0xb9, 0xfa, 0x80, 0xfd, 0x19, 0xe2, 0x0f, 0x12, 0x2c, 0x86, 0x4f, 0x84, 0x3b, 0x6d,
	0x1a, 0x1a, 0xd1, 0xd8, 0xc3, 0xca, 0x78, 0x1a, 0x41, 0xbf, 0xfc, 0x26, 0x01, 0x84, 0x74, 0xf0,
	0x60, 0x3c, 0x4c, 0xbc, 0x75, 0x26, 0xe5, 0xf4, 0x06, 0x71, 0x7a, 0x05, 0x8f, 0x27, 0xe3, 0x14,
	0x6b, 0xa4, 0xdf, 0x25, 0xb8, 0x99, 0x78, 0x51, 0xf1, 0x70, 0x32, 0x92, 0xe1, 0x73, 0x2f, 0x1f,
	0x3d, 0x85, 0x87, 0x20, 0x7d, 0x4a, 0xa4, 0x4f, 0xf0, 0xcd, 0xa7, 0x27, 0xad, 0x0f, 0xc2, 0x55,
	0x61, 0x88, 0xdf, 0x88, 0xa2, 0x63, 0x0f, 0xf7, 0xb4, 0x6f, 0x7b, 0x4c, 0xdb, 0xc7, 0x49, 0x32,
	0xec, 0xef, 0xc5, 0x55, 0x3f, 0xb8, 0xb8, 0x30, 0x7b, 0x53, 0xa7, 0x32, 0x66, 0x40, 0xc6, 0xa8,
	0x38, 0x1c, 0xfd, 0x91, 0x04, 0x25, 0xe6, 0x7f, 0xdf, 0x31, 0xec, 0xa9, 0x73, 0xd9, 0x25, 0x2e,
	0x5b, 0xb8, 0x99, 0xc5, 0xa5, 0x4d, 0xa8, 0x5f, 0x02, 0xd0, 0x4a, 0xc5, 0x87, 0xd1, 0x94, 0x39,
	0x6c, 0x11, 0x87, 0x35, 0x5c, 0x4d, 0x73, 0xa0, 0xd5, 0x0e, 0xbf, 0x95, 0xa0, 0x14, 0xc0, 0xe3,
	0x98, 0xb0, 0xd1, 0x1d, 0x7a, 0x62, 0xf8, 0x7d, 0x82, 0xdf, 0x41, 0x35, 0x03, 0x5e, 0x1f, 0xf8,
	0x0b, 0xe7, 0x10, 0x7f, 0xf1, 0x99, 0x50, 0x89, 0xee, 0xe7, 0x30, 0x89, 0xec, 0xad, 0xf2, 0xc1,
	0x44, 0xb6, 0x82, 0x92, 0x4e, 0x94, 0xee, 0x60, 0x35, 0x9f, 0x12, 0x2f, 0xd8, 0x4b, 0x98, 0xfb,
	0x3f, 0x9a, 0x66, 0xcc, 0x0b, 0x45, 0xb0, 0x7d, 0x98, 0x3d, 0x33, 0xac, 0xcc, 0xf5, 0x21, 0xb6,
	0x6b, 0x4f, 0x0c, 0xba, 0x43, 0xa0, 0x0a, 0x6e, 0x8c, 0x06, 0xd5, 0x07, 0x9e, 0x61, 0x0d, 0xf1,
	0x3b, 0x09, 0x8a, 0x7c, 0x87, 0xc6, 0xea, 0xf8, 0xc0, 0xc1, 0x0a, 0x2f, 0xef, 0xe5, 0x1b, 0x0a,
	0x0e, 0x2f, 0x11, 0x87, 0x0a, 0xee, 0x64, 0xb5, 0x45, 0xab, 0xc9, 0xbb, 0x94, 0xaa, 0xa2, 0x0f,
	0x37, 0xc6, 0xbf, 0xd2, 0x89, 0xcd, 0x5a, 0xae, 0xe6, 0xda, 0xe5, 0xb7, 0x06, 0xf1, 0xb8, 0xb7,
	0xff, 0xf8, 0x4a, 0x91, 0x9e, 0x5c, 0x29, 0xd2, 0x3f, 0x57, 0x8a, 0xf4, 0xe3, 0xb5, 0x32, 0xf3,
	0xe4, 0x5a, 0x99, 0xf9, 0xeb, 0x5a, 0x99, 0xf9, 0x90, 0x7e, 0x17, 0xd1, 0x3f, 0x27, 0x1f, 0xaf,
	0xdf, 0x35, 0xdd, 0x46, 0x91, 0x7e, 0x82, 0x78, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0,
	0x0f, 0xc5, 0x41, 0x50, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries all tags
	Threads(ctx context.Context, in *QueryThreadsRequest, opts ...grpc.CallOption) (*QueryThreadsResponse, error)
	// Queries all tags
	Thread(ctx context.Context, in *QueryThreadRequest, opts ...grpc.CallOption) (*QueryThreadResponse, error)
	// Queries all tags
	AddressNames(ctx context.Context, in *QueryGetAddressNamesRequest, opts ...grpc.CallOption) (*QueryGetAddressNamesResponse, error)
	// Queries all tags
	OlloName(ctx context.Context, in *QueryOlloNameRequest, opts ...grpc.CallOption) (*QueryOlloNameResponse, error)
	// Queries all tags
	IbcNames(ctx context.Context, in *QueryIbcNamesRequest, opts ...grpc.CallOption) (*QueryIbcNamesResponse, error)
	// Queries all tags
	NameInfo(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	NameThreads(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	NameThread(ctx context.Context, in *QueryGetNameThreadRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	NameThreadReply(ctx context.Context, in *QueryGetNameThreadReplyRequest, opts ...grpc.CallOption) (*QueryGetNameThreadReplyResponse, error)
	// Queries all tags
	NameTags(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	NameOffers(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	NameLoans(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	GroupNames(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	GroupName(ctx context.Context, in *QueryGetGroupRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries all tags
	GroupTags(ctx context.Context, in *QueryGetGroupTagsRequest, opts ...grpc.CallOption) (*QueryGetGroupTagsResponse, error)
	// Queries all tags
	Tags(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries a tag by its string value
	Tag(ctx context.Context, in *QueryGetTagRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error)
	// Queries a Name by index.
	NameId(ctx context.Context, in *QueryGetNameIdRequest, opts ...grpc.CallOption) (*QueryGetNameIdResponse, error)
	// Queries a list of Name items.
	Names(ctx context.Context, in *QueryGetNamesRequest, opts ...grpc.CallOption) (*QueryGetNamesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Threads(ctx context.Context, in *QueryThreadsRequest, opts ...grpc.CallOption) (*QueryThreadsResponse, error) {
	out := new(QueryThreadsResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/Threads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Thread(ctx context.Context, in *QueryThreadRequest, opts ...grpc.CallOption) (*QueryThreadResponse, error) {
	out := new(QueryThreadResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/Thread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressNames(ctx context.Context, in *QueryGetAddressNamesRequest, opts ...grpc.CallOption) (*QueryGetAddressNamesResponse, error) {
	out := new(QueryGetAddressNamesResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/AddressNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OlloName(ctx context.Context, in *QueryOlloNameRequest, opts ...grpc.CallOption) (*QueryOlloNameResponse, error) {
	out := new(QueryOlloNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/OlloName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IbcNames(ctx context.Context, in *QueryIbcNamesRequest, opts ...grpc.CallOption) (*QueryIbcNamesResponse, error) {
	out := new(QueryIbcNamesResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/IbcNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameInfo(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameThreads(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameThreads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameThread(ctx context.Context, in *QueryGetNameThreadRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameThreadReply(ctx context.Context, in *QueryGetNameThreadReplyRequest, opts ...grpc.CallOption) (*QueryGetNameThreadReplyResponse, error) {
	out := new(QueryGetNameThreadReplyResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameThreadReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameTags(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameOffers(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameLoans(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupNames(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/GroupNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupName(ctx context.Context, in *QueryGetGroupRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/GroupName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupTags(ctx context.Context, in *QueryGetGroupTagsRequest, opts ...grpc.CallOption) (*QueryGetGroupTagsResponse, error) {
	out := new(QueryGetGroupTagsResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/GroupTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tags(ctx context.Context, in *QueryGetNameRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/Tags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Tag(ctx context.Context, in *QueryGetTagRequest, opts ...grpc.CallOption) (*QueryGetNameResponse, error) {
	out := new(QueryGetNameResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NameId(ctx context.Context, in *QueryGetNameIdRequest, opts ...grpc.CallOption) (*QueryGetNameIdResponse, error) {
	out := new(QueryGetNameIdResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/NameId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Names(ctx context.Context, in *QueryGetNamesRequest, opts ...grpc.CallOption) (*QueryGetNamesResponse, error) {
	out := new(QueryGetNamesResponse)
	err := c.cc.Invoke(ctx, "/ollo.ons.v1beta1.Query/Names", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries all tags
	Threads(context.Context, *QueryThreadsRequest) (*QueryThreadsResponse, error)
	// Queries all tags
	Thread(context.Context, *QueryThreadRequest) (*QueryThreadResponse, error)
	// Queries all tags
	AddressNames(context.Context, *QueryGetAddressNamesRequest) (*QueryGetAddressNamesResponse, error)
	// Queries all tags
	OlloName(context.Context, *QueryOlloNameRequest) (*QueryOlloNameResponse, error)
	// Queries all tags
	IbcNames(context.Context, *QueryIbcNamesRequest) (*QueryIbcNamesResponse, error)
	// Queries all tags
	NameInfo(context.Context, *QueryGetNameRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	NameThreads(context.Context, *QueryGetNameRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	NameThread(context.Context, *QueryGetNameThreadRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	NameThreadReply(context.Context, *QueryGetNameThreadReplyRequest) (*QueryGetNameThreadReplyResponse, error)
	// Queries all tags
	NameTags(context.Context, *QueryGetNameRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	NameOffers(context.Context, *QueryGetNameRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	NameLoans(context.Context, *QueryGetNameRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	GroupNames(context.Context, *QueryGetNameRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	GroupName(context.Context, *QueryGetGroupRequest) (*QueryGetNameResponse, error)
	// Queries all tags
	GroupTags(context.Context, *QueryGetGroupTagsRequest) (*QueryGetGroupTagsResponse, error)
	// Queries all tags
	Tags(context.Context, *QueryGetNameRequest) (*QueryGetNameResponse, error)
	// Queries a tag by its string value
	Tag(context.Context, *QueryGetTagRequest) (*QueryGetNameResponse, error)
	// Queries a Name by index.
	NameId(context.Context, *QueryGetNameIdRequest) (*QueryGetNameIdResponse, error)
	// Queries a list of Name items.
	Names(context.Context, *QueryGetNamesRequest) (*QueryGetNamesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Threads(ctx context.Context, req *QueryThreadsRequest) (*QueryThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Threads not implemented")
}
func (*UnimplementedQueryServer) Thread(ctx context.Context, req *QueryThreadRequest) (*QueryThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Thread not implemented")
}
func (*UnimplementedQueryServer) AddressNames(ctx context.Context, req *QueryGetAddressNamesRequest) (*QueryGetAddressNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressNames not implemented")
}
func (*UnimplementedQueryServer) OlloName(ctx context.Context, req *QueryOlloNameRequest) (*QueryOlloNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OlloName not implemented")
}
func (*UnimplementedQueryServer) IbcNames(ctx context.Context, req *QueryIbcNamesRequest) (*QueryIbcNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbcNames not implemented")
}
func (*UnimplementedQueryServer) NameInfo(ctx context.Context, req *QueryGetNameRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameInfo not implemented")
}
func (*UnimplementedQueryServer) NameThreads(ctx context.Context, req *QueryGetNameRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameThreads not implemented")
}
func (*UnimplementedQueryServer) NameThread(ctx context.Context, req *QueryGetNameThreadRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameThread not implemented")
}
func (*UnimplementedQueryServer) NameThreadReply(ctx context.Context, req *QueryGetNameThreadReplyRequest) (*QueryGetNameThreadReplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameThreadReply not implemented")
}
func (*UnimplementedQueryServer) NameTags(ctx context.Context, req *QueryGetNameRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameTags not implemented")
}
func (*UnimplementedQueryServer) NameOffers(ctx context.Context, req *QueryGetNameRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameOffers not implemented")
}
func (*UnimplementedQueryServer) NameLoans(ctx context.Context, req *QueryGetNameRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameLoans not implemented")
}
func (*UnimplementedQueryServer) GroupNames(ctx context.Context, req *QueryGetNameRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupNames not implemented")
}
func (*UnimplementedQueryServer) GroupName(ctx context.Context, req *QueryGetGroupRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupName not implemented")
}
func (*UnimplementedQueryServer) GroupTags(ctx context.Context, req *QueryGetGroupTagsRequest) (*QueryGetGroupTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupTags not implemented")
}
func (*UnimplementedQueryServer) Tags(ctx context.Context, req *QueryGetNameRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tags not implemented")
}
func (*UnimplementedQueryServer) Tag(ctx context.Context, req *QueryGetTagRequest) (*QueryGetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tag not implemented")
}
func (*UnimplementedQueryServer) NameId(ctx context.Context, req *QueryGetNameIdRequest) (*QueryGetNameIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameId not implemented")
}
func (*UnimplementedQueryServer) Names(ctx context.Context, req *QueryGetNamesRequest) (*QueryGetNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Names not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Threads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Threads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/Threads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Threads(ctx, req.(*QueryThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Thread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Thread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/Thread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Thread(ctx, req.(*QueryThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAddressNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/AddressNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressNames(ctx, req.(*QueryGetAddressNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OlloName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOlloNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OlloName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/OlloName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OlloName(ctx, req.(*QueryOlloNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IbcNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIbcNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IbcNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/IbcNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IbcNames(ctx, req.(*QueryIbcNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameInfo(ctx, req.(*QueryGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameThreads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameThreads(ctx, req.(*QueryGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameThread(ctx, req.(*QueryGetNameThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameThreadReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameThreadReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameThreadReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameThreadReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameThreadReply(ctx, req.(*QueryGetNameThreadReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameTags(ctx, req.(*QueryGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameOffers(ctx, req.(*QueryGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameLoans(ctx, req.(*QueryGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/GroupNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupNames(ctx, req.(*QueryGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/GroupName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupName(ctx, req.(*QueryGetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGroupTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/GroupTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupTags(ctx, req.(*QueryGetGroupTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/Tags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tags(ctx, req.(*QueryGetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tag(ctx, req.(*QueryGetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NameId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNameIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NameId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/NameId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NameId(ctx, req.(*QueryGetNameIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Names_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Names(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ollo.ons.v1beta1.Query/Names",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Names(ctx, req.(*QueryGetNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ollo.ons.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Threads",
			Handler:    _Query_Threads_Handler,
		},
		{
			MethodName: "Thread",
			Handler:    _Query_Thread_Handler,
		},
		{
			MethodName: "AddressNames",
			Handler:    _Query_AddressNames_Handler,
		},
		{
			MethodName: "OlloName",
			Handler:    _Query_OlloName_Handler,
		},
		{
			MethodName: "IbcNames",
			Handler:    _Query_IbcNames_Handler,
		},
		{
			MethodName: "NameInfo",
			Handler:    _Query_NameInfo_Handler,
		},
		{
			MethodName: "NameThreads",
			Handler:    _Query_NameThreads_Handler,
		},
		{
			MethodName: "NameThread",
			Handler:    _Query_NameThread_Handler,
		},
		{
			MethodName: "NameThreadReply",
			Handler:    _Query_NameThreadReply_Handler,
		},
		{
			MethodName: "NameTags",
			Handler:    _Query_NameTags_Handler,
		},
		{
			MethodName: "NameOffers",
			Handler:    _Query_NameOffers_Handler,
		},
		{
			MethodName: "NameLoans",
			Handler:    _Query_NameLoans_Handler,
		},
		{
			MethodName: "GroupNames",
			Handler:    _Query_GroupNames_Handler,
		},
		{
			MethodName: "GroupName",
			Handler:    _Query_GroupName_Handler,
		},
		{
			MethodName: "GroupTags",
			Handler:    _Query_GroupTags_Handler,
		},
		{
			MethodName: "Tags",
			Handler:    _Query_Tags_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _Query_Tag_Handler,
		},
		{
			MethodName: "NameId",
			Handler:    _Query_NameId_Handler,
		},
		{
			MethodName: "Names",
			Handler:    _Query_Names_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ollo/ons/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllNames) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNames) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNames) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIbcNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIbcNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIbcNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIbcNamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIbcNamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIbcNamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOlloNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOlloNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOlloNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOlloNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOlloNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOlloNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryThreadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThreadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThreadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThreadId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ThreadId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryThreadsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThreadsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThreadsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryThreadsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryThreadsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryThreadsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressNamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressNamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressNamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAddressNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAddressNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAddressNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNameThreadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNameThreadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNameThreadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ThreadId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ThreadId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNameThreadReplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNameThreadReplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNameThreadReplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x18
	}
	if m.ThreadId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ThreadId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNameThreadReplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNameThreadReplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNameThreadReplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetGroupTagsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGroupTagsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGroupTagsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGroupTagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGroupTagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGroupTagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNameIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNameIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNameIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NameId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NameId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNameIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNameIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNameIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Names[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllNames) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIbcNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIbcNamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOlloNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOlloNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryThreadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryThreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ThreadId != 0 {
		n += 1 + sovQuery(uint64(m.ThreadId))
	}
	return n
}

func (m *QueryThreadsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryThreadsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAddressNamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAddressNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovQuery(uint64(m.GroupId))
	}
	return n
}

func (m *QueryGetTagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovQuery(uint64(m.GroupId))
	}
	return n
}

func (m *QueryGetGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovQuery(uint64(m.GroupId))
	}
	return n
}

func (m *QueryGetNameThreadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ThreadId != 0 {
		n += 1 + sovQuery(uint64(m.ThreadId))
	}
	return n
}

func (m *QueryGetNameThreadReplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ThreadId != 0 {
		n += 1 + sovQuery(uint64(m.ThreadId))
	}
	if m.MessageId != 0 {
		n += 1 + sovQuery(uint64(m.MessageId))
	}
	return n
}

func (m *QueryGetNameThreadReplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetGroupTagsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovQuery(uint64(m.GroupId))
	}
	return n
}

func (m *QueryGetGroupTagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetTagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNameIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NameId != 0 {
		n += 1 + sovQuery(uint64(m.NameId))
	}
	return n
}

func (m *QueryGetNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNameIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Name.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Name.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, e := range m.Names {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNames) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIbcNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIbcNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIbcNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIbcNamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIbcNamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIbcNamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOlloNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOlloNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOlloNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOlloNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOlloNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOlloNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryThreadsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryThreadsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryThreadsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressNamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressNamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressNamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAddressNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAddressNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAddressNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNameThreadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNameThreadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNameThreadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNameThreadReplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNameThreadReplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNameThreadReplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadId", wireType)
			}
			m.ThreadId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNameThreadReplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNameThreadReplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNameThreadReplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGroupTagsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGroupTagsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGroupTagsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGroupTagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGroupTagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGroupTagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNameIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNameIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNameIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameId", wireType)
			}
			m.NameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNameIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNameIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNameIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, Name{})
			if err := m.Names[len(m.Names)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
