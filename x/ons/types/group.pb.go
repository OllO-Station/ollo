// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/ons/v1beta1/group.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GroupNamePolicy int32

const (
	GROUP_NAME_USER_KEEPS_UPON_LEAVING   GroupNamePolicy = 0
	GROUP_NAME_DELETE_UPON_LEAVING       GroupNamePolicy = 1
	GROUP_NAME_GROUP_CLAIMS_UPON_LEAVING GroupNamePolicy = 2
)

var GroupNamePolicy_name = map[int32]string{
	0: "GROUP_NAME_USER_KEEPS_UPON_LEAVING",
	1: "GROUP_NAME_DELETE_UPON_LEAVING",
	2: "GROUP_NAME_GROUP_CLAIMS_UPON_LEAVING",
}

var GroupNamePolicy_value = map[string]int32{
	"GROUP_NAME_USER_KEEPS_UPON_LEAVING":   0,
	"GROUP_NAME_DELETE_UPON_LEAVING":       1,
	"GROUP_NAME_GROUP_CLAIMS_UPON_LEAVING": 2,
}

func (x GroupNamePolicy) String() string {
	return proto.EnumName(GroupNamePolicy_name, int32(x))
}

func (GroupNamePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf00702ec6f9e16b, []int{0}
}

type GroupNameType int32

const (
	GROUP_NAME_UNSPECIFIED GroupNameType = 0
	GROUP_NAME_INDIVIDUAL  GroupNameType = 1
	GROUP_NAME_ROLE        GroupNameType = 2
	GROUP_NAME_GROUP       GroupNameType = 3
	GROUP_NAME_OTHER       GroupNameType = 4
)

var GroupNameType_name = map[int32]string{
	0: "GROUP_NAME_UNSPECIFIED",
	1: "GROUP_NAME_INDIVIDUAL",
	2: "GROUP_NAME_ROLE",
	3: "GROUP_NAME_GROUP",
	4: "GROUP_NAME_OTHER",
}

var GroupNameType_value = map[string]int32{
	"GROUP_NAME_UNSPECIFIED": 0,
	"GROUP_NAME_INDIVIDUAL":  1,
	"GROUP_NAME_ROLE":        2,
	"GROUP_NAME_GROUP":       3,
	"GROUP_NAME_OTHER":       4,
}

func (x GroupNameType) String() string {
	return proto.EnumName(GroupNameType_name, int32(x))
}

func (GroupNameType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf00702ec6f9e16b, []int{1}
}

// Names specific to a certain group or role
type GroupName struct {
	GroupId       uint64        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupNameType GroupNameType `protobuf:"varint,2,opt,name=group_name_type,json=groupNameType,proto3,enum=ollo.ons.v1beta1.GroupNameType" json:"group_name_type,omitempty"`
	// if a role-based or group-based name, specify the group policy address to send name to
	GroupPolicyRole string `protobuf:"bytes,3,opt,name=group_policy_role,json=groupPolicyRole,proto3" json:"group_policy_role,omitempty"`
	// If specified as group name but left empty, name is technically "owned" by the admin
	OwnerAddr string `protobuf:"bytes,4,opt,name=owner_addr,json=ownerAddr,proto3" json:"owner_addr,omitempty"`
	// if empty, any member of group can use name
	GroupRoles []string `protobuf:"bytes,5,rep,name=group_roles,json=groupRoles,proto3" json:"group_roles,omitempty"`
	// only applies for multi-user group roles
	AutomaticSet string     `protobuf:"bytes,6,opt,name=automatic_set,json=automaticSet,proto3" json:"automatic_set,omitempty"`
	Status       NameStatus `protobuf:"varint,7,opt,name=status,proto3,enum=ollo.ons.v1beta1.NameStatus" json:"status,omitempty"`
	PricePaid    string     `protobuf:"bytes,8,opt,name=price_paid,json=pricePaid,proto3" json:"price_paid,omitempty"`
	ColorHint    string     `protobuf:"bytes,9,opt,name=color_hint,json=colorHint,proto3" json:"color_hint,omitempty"`
	// Optional
	Prefix *NameEnd `protobuf:"bytes,10,opt,name=prefix,proto3" json:"prefix,omitempty"`
	//Optional
	Suffix *NameEnd   `protobuf:"bytes,11,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Tag    []*NameTag `protobuf:"bytes,12,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (m *GroupName) Reset()         { *m = GroupName{} }
func (m *GroupName) String() string { return proto.CompactTextString(m) }
func (*GroupName) ProtoMessage()    {}
func (*GroupName) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf00702ec6f9e16b, []int{0}
}
func (m *GroupName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupName.Merge(m, src)
}
func (m *GroupName) XXX_Size() int {
	return m.Size()
}
func (m *GroupName) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupName.DiscardUnknown(m)
}

var xxx_messageInfo_GroupName proto.InternalMessageInfo

func (m *GroupName) GetGroupId() uint64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupName) GetGroupNameType() GroupNameType {
	if m != nil {
		return m.GroupNameType
	}
	return GROUP_NAME_UNSPECIFIED
}

func (m *GroupName) GetGroupPolicyRole() string {
	if m != nil {
		return m.GroupPolicyRole
	}
	return ""
}

func (m *GroupName) GetOwnerAddr() string {
	if m != nil {
		return m.OwnerAddr
	}
	return ""
}

func (m *GroupName) GetGroupRoles() []string {
	if m != nil {
		return m.GroupRoles
	}
	return nil
}

func (m *GroupName) GetAutomaticSet() string {
	if m != nil {
		return m.AutomaticSet
	}
	return ""
}

func (m *GroupName) GetStatus() NameStatus {
	if m != nil {
		return m.Status
	}
	return NAME_STATUS_UNSPECIFIED
}

func (m *GroupName) GetPricePaid() string {
	if m != nil {
		return m.PricePaid
	}
	return ""
}

func (m *GroupName) GetColorHint() string {
	if m != nil {
		return m.ColorHint
	}
	return ""
}

func (m *GroupName) GetPrefix() *NameEnd {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *GroupName) GetSuffix() *NameEnd {
	if m != nil {
		return m.Suffix
	}
	return nil
}

func (m *GroupName) GetTag() []*NameTag {
	if m != nil {
		return m.Tag
	}
	return nil
}

func init() {
	proto.RegisterEnum("ollo.ons.v1beta1.GroupNamePolicy", GroupNamePolicy_name, GroupNamePolicy_value)
	proto.RegisterEnum("ollo.ons.v1beta1.GroupNameType", GroupNameType_name, GroupNameType_value)
	proto.RegisterType((*GroupName)(nil), "ollo.ons.v1beta1.GroupName")
}

func init() { proto.RegisterFile("ollo/ons/v1beta1/group.proto", fileDescriptor_cf00702ec6f9e16b) }

var fileDescriptor_cf00702ec6f9e16b = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6f, 0xd3, 0x3e,
	0x18, 0xad, 0xd7, 0xfe, 0xba, 0xd6, 0xdb, 0x7e, 0x0b, 0x66, 0xa0, 0xac, 0x8c, 0x34, 0x1a, 0x08,
	0x45, 0x43, 0x6a, 0xb5, 0xc1, 0x89, 0x5b, 0x59, 0x4d, 0x17, 0xd1, 0xa5, 0x91, 0xdb, 0xee, 0xc0,
	0xc5, 0xca, 0x1a, 0x2f, 0x44, 0xca, 0xe2, 0x28, 0x71, 0x61, 0xfb, 0x0f, 0x38, 0xb2, 0x1b, 0xc7,
	0x49, 0x70, 0xe0, 0x4f, 0xe1, 0xb8, 0x23, 0x47, 0xb4, 0x5d, 0xf8, 0x33, 0x90, 0x9d, 0xa9, 0x64,
	0x1d, 0x88, 0xdb, 0xe7, 0xf7, 0xde, 0xf7, 0xbe, 0x67, 0xd9, 0x1f, 0xdc, 0xe0, 0x51, 0xc4, 0xdb,
	0x3c, 0xce, 0xda, 0xef, 0xb6, 0x0f, 0x99, 0xf0, 0xb6, 0xdb, 0x41, 0xca, 0xa7, 0x49, 0x2b, 0x49,
	0xb9, 0xe0, 0x48, 0x93, 0x6c, 0x8b, 0xc7, 0x59, 0xeb, 0x9a, 0x6d, 0x3c, 0xb8, 0xa5, 0x8f, 0xbd,
	0x63, 0x96, 0xcb, 0x1b, 0x6b, 0x01, 0x0f, 0xb8, 0x2a, 0xdb, 0xb2, 0xca, 0xd1, 0xcd, 0xb3, 0x0a,
	0xac, 0xf7, 0xa4, 0xa9, 0xe3, 0x1d, 0x33, 0xb4, 0x0e, 0x6b, 0x6a, 0x02, 0x0d, 0x7d, 0x1d, 0x98,
	0xc0, 0xaa, 0x90, 0x45, 0x75, 0xb6, 0x7d, 0xd4, 0x83, 0xab, 0x39, 0x25, 0x2d, 0xa9, 0x38, 0x4d,
	0x98, 0xbe, 0x60, 0x02, 0xeb, 0xff, 0x9d, 0x66, 0x6b, 0x3e, 0x47, 0x6b, 0x66, 0x38, 0x3a, 0x4d,
	0x18, 0x59, 0x09, 0x8a, 0x47, 0xb4, 0x05, 0xef, 0xe4, 0x46, 0x09, 0x8f, 0xc2, 0xc9, 0x29, 0x4d,
	0x79, 0xc4, 0xf4, 0xb2, 0x09, 0xac, 0x3a, 0xc9, 0x27, 0xb8, 0x0a, 0x27, 0x3c, 0x62, 0xe8, 0x21,
	0x84, 0xfc, 0x7d, 0xcc, 0x52, 0xea, 0xf9, 0x7e, 0xaa, 0x57, 0x94, 0xa8, 0xae, 0x90, 0x8e, 0xef,
	0xa7, 0xa8, 0x09, 0x97, 0x72, 0x2b, 0xe9, 0x91, 0xe9, 0xff, 0x99, 0x65, 0xab, 0x4e, 0xa0, 0x82,
	0x64, 0x7b, 0x86, 0x1e, 0xc1, 0x15, 0x6f, 0x2a, 0xf8, 0xb1, 0x27, 0xc2, 0x09, 0xcd, 0x98, 0xd0,
	0xab, 0xca, 0x62, 0x79, 0x06, 0x0e, 0x99, 0x40, 0xcf, 0x61, 0x35, 0x13, 0x9e, 0x98, 0x66, 0xfa,
	0xa2, 0xba, 0xd0, 0xc6, 0xed, 0x0b, 0xc9, 0xf0, 0x43, 0xa5, 0x21, 0xd7, 0x5a, 0x19, 0x2d, 0x49,
	0xc3, 0x09, 0xa3, 0x89, 0x17, 0xfa, 0x7a, 0x2d, 0x8f, 0xa6, 0x10, 0xd7, 0x0b, 0x7d, 0x49, 0x4f,
	0x78, 0xc4, 0x53, 0xfa, 0x36, 0x8c, 0x85, 0x5e, 0xcf, 0x69, 0x85, 0xec, 0x85, 0xb1, 0x40, 0xdb,
	0xb0, 0x9a, 0xa4, 0xec, 0x28, 0x3c, 0xd1, 0xa1, 0x09, 0xac, 0xa5, 0x9d, 0xf5, 0x3f, 0xcf, 0xc4,
	0xb1, 0x4f, 0xae, 0x85, 0xb2, 0x25, 0x9b, 0x1e, 0xc9, 0x96, 0xa5, 0x7f, 0xb6, 0xe4, 0x42, 0xf4,
	0x14, 0x96, 0x85, 0x17, 0xe8, 0xcb, 0x66, 0xf9, 0xef, 0xfa, 0x91, 0x17, 0x10, 0xa9, 0x7a, 0x51,
	0xfb, 0x74, 0xde, 0x04, 0x3f, 0xcf, 0x9b, 0x60, 0xeb, 0x0c, 0xc0, 0xd5, 0xd9, 0x13, 0xe6, 0xaf,
	0x81, 0x9e, 0xc0, 0xcd, 0x1e, 0x19, 0x8c, 0x5d, 0xea, 0x74, 0xf6, 0x31, 0x1d, 0x0f, 0x31, 0xa1,
	0xaf, 0x31, 0x76, 0x87, 0x74, 0xec, 0x0e, 0x1c, 0xda, 0xc7, 0x9d, 0x03, 0xdb, 0xe9, 0x69, 0x25,
	0xb4, 0x09, 0x8d, 0x82, 0xae, 0x8b, 0xfb, 0x78, 0x84, 0x6f, 0x6a, 0x00, 0xb2, 0xe0, 0xe3, 0x82,
	0x26, 0x2f, 0x77, 0xfb, 0x1d, 0x7b, 0x7f, 0xce, 0x6d, 0xa1, 0x51, 0xfb, 0xf0, 0xd9, 0x28, 0x7d,
	0xfd, 0x62, 0xa8, 0x4c, 0x2b, 0x37, 0xbe, 0x15, 0x6a, 0xc0, 0xfb, 0xc5, 0x44, 0xce, 0xd0, 0xc5,
	0xbb, 0xf6, 0x2b, 0x1b, 0x77, 0xb5, 0x12, 0x5a, 0x87, 0xf7, 0x0a, 0x9c, 0xed, 0x74, 0xed, 0x03,
	0xbb, 0x3b, 0xee, 0xf4, 0x35, 0x80, 0xee, 0xc2, 0xd5, 0x02, 0x45, 0x06, 0x7d, 0xac, 0x2d, 0xa0,
	0x35, 0xa8, 0xcd, 0x27, 0xd2, 0xca, 0x73, 0xe8, 0x60, 0xb4, 0x87, 0x89, 0x56, 0xf9, 0x9d, 0xe9,
	0xe5, 0xd6, 0xb7, 0x4b, 0x03, 0x5c, 0x5c, 0x1a, 0xe0, 0xc7, 0xa5, 0x01, 0x3e, 0x5e, 0x19, 0xa5,
	0x8b, 0x2b, 0xa3, 0xf4, 0xfd, 0xca, 0x28, 0xbd, 0x51, 0xab, 0xd9, 0x3e, 0x51, 0xab, 0x28, 0x57,
	0x25, 0x3b, 0xac, 0xaa, 0x75, 0x7b, 0xf6, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x78, 0x18, 0xee,
	0xd3, 0x03, 0x00, 0x00,
}

func (this *GroupName) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GroupName)
	if !ok {
		that2, ok := that.(GroupName)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GroupId != that1.GroupId {
		return false
	}
	if this.GroupNameType != that1.GroupNameType {
		return false
	}
	if this.GroupPolicyRole != that1.GroupPolicyRole {
		return false
	}
	if this.OwnerAddr != that1.OwnerAddr {
		return false
	}
	if len(this.GroupRoles) != len(that1.GroupRoles) {
		return false
	}
	for i := range this.GroupRoles {
		if this.GroupRoles[i] != that1.GroupRoles[i] {
			return false
		}
	}
	if this.AutomaticSet != that1.AutomaticSet {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.PricePaid != that1.PricePaid {
		return false
	}
	if this.ColorHint != that1.ColorHint {
		return false
	}
	if !this.Prefix.Equal(that1.Prefix) {
		return false
	}
	if !this.Suffix.Equal(that1.Suffix) {
		return false
	}
	if len(this.Tag) != len(that1.Tag) {
		return false
	}
	for i := range this.Tag {
		if !this.Tag[i].Equal(that1.Tag[i]) {
			return false
		}
	}
	return true
}
func (m *GroupName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		for iNdEx := len(m.Tag) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tag[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if m.Suffix != nil {
		{
			size, err := m.Suffix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Prefix != nil {
		{
			size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.ColorHint) > 0 {
		i -= len(m.ColorHint)
		copy(dAtA[i:], m.ColorHint)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.ColorHint)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PricePaid) > 0 {
		i -= len(m.PricePaid)
		copy(dAtA[i:], m.PricePaid)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.PricePaid)))
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AutomaticSet) > 0 {
		i -= len(m.AutomaticSet)
		copy(dAtA[i:], m.AutomaticSet)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.AutomaticSet)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GroupRoles) > 0 {
		for iNdEx := len(m.GroupRoles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GroupRoles[iNdEx])
			copy(dAtA[i:], m.GroupRoles[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.GroupRoles[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.OwnerAddr) > 0 {
		i -= len(m.OwnerAddr)
		copy(dAtA[i:], m.OwnerAddr)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.OwnerAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupPolicyRole) > 0 {
		i -= len(m.GroupPolicyRole)
		copy(dAtA[i:], m.GroupPolicyRole)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.GroupPolicyRole)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GroupNameType != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupNameType))
		i--
		dAtA[i] = 0x10
	}
	if m.GroupId != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovGroup(uint64(m.GroupId))
	}
	if m.GroupNameType != 0 {
		n += 1 + sovGroup(uint64(m.GroupNameType))
	}
	l = len(m.GroupPolicyRole)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.OwnerAddr)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.GroupRoles) > 0 {
		for _, s := range m.GroupRoles {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	l = len(m.AutomaticSet)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovGroup(uint64(m.Status))
	}
	l = len(m.PricePaid)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.ColorHint)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Prefix != nil {
		l = m.Prefix.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.Suffix != nil {
		l = m.Suffix.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if len(m.Tag) > 0 {
		for _, e := range m.Tag {
			l = e.Size()
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNameType", wireType)
			}
			m.GroupNameType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupNameType |= GroupNameType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupPolicyRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupPolicyRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupRoles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupRoles = append(m.GroupRoles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutomaticSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutomaticSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NameStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricePaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PricePaid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorHint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ColorHint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prefix == nil {
				m.Prefix = &NameEnd{}
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Suffix == nil {
				m.Suffix = &NameEnd{}
			}
			if err := m.Suffix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = append(m.Tag, &NameTag{})
			if err := m.Tag[len(m.Tag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup = fmt.Errorf("proto: unexpected end of group")
)
