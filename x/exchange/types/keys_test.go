package types_test

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"

	utils "github.com/ollo-station/ollo/x/ollo/types"
	"github.com/ollo-station/ollo/x/exchange/types"
)

func TestMarketKey(t *testing.T) {
	require.Equal(t, []byte{0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x42, 0x40}, types.GetMarketKey(1000000))
}

func TestMarketStateKey(t *testing.T) {
	require.Equal(t, []byte{0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x42, 0x40}, types.GetMarketStateKey(1000000))
}

func TestMarketByDenomsIndexKey(t *testing.T) {
	key := types.GetMarketByDenomsIndexKey("uollo", "uusd")
	require.Equal(t, []byte{0x64, 0x4, 0x75, 0x63, 0x72, 0x65, 0x75, 0x75, 0x73, 0x64}, key)
	baseDenom, quoteDenom := types.ParseMarketByDenomsIndexKey(key)
	require.Equal(t, "uollo", baseDenom)
	require.Equal(t, "uusd", quoteDenom)
}

func TestOrderKey(t *testing.T) {
	require.Equal(t, []byte{0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x42, 0x40}, types.GetOrderKey(1000000))
}

func TestOrderBookOrderIndexKey(t *testing.T) {
	key := types.GetOrderBookOrderIndexKey(1000000, true, types.MaxPrice, 10000000)
	require.Equal(t, []byte{
		0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x42, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
		0x97, 0xd4, 0xdf, 0x19, 0xd6, 0x5, 0x76, 0x73, 0x37, 0xe9, 0xf1, 0x4d, 0x3e, 0xec, 0x89,
		0x20, 0xe4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x67, 0x69, 0x80,
	}, key)
	orderId := types.ParseOrderIdFromOrderBookOrderIndexKey(key)
	require.EqualValues(t, 10000000, orderId)
	prefix := types.GetOrderBookSideIteratorPrefix(1000000, true)
	require.True(t, bytes.HasPrefix(key, prefix))
	prefix = types.GetOrdersByMarketIteratorPrefix(1000000)
	require.True(t, bytes.HasPrefix(key, prefix))
}

func TestOrdersByOrdererIndexKey(t *testing.T) {
	ordererAddr := utils.TestAddress(1000000)
	key := types.GetOrdersByOrdererIndexKey(ordererAddr, 1000000, 10000000)
	require.Equal(t, []byte{
		0x67, 0x14, 0x80, 0x89, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x42, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x98, 0x96, 0x80,
	}, key)
	orderId := types.ParseOrderIdFromOrdersByOrdererIndexKey(key)
	require.EqualValues(t, 10000000, orderId)
	prefix := types.GetOrdersByOrdererIteratorPrefix(ordererAddr)
	require.True(t, bytes.HasPrefix(key, prefix))
	prefix = types.GetOrdersByOrdererAndMarketIteratorPrefix(ordererAddr, 1000000)
	require.True(t, bytes.HasPrefix(key, prefix))
}

func TestNumMMOrdersKey(t *testing.T) {
	ordererAddr := utils.TestAddress(1000000)
	key := types.GetNumMMOrdersKey(ordererAddr, 1000000)
	require.Equal(t, []byte{
		0x68, 0x14, 0x80, 0x89, 0x7a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x42, 0x40,
	}, key)
	ordererAddr2, marketId := types.ParseNumMMOrdersKey(key)
	require.Equal(t, ordererAddr, ordererAddr2)
	require.EqualValues(t, 1000000, marketId)
}
