// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/lstaking/v1/voting.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// voting power of a validator, incl. staking and lstaking
type VotingPower struct {
	// voter address in bech32
	Voter github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"voter,omitempty" yaml:"voter"`
	// voting power from default staking module
	StakingVotingPower github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=staking_voting_power,json=stakingVotingPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staking_voting_power" yaml:"staking_voting_power"`
	// voting power from lstaking module
	LstakingVotingPower github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=lstaking_voting_power,json=lstakingVotingPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lstaking_voting_power" yaml:"staking_voting_power"`
	// total validator voting power
	TotalVotingPower github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=total_voting_power,json=totalVotingPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_voting_power" yaml:"total_voting_power"`
}

func (m *VotingPower) Reset()         { *m = VotingPower{} }
func (m *VotingPower) String() string { return proto.CompactTextString(m) }
func (*VotingPower) ProtoMessage()    {}
func (*VotingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_d168d96b96c2b10d, []int{0}
}
func (m *VotingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingPower.Merge(m, src)
}
func (m *VotingPower) XXX_Size() int {
	return m.Size()
}
func (m *VotingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingPower.DiscardUnknown(m)
}

var xxx_messageInfo_VotingPower proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VotingPower)(nil), "ollo.lstaking.v1.VotingPower")
}

func init() { proto.RegisterFile("ollo/lstaking/v1/voting.proto", fileDescriptor_d168d96b96c2b10d) }

var fileDescriptor_d168d96b96c2b10d = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0xcf, 0xc9, 0xc9,
	0xd7, 0xcf, 0x29, 0x2e, 0x49, 0xcc, 0xce, 0xcc, 0x4b, 0xd7, 0x2f, 0x33, 0xd4, 0x2f, 0xcb, 0x2f,
	0xc9, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x00, 0x49, 0xeb, 0xc1, 0xa4,
	0xf5, 0xca, 0x0c, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x92, 0xfa, 0x20, 0x16, 0x44, 0x9d,
	0x94, 0x64, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71, 0x3c, 0x44, 0x02, 0xc2, 0x81, 0x48, 0x29, 0x7d,
	0x60, 0xe6, 0xe2, 0x0e, 0x03, 0x9b, 0x19, 0x90, 0x5f, 0x9e, 0x5a, 0x24, 0x14, 0xce, 0xc5, 0x5a,
	0x96, 0x5f, 0x92, 0x5a, 0x24, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0xe9, 0xe4, 0xf8, 0xe9, 0x9e, 0x3c,
	0x4f, 0x65, 0x62, 0x6e, 0x8e, 0x95, 0x12, 0x58, 0x58, 0xe9, 0xd7, 0x3d, 0x79, 0xdd, 0xf4, 0xcc,
	0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xa8, 0x59, 0x50, 0x4a, 0xb7, 0x38, 0x25, 0x5b,
	0xbf, 0xa4, 0xb2, 0x20, 0xb5, 0x58, 0x2f, 0x2c, 0x31, 0xc7, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8,
	0x38, 0x08, 0x62, 0x9e, 0x50, 0x3d, 0x97, 0x08, 0xd4, 0x9d, 0xf1, 0x10, 0x3f, 0xc4, 0x17, 0x80,
	0x2c, 0x94, 0x60, 0x02, 0xdb, 0xe3, 0x7b, 0xe2, 0x9e, 0x3c, 0xc3, 0xad, 0x7b, 0xf2, 0x6a, 0x44,
	0x98, 0xed, 0x99, 0x57, 0xf2, 0xe9, 0x9e, 0xbc, 0x34, 0xc4, 0x55, 0xd8, 0xcc, 0x54, 0x0a, 0x12,
	0x82, 0x0a, 0x23, 0xfb, 0xac, 0x91, 0x91, 0x4b, 0x34, 0x07, 0xab, 0x13, 0x98, 0x69, 0xe1, 0x04,
	0xe1, 0x1c, 0x2c, 0x6e, 0xa8, 0xe4, 0x12, 0x2a, 0xc9, 0x2f, 0x49, 0xcc, 0x41, 0xb5, 0x9f, 0x05,
	0x6c, 0xbf, 0x37, 0xc9, 0xf6, 0x4b, 0x42, 0xec, 0xc7, 0x34, 0x51, 0x29, 0x48, 0x00, 0x2c, 0x88,
	0x64, 0xb5, 0x15, 0x47, 0xc7, 0x02, 0x79, 0x86, 0x17, 0x0b, 0xe4, 0x19, 0x9d, 0xdc, 0x4f, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e,
	0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x0a, 0x39, 0x66, 0x41, 0x49, 0x4b, 0xb7, 0xb8,
	0x24, 0xb1, 0x24, 0x33, 0x3f, 0x0f, 0xcc, 0xd1, 0xaf, 0x40, 0x24, 0x44, 0xb0, 0x2b, 0x92, 0xd8,
	0xc0, 0x49, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x20, 0x35, 0x9d, 0xde, 0xa6, 0x02, 0x00,
	0x00,
}

func (this *VotingPower) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VotingPower)
	if !ok {
		that2, ok := that.(VotingPower)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Voter != that1.Voter {
		return false
	}
	if !this.StakingVotingPower.Equal(that1.StakingVotingPower) {
		return false
	}
	if !this.LstakingVotingPower.Equal(that1.LstakingVotingPower) {
		return false
	}
	if !this.TotalVotingPower.Equal(that1.TotalVotingPower) {
		return false
	}
	return true
}
func (m *VotingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalVotingPower.Size()
		i -= size
		if _, err := m.TotalVotingPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVoting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.LstakingVotingPower.Size()
		i -= size
		if _, err := m.LstakingVotingPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVoting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.StakingVotingPower.Size()
		i -= size
		if _, err := m.StakingVotingPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVoting(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintVoting(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoting(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VotingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovVoting(uint64(l))
	}
	l = m.StakingVotingPower.Size()
	n += 1 + l + sovVoting(uint64(l))
	l = m.LstakingVotingPower.Size()
	n += 1 + l + sovVoting(uint64(l))
	l = m.TotalVotingPower.Size()
	n += 1 + l + sovVoting(uint64(l))
	return n
}

func sovVoting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoting(x uint64) (n int) {
	return sovVoting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VotingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = github_com_cosmos_cosmos_sdk_types.ValAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingVotingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingVotingPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LstakingVotingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LstakingVotingPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVotingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVoting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVoting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalVotingPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoting
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoting
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoting
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoting        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoting          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoting = fmt.Errorf("proto: unexpected end of group")
)
