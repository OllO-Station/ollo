// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ollo/lstaking/v1/redelegation.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RedelegationEntry defines an entry in a redelegation
type Redelegation struct {
	// Delegator address
	Delegator github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=delegator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"delegator" yaml:"delegator"`
	// Validator source operator address
	ValFromAddress github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,2,opt,name=val_from_address,json=valFromAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"val_from_address" yaml:"val_from_address"`
	// Validator destination operator address
	ValToAddress github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,3,opt,name=val_to_address,json=valToAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"val_to_address" yaml:"val_to_address"`
	// Amount to redelegate
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
	Last   bool                                   `protobuf:"varint,5,opt,name=last,proto3" json:"last,omitempty" yaml:"last"`
	Error  string                                 `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty" yaml:"error"`
}

func (m *Redelegation) Reset()         { *m = Redelegation{} }
func (m *Redelegation) String() string { return proto.CompactTextString(m) }
func (*Redelegation) ProtoMessage()    {}
func (*Redelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_37485f13ca77cce3, []int{0}
}
func (m *Redelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Redelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Redelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Redelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redelegation.Merge(m, src)
}
func (m *Redelegation) XXX_Size() int {
	return m.Size()
}
func (m *Redelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Redelegation.DiscardUnknown(m)
}

var xxx_messageInfo_Redelegation proto.InternalMessageInfo

func (m *Redelegation) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *Redelegation) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*Redelegation)(nil), "ollo.lstaking.v1.Redelegation")
}

func init() {
	proto.RegisterFile("ollo/lstaking/v1/redelegation.proto", fileDescriptor_37485f13ca77cce3)
}

var fileDescriptor_37485f13ca77cce3 = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x86, 0x13, 0xed, 0x2d, 0xde, 0xb1, 0x6a, 0x08, 0x57, 0x8c, 0x77, 0x91, 0x5c, 0xe6, 0xc2,
	0xe5, 0x6e, 0x92, 0x50, 0xdc, 0xb9, 0x91, 0x76, 0xa1, 0xb8, 0x11, 0x89, 0xa2, 0xe0, 0x26, 0x4c,
	0x93, 0x18, 0x43, 0x27, 0x39, 0x65, 0x66, 0x1a, 0xac, 0x1b, 0x5f, 0xc1, 0xb7, 0xf0, 0x05, 0x7c,
	0x88, 0x2e, 0x8b, 0x2b, 0x71, 0x11, 0xa4, 0x7d, 0x83, 0x3c, 0x81, 0x64, 0x66, 0xda, 0x14, 0x57,
	0xea, 0x2a, 0x39, 0xe7, 0xff, 0xf9, 0xbf, 0x9f, 0xe1, 0xa0, 0x4b, 0xa0, 0x14, 0x42, 0xca, 0x05,
	0x99, 0x17, 0x55, 0x1e, 0xd6, 0xe3, 0x90, 0x65, 0x69, 0x46, 0xb3, 0x9c, 0x88, 0x02, 0xaa, 0x60,
	0xc1, 0x40, 0x80, 0x6d, 0x75, 0xa6, 0x60, 0x6f, 0x0a, 0xea, 0xf1, 0xf9, 0x59, 0x0e, 0x39, 0x48,
	0x31, 0xec, 0xfe, 0x94, 0xef, 0xfc, 0x61, 0x02, 0xbc, 0x04, 0x1e, 0x2b, 0x41, 0x0d, 0x4a, 0xc2,
	0x5f, 0x07, 0x68, 0x14, 0x1d, 0x25, 0xdb, 0x9f, 0xd1, 0xa9, 0x9e, 0x80, 0x39, 0xe6, 0x85, 0x79,
	0x7d, 0x3a, 0x25, 0xeb, 0xc6, 0x33, 0x7e, 0x36, 0x9e, 0x9f, 0x17, 0xe2, 0xc3, 0x72, 0x16, 0x24,
	0x50, 0xea, 0x10, 0xfd, 0xf1, 0x79, 0x3a, 0x0f, 0xc5, 0x6a, 0x91, 0xf1, 0x60, 0x92, 0x24, 0x93,
	0x34, 0x65, 0x19, 0xe7, 0x6d, 0xe3, 0x59, 0x2b, 0x52, 0xd2, 0xc7, 0xf8, 0x90, 0x87, 0xbf, 0x7f,
	0xf3, 0xcf, 0x34, 0x5e, 0xbb, 0x5e, 0x09, 0x56, 0x54, 0x79, 0xd4, 0x33, 0xed, 0x4f, 0xc8, 0xaa,
	0x09, 0x8d, 0xdf, 0x33, 0x28, 0x63, 0xa2, 0x4c, 0xce, 0x0d, 0xd9, 0xe3, 0xe5, 0x3f, 0xf4, 0x78,
	0x43, 0x68, 0xdf, 0xe3, 0x81, 0xea, 0xf1, 0x67, 0x2c, 0x8e, 0xee, 0xd6, 0x84, 0x3e, 0x65, 0x50,
	0x6a, 0xab, 0x2d, 0x50, 0xb7, 0x89, 0x05, 0x1c, 0xc8, 0x37, 0x25, 0xf9, 0xc5, 0xff, 0x92, 0xef,
	0xf7, 0xe4, 0x3e, 0x14, 0x47, 0xa3, 0x9a, 0xd0, 0xd7, 0xb0, 0xa7, 0xbe, 0x45, 0x43, 0x52, 0xc2,
	0xb2, 0x12, 0xce, 0x40, 0xd2, 0x9e, 0x68, 0xda, 0xd5, 0x5f, 0xd0, 0x9e, 0x57, 0xa2, 0x6d, 0xbc,
	0x3b, 0x0a, 0xa3, 0x52, 0x70, 0xa4, 0xe3, 0xec, 0x4b, 0x34, 0xa0, 0x84, 0x0b, 0xe7, 0xe4, 0xc2,
	0xbc, 0xbe, 0x35, 0xbd, 0xd7, 0x36, 0xde, 0x6d, 0x65, 0xec, 0xb6, 0x38, 0x92, 0xa2, 0x7d, 0x85,
	0x4e, 0x32, 0xc6, 0x80, 0x39, 0x43, 0x09, 0xb7, 0xda, 0xc6, 0x1b, 0x29, 0x97, 0x5c, 0xe3, 0x48,
	0xc9, 0xd3, 0x67, 0xeb, 0xad, 0x6b, 0x6e, 0xb6, 0xae, 0xf9, 0x6b, 0xeb, 0x9a, 0x5f, 0x76, 0xae,
	0xb1, 0xd9, 0xb9, 0xc6, 0x8f, 0x9d, 0x6b, 0xbc, 0x3b, 0x7e, 0x95, 0xee, 0x22, 0x7d, 0x2e, 0xe4,
	0x2d, 0xc9, 0x21, 0xfc, 0xd8, 0x5f, 0xb1, 0xac, 0x3c, 0x1b, 0xca, 0xcb, 0x7b, 0xf4, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x8c, 0x6b, 0x83, 0x10, 0xe3, 0x02, 0x00, 0x00,
}

func (m *Redelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Redelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Redelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRedelegation(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x32
	}
	if m.Last {
		i--
		if m.Last {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRedelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ValToAddress.Size()
		i -= size
		if _, err := m.ValToAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRedelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.ValFromAddress.Size()
		i -= size
		if _, err := m.ValFromAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRedelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Delegator.Size()
		i -= size
		if _, err := m.Delegator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRedelegation(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRedelegation(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedelegation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Redelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegator.Size()
	n += 1 + l + sovRedelegation(uint64(l))
	l = m.ValFromAddress.Size()
	n += 1 + l + sovRedelegation(uint64(l))
	l = m.ValToAddress.Size()
	n += 1 + l + sovRedelegation(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovRedelegation(uint64(l))
	if m.Last {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRedelegation(uint64(l))
	}
	return n
}

func sovRedelegation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedelegation(x uint64) (n int) {
	return sovRedelegation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Redelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedelegation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Redelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Redelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValFromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValFromAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValToAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Last = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedelegation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRedelegation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedelegation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRedelegation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedelegation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedelegation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedelegation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedelegation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedelegation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedelegation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedelegation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedelegation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedelegation = fmt.Errorf("proto: unexpected end of group")
)
